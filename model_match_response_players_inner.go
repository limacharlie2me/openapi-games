/*
OpenDota API

# Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  Without a key, you can make 2,000 free calls per day at a rate limit of 60 requests/minute. We also offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.     

API version: 25.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the MatchResponsePlayersInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchResponsePlayersInner{}

// MatchResponsePlayersInner player
type MatchResponsePlayersInner struct {
	// The ID number of the match assigned by Valve
	MatchId *int32 `json:"match_id,omitempty"`
	// Which slot the player is in. 0-127 are Radiant, 128-255 are Dire
	PlayerSlot NullableInt32 `json:"player_slot,omitempty"`
	// An array describing how abilities were upgraded
	AbilityUpgradesArr []int32 `json:"ability_upgrades_arr,omitempty"`
	// Object containing information on how many times the played used their abilities
	AbilityUses map[string]interface{} `json:"ability_uses,omitempty"`
	// Object containing information on who the player used their abilities on
	AbilityTargets map[string]interface{} `json:"ability_targets,omitempty"`
	// Object containing information on how and how much damage the player dealt to other heroes
	DamageTargets map[string]interface{} `json:"damage_targets,omitempty"`
	// The player account ID
	AccountId *int32 `json:"account_id,omitempty"`
	// Object containing information on how many and what type of actions the player issued to their hero
	Actions map[string]interface{} `json:"actions,omitempty"`
	// Object containing information on additional units the player had under their control
	AdditionalUnits []map[string]interface{} `json:"additional_units,omitempty"`
	// Number of assists the player had
	Assists *int32 `json:"assists,omitempty"`
	// Item in backpack slot 0
	Backpack0 *int32 `json:"backpack_0,omitempty"`
	// Item in backpack slot 1
	Backpack1 *int32 `json:"backpack_1,omitempty"`
	// Item in backpack slot 2
	Backpack2 *int32 `json:"backpack_2,omitempty"`
	// Array containing information about buybacks
	BuybackLog []MatchResponsePlayersInnerBuybackLogInner `json:"buyback_log,omitempty"`
	// Number of camps stacked
	CampsStacked *int32 `json:"camps_stacked,omitempty"`
	// Array containing information about the player's disconnections and reconnections
	ConnectionLog []MatchResponsePlayersInnerConnectionLogInner `json:"connection_log,omitempty"`
	// Number of creeps stacked
	CreepsStacked *int32 `json:"creeps_stacked,omitempty"`
	// Object containing information about damage dealt by the player to different units
	Damage map[string]interface{} `json:"damage,omitempty"`
	// Object containing information about about the sources of this player's damage to heroes
	DamageInflictor map[string]interface{} `json:"damage_inflictor,omitempty"`
	// Object containing information about the sources of damage received by this player from heroes
	DamageInflictorReceived map[string]interface{} `json:"damage_inflictor_received,omitempty"`
	// Object containing information about from whom the player took damage
	DamageTaken map[string]interface{} `json:"damage_taken,omitempty"`
	// Number of deaths
	Deaths *int32 `json:"deaths,omitempty"`
	// Number of denies
	Denies *int32 `json:"denies,omitempty"`
	// Array containing number of denies at different times of the match
	DnT []int32 `json:"dn_t,omitempty"`
	// Gold at the end of the game
	Gold *int32 `json:"gold,omitempty"`
	// Gold Per Minute obtained by this player
	GoldPerMin *int32 `json:"gold_per_min,omitempty"`
	// Object containing information on how the player gainined gold over the course of the match
	GoldReasons map[string]interface{} `json:"gold_reasons,omitempty"`
	// How much gold the player spent
	GoldSpent *int32 `json:"gold_spent,omitempty"`
	// Array containing total gold at different times of the match
	GoldT []int32 `json:"gold_t,omitempty"`
	// Hero Damage Dealt
	HeroDamage *int32 `json:"hero_damage,omitempty"`
	// Hero Healing Done
	HeroHealing *int32 `json:"hero_healing,omitempty"`
	// Object containing information on how many ticks of damages the hero inflicted with different spells and damage inflictors
	HeroHits map[string]interface{} `json:"hero_hits,omitempty"`
	// The ID value of the hero played
	HeroId *int32 `json:"hero_id,omitempty"`
	// Item in the player's first slot
	Item0 *int32 `json:"item_0,omitempty"`
	// Item in the player's second slot
	Item1 *int32 `json:"item_1,omitempty"`
	// Item in the player's third slot
	Item2 *int32 `json:"item_2,omitempty"`
	// Item in the player's fourth slot
	Item3 *int32 `json:"item_3,omitempty"`
	// Item in the player's fifth slot
	Item4 *int32 `json:"item_4,omitempty"`
	// Item in the player's sixth slot
	Item5 *int32 `json:"item_5,omitempty"`
	// Object containing information about how many times a player used items
	ItemUses map[string]interface{} `json:"item_uses,omitempty"`
	// Object containing information about the player's killstreaks
	KillStreaks map[string]interface{} `json:"kill_streaks,omitempty"`
	// Object containing information about what units the player killed
	Killed map[string]interface{} `json:"killed,omitempty"`
	// Object containing information about who killed the player
	KilledBy map[string]interface{} `json:"killed_by,omitempty"`
	// Number of kills
	Kills *int32 `json:"kills,omitempty"`
	// Array containing information on which hero the player killed at what time
	KillsLog []MatchResponsePlayersInnerKillsLogInner `json:"kills_log,omitempty"`
	// Object containing information on lane position
	LanePos map[string]interface{} `json:"lane_pos,omitempty"`
	// Number of last hits
	LastHits *int32 `json:"last_hits,omitempty"`
	// Integer describing whether or not the player left the game. 0: didn't leave. 1: left safely. 2+: Abandoned
	LeaverStatus *int32 `json:"leaver_status,omitempty"`
	// Level at the end of the game
	Level *int32 `json:"level,omitempty"`
	// Array describing last hits at each minute in the game
	LhT []int32 `json:"lh_t,omitempty"`
	// life_state
	LifeState map[string]interface{} `json:"life_state,omitempty"`
	// Object with information on the highest damage instance the player inflicted
	MaxHeroHit map[string]interface{} `json:"max_hero_hit,omitempty"`
	// Object with information on the number of the number of multikills the player had
	MultiKills map[string]interface{} `json:"multi_kills,omitempty"`
	// Object with information on where the player placed observer wards. The location takes the form (outer number, inner number) and are from ~64-192.
	Obs map[string]interface{} `json:"obs,omitempty"`
	// obs_left_log
	ObsLeftLog []map[string]interface{} `json:"obs_left_log,omitempty"`
	// Object containing information on when and where the player placed observer wards
	ObsLog []map[string]interface{} `json:"obs_log,omitempty"`
	// Total number of observer wards placed
	ObsPlaced *int32 `json:"obs_placed,omitempty"`
	// party_id
	PartyId *int32 `json:"party_id,omitempty"`
	// Array describing permanent buffs the player had at the end of the game. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/permanent_buffs.json
	PermanentBuffs []map[string]interface{} `json:"permanent_buffs,omitempty"`
	// Total number of pings
	Pings *int32 `json:"pings,omitempty"`
	// Object containing information on the items the player purchased
	Purchase map[string]interface{} `json:"purchase,omitempty"`
	// Object containing information on when items were purchased
	PurchaseLog []MatchResponsePlayersInnerPurchaseLogInner `json:"purchase_log,omitempty"`
	// Number of runes picked up
	RunePickups *int32 `json:"rune_pickups,omitempty"`
	// Object with information about which runes the player picked up
	Runes *map[string]int32 `json:"runes,omitempty"`
	// Array with information on when runes were picked up
	RunesLog []MatchResponsePlayersInnerRunesLogInner `json:"runes_log,omitempty"`
	// Object with information on where sentries were placed. The location takes the form (outer number, inner number) and are from ~64-192.
	Sen map[string]interface{} `json:"sen,omitempty"`
	// Array containing information on when and where the player placed sentries
	SenLeftLog []map[string]interface{} `json:"sen_left_log,omitempty"`
	// Array with information on when and where sentries were placed by the player
	SenLog []map[string]interface{} `json:"sen_log,omitempty"`
	// How many sentries were placed by the player
	SenPlaced *int32 `json:"sen_placed,omitempty"`
	// Total stun duration of all stuns by the player
	Stuns *float32 `json:"stuns,omitempty"`
	// Time in seconds corresponding to the time of entries of other arrays in the match.
	Times []int32 `json:"times,omitempty"`
	// Total tower damage done by the player
	TowerDamage *int32 `json:"tower_damage,omitempty"`
	// Experience Per Minute obtained by the player
	XpPerMin *int32 `json:"xp_per_min,omitempty"`
	// Object containing information on the sources of this player's experience
	XpReasons map[string]interface{} `json:"xp_reasons,omitempty"`
	// Experience at each minute of the game
	XpT []int32 `json:"xp_t,omitempty"`
	// Player's Steam name
	Personaname NullableString `json:"personaname,omitempty"`
	// name
	Name NullableString `json:"name,omitempty"`
	// Time of player's last login
	LastLogin NullableTime `json:"last_login,omitempty"`
	// Boolean indicating whether Radiant won the match
	RadiantWin NullableBool `json:"radiant_win,omitempty"`
	// The Unix timestamp at which the game started
	StartTime *int32 `json:"start_time,omitempty"`
	// Duration of the game in seconds
	Duration *int32 `json:"duration,omitempty"`
	// cluster
	Cluster *int32 `json:"cluster,omitempty"`
	// Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json
	LobbyType *int32 `json:"lobby_type,omitempty"`
	// Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json
	GameMode *int32 `json:"game_mode,omitempty"`
	// Patch ID, from dotaconstants
	Patch *int32 `json:"patch,omitempty"`
	// Integer corresponding to the region the game was played on
	Region *int32 `json:"region,omitempty"`
	// Boolean for whether or not the player is on Radiant
	IsRadiant *bool `json:"isRadiant,omitempty"`
	// Binary integer representing whether or not the player won
	Win *int32 `json:"win,omitempty"`
	// Binary integer representing whether or not the player lost
	Lose *int32 `json:"lose,omitempty"`
	// Total gold at the end of the game
	TotalGold *int32 `json:"total_gold,omitempty"`
	// Total experience at the end of the game
	TotalXp *int32 `json:"total_xp,omitempty"`
	// Number of kills per minute
	KillsPerMin *float32 `json:"kills_per_min,omitempty"`
	// kda
	Kda *float32 `json:"kda,omitempty"`
	// abandons
	Abandons *int32 `json:"abandons,omitempty"`
	// Total number of neutral creeps killed
	NeutralKills *int32 `json:"neutral_kills,omitempty"`
	// Total number of tower kills the player had
	TowerKills *int32 `json:"tower_kills,omitempty"`
	// Total number of courier kills the player had
	CourierKills *int32 `json:"courier_kills,omitempty"`
	// Total number of lane creeps killed by the player
	LaneKills *int32 `json:"lane_kills,omitempty"`
	// Total number of heroes killed by the player
	HeroKills *int32 `json:"hero_kills,omitempty"`
	// Total number of observer wards killed by the player
	ObserverKills *int32 `json:"observer_kills,omitempty"`
	// Total number of sentry wards killed by the player
	SentryKills *int32 `json:"sentry_kills,omitempty"`
	// Total number of roshan kills (last hit on roshan) the player had
	RoshanKills *int32 `json:"roshan_kills,omitempty"`
	// Total number of Necronomicon creeps killed by the player
	NecronomiconKills *int32 `json:"necronomicon_kills,omitempty"`
	// Total number of Ancient creeps killed by the player
	AncientKills *int32 `json:"ancient_kills,omitempty"`
	// Total number of buyback the player used
	BuybackCount *int32 `json:"buyback_count,omitempty"`
	// Number of observer wards used
	ObserverUses *int32 `json:"observer_uses,omitempty"`
	// Number of sentry wards used
	SentryUses *int32 `json:"sentry_uses,omitempty"`
	// lane_efficiency
	LaneEfficiency *float32 `json:"lane_efficiency,omitempty"`
	// lane_efficiency_pct
	LaneEfficiencyPct *float32 `json:"lane_efficiency_pct,omitempty"`
	// Integer referring to which lane the hero laned in
	Lane NullableInt32 `json:"lane,omitempty"`
	// lane_role
	LaneRole NullableInt32 `json:"lane_role,omitempty"`
	// Boolean referring to whether or not the player roamed
	IsRoaming NullableBool `json:"is_roaming,omitempty"`
	// Object with information on when the player last purchased an item
	PurchaseTime map[string]interface{} `json:"purchase_time,omitempty"`
	// Object with information on when the player first puchased an item
	FirstPurchaseTime map[string]interface{} `json:"first_purchase_time,omitempty"`
	// Object with information on whether or not the item won
	ItemWin map[string]interface{} `json:"item_win,omitempty"`
	// Object containing binary integers the tell whether the item was purchased by the player (note: this is always 1)
	ItemUsage map[string]interface{} `json:"item_usage,omitempty"`
	// Total number of TP scrolls purchased by the player
	PurchaseTpscroll *int32 `json:"purchase_tpscroll,omitempty"`
	// Actions per minute
	ActionsPerMin *int32 `json:"actions_per_min,omitempty"`
	// life_state_dead
	LifeStateDead *int32 `json:"life_state_dead,omitempty"`
	// The rank tier of the player. Tens place indicates rank, ones place indicates stars.
	RankTier *int32 `json:"rank_tier,omitempty"`
	// cosmetics
	Cosmetics []MatchResponsePlayersInnerCosmeticsInner `json:"cosmetics,omitempty"`
	// Object containing information on certain benchmarks like GPM, XPM, KDA, tower damage, etc
	Benchmarks map[string]interface{} `json:"benchmarks,omitempty"`
}

// NewMatchResponsePlayersInner instantiates a new MatchResponsePlayersInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchResponsePlayersInner() *MatchResponsePlayersInner {
	this := MatchResponsePlayersInner{}
	return &this
}

// NewMatchResponsePlayersInnerWithDefaults instantiates a new MatchResponsePlayersInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchResponsePlayersInnerWithDefaults() *MatchResponsePlayersInner {
	this := MatchResponsePlayersInner{}
	return &this
}

// GetMatchId returns the MatchId field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetMatchId() int32 {
	if o == nil || IsNil(o.MatchId) {
		var ret int32
		return ret
	}
	return *o.MatchId
}

// GetMatchIdOk returns a tuple with the MatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetMatchIdOk() (*int32, bool) {
	if o == nil || IsNil(o.MatchId) {
		return nil, false
	}
	return o.MatchId, true
}

// HasMatchId returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasMatchId() bool {
	if o != nil && !IsNil(o.MatchId) {
		return true
	}

	return false
}

// SetMatchId gets a reference to the given int32 and assigns it to the MatchId field.
func (o *MatchResponsePlayersInner) SetMatchId(v int32) {
	o.MatchId = &v
}

// GetPlayerSlot returns the PlayerSlot field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchResponsePlayersInner) GetPlayerSlot() int32 {
	if o == nil || IsNil(o.PlayerSlot.Get()) {
		var ret int32
		return ret
	}
	return *o.PlayerSlot.Get()
}

// GetPlayerSlotOk returns a tuple with the PlayerSlot field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchResponsePlayersInner) GetPlayerSlotOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlayerSlot.Get(), o.PlayerSlot.IsSet()
}

// HasPlayerSlot returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasPlayerSlot() bool {
	if o != nil && o.PlayerSlot.IsSet() {
		return true
	}

	return false
}

// SetPlayerSlot gets a reference to the given NullableInt32 and assigns it to the PlayerSlot field.
func (o *MatchResponsePlayersInner) SetPlayerSlot(v int32) {
	o.PlayerSlot.Set(&v)
}
// SetPlayerSlotNil sets the value for PlayerSlot to be an explicit nil
func (o *MatchResponsePlayersInner) SetPlayerSlotNil() {
	o.PlayerSlot.Set(nil)
}

// UnsetPlayerSlot ensures that no value is present for PlayerSlot, not even an explicit nil
func (o *MatchResponsePlayersInner) UnsetPlayerSlot() {
	o.PlayerSlot.Unset()
}

// GetAbilityUpgradesArr returns the AbilityUpgradesArr field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetAbilityUpgradesArr() []int32 {
	if o == nil || IsNil(o.AbilityUpgradesArr) {
		var ret []int32
		return ret
	}
	return o.AbilityUpgradesArr
}

// GetAbilityUpgradesArrOk returns a tuple with the AbilityUpgradesArr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetAbilityUpgradesArrOk() ([]int32, bool) {
	if o == nil || IsNil(o.AbilityUpgradesArr) {
		return nil, false
	}
	return o.AbilityUpgradesArr, true
}

// HasAbilityUpgradesArr returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasAbilityUpgradesArr() bool {
	if o != nil && !IsNil(o.AbilityUpgradesArr) {
		return true
	}

	return false
}

// SetAbilityUpgradesArr gets a reference to the given []int32 and assigns it to the AbilityUpgradesArr field.
func (o *MatchResponsePlayersInner) SetAbilityUpgradesArr(v []int32) {
	o.AbilityUpgradesArr = v
}

// GetAbilityUses returns the AbilityUses field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetAbilityUses() map[string]interface{} {
	if o == nil || IsNil(o.AbilityUses) {
		var ret map[string]interface{}
		return ret
	}
	return o.AbilityUses
}

// GetAbilityUsesOk returns a tuple with the AbilityUses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetAbilityUsesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AbilityUses) {
		return map[string]interface{}{}, false
	}
	return o.AbilityUses, true
}

// HasAbilityUses returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasAbilityUses() bool {
	if o != nil && !IsNil(o.AbilityUses) {
		return true
	}

	return false
}

// SetAbilityUses gets a reference to the given map[string]interface{} and assigns it to the AbilityUses field.
func (o *MatchResponsePlayersInner) SetAbilityUses(v map[string]interface{}) {
	o.AbilityUses = v
}

// GetAbilityTargets returns the AbilityTargets field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetAbilityTargets() map[string]interface{} {
	if o == nil || IsNil(o.AbilityTargets) {
		var ret map[string]interface{}
		return ret
	}
	return o.AbilityTargets
}

// GetAbilityTargetsOk returns a tuple with the AbilityTargets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetAbilityTargetsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AbilityTargets) {
		return map[string]interface{}{}, false
	}
	return o.AbilityTargets, true
}

// HasAbilityTargets returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasAbilityTargets() bool {
	if o != nil && !IsNil(o.AbilityTargets) {
		return true
	}

	return false
}

// SetAbilityTargets gets a reference to the given map[string]interface{} and assigns it to the AbilityTargets field.
func (o *MatchResponsePlayersInner) SetAbilityTargets(v map[string]interface{}) {
	o.AbilityTargets = v
}

// GetDamageTargets returns the DamageTargets field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetDamageTargets() map[string]interface{} {
	if o == nil || IsNil(o.DamageTargets) {
		var ret map[string]interface{}
		return ret
	}
	return o.DamageTargets
}

// GetDamageTargetsOk returns a tuple with the DamageTargets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetDamageTargetsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DamageTargets) {
		return map[string]interface{}{}, false
	}
	return o.DamageTargets, true
}

// HasDamageTargets returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasDamageTargets() bool {
	if o != nil && !IsNil(o.DamageTargets) {
		return true
	}

	return false
}

// SetDamageTargets gets a reference to the given map[string]interface{} and assigns it to the DamageTargets field.
func (o *MatchResponsePlayersInner) SetDamageTargets(v map[string]interface{}) {
	o.DamageTargets = v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetAccountId() int32 {
	if o == nil || IsNil(o.AccountId) {
		var ret int32
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetAccountIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given int32 and assigns it to the AccountId field.
func (o *MatchResponsePlayersInner) SetAccountId(v int32) {
	o.AccountId = &v
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetActions() map[string]interface{} {
	if o == nil || IsNil(o.Actions) {
		var ret map[string]interface{}
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetActionsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Actions) {
		return map[string]interface{}{}, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasActions() bool {
	if o != nil && !IsNil(o.Actions) {
		return true
	}

	return false
}

// SetActions gets a reference to the given map[string]interface{} and assigns it to the Actions field.
func (o *MatchResponsePlayersInner) SetActions(v map[string]interface{}) {
	o.Actions = v
}

// GetAdditionalUnits returns the AdditionalUnits field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchResponsePlayersInner) GetAdditionalUnits() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.AdditionalUnits
}

// GetAdditionalUnitsOk returns a tuple with the AdditionalUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchResponsePlayersInner) GetAdditionalUnitsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.AdditionalUnits) {
		return nil, false
	}
	return o.AdditionalUnits, true
}

// HasAdditionalUnits returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasAdditionalUnits() bool {
	if o != nil && IsNil(o.AdditionalUnits) {
		return true
	}

	return false
}

// SetAdditionalUnits gets a reference to the given []map[string]interface{} and assigns it to the AdditionalUnits field.
func (o *MatchResponsePlayersInner) SetAdditionalUnits(v []map[string]interface{}) {
	o.AdditionalUnits = v
}

// GetAssists returns the Assists field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetAssists() int32 {
	if o == nil || IsNil(o.Assists) {
		var ret int32
		return ret
	}
	return *o.Assists
}

// GetAssistsOk returns a tuple with the Assists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetAssistsOk() (*int32, bool) {
	if o == nil || IsNil(o.Assists) {
		return nil, false
	}
	return o.Assists, true
}

// HasAssists returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasAssists() bool {
	if o != nil && !IsNil(o.Assists) {
		return true
	}

	return false
}

// SetAssists gets a reference to the given int32 and assigns it to the Assists field.
func (o *MatchResponsePlayersInner) SetAssists(v int32) {
	o.Assists = &v
}

// GetBackpack0 returns the Backpack0 field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetBackpack0() int32 {
	if o == nil || IsNil(o.Backpack0) {
		var ret int32
		return ret
	}
	return *o.Backpack0
}

// GetBackpack0Ok returns a tuple with the Backpack0 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetBackpack0Ok() (*int32, bool) {
	if o == nil || IsNil(o.Backpack0) {
		return nil, false
	}
	return o.Backpack0, true
}

// HasBackpack0 returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasBackpack0() bool {
	if o != nil && !IsNil(o.Backpack0) {
		return true
	}

	return false
}

// SetBackpack0 gets a reference to the given int32 and assigns it to the Backpack0 field.
func (o *MatchResponsePlayersInner) SetBackpack0(v int32) {
	o.Backpack0 = &v
}

// GetBackpack1 returns the Backpack1 field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetBackpack1() int32 {
	if o == nil || IsNil(o.Backpack1) {
		var ret int32
		return ret
	}
	return *o.Backpack1
}

// GetBackpack1Ok returns a tuple with the Backpack1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetBackpack1Ok() (*int32, bool) {
	if o == nil || IsNil(o.Backpack1) {
		return nil, false
	}
	return o.Backpack1, true
}

// HasBackpack1 returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasBackpack1() bool {
	if o != nil && !IsNil(o.Backpack1) {
		return true
	}

	return false
}

// SetBackpack1 gets a reference to the given int32 and assigns it to the Backpack1 field.
func (o *MatchResponsePlayersInner) SetBackpack1(v int32) {
	o.Backpack1 = &v
}

// GetBackpack2 returns the Backpack2 field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetBackpack2() int32 {
	if o == nil || IsNil(o.Backpack2) {
		var ret int32
		return ret
	}
	return *o.Backpack2
}

// GetBackpack2Ok returns a tuple with the Backpack2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetBackpack2Ok() (*int32, bool) {
	if o == nil || IsNil(o.Backpack2) {
		return nil, false
	}
	return o.Backpack2, true
}

// HasBackpack2 returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasBackpack2() bool {
	if o != nil && !IsNil(o.Backpack2) {
		return true
	}

	return false
}

// SetBackpack2 gets a reference to the given int32 and assigns it to the Backpack2 field.
func (o *MatchResponsePlayersInner) SetBackpack2(v int32) {
	o.Backpack2 = &v
}

// GetBuybackLog returns the BuybackLog field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetBuybackLog() []MatchResponsePlayersInnerBuybackLogInner {
	if o == nil || IsNil(o.BuybackLog) {
		var ret []MatchResponsePlayersInnerBuybackLogInner
		return ret
	}
	return o.BuybackLog
}

// GetBuybackLogOk returns a tuple with the BuybackLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetBuybackLogOk() ([]MatchResponsePlayersInnerBuybackLogInner, bool) {
	if o == nil || IsNil(o.BuybackLog) {
		return nil, false
	}
	return o.BuybackLog, true
}

// HasBuybackLog returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasBuybackLog() bool {
	if o != nil && !IsNil(o.BuybackLog) {
		return true
	}

	return false
}

// SetBuybackLog gets a reference to the given []MatchResponsePlayersInnerBuybackLogInner and assigns it to the BuybackLog field.
func (o *MatchResponsePlayersInner) SetBuybackLog(v []MatchResponsePlayersInnerBuybackLogInner) {
	o.BuybackLog = v
}

// GetCampsStacked returns the CampsStacked field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetCampsStacked() int32 {
	if o == nil || IsNil(o.CampsStacked) {
		var ret int32
		return ret
	}
	return *o.CampsStacked
}

// GetCampsStackedOk returns a tuple with the CampsStacked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetCampsStackedOk() (*int32, bool) {
	if o == nil || IsNil(o.CampsStacked) {
		return nil, false
	}
	return o.CampsStacked, true
}

// HasCampsStacked returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasCampsStacked() bool {
	if o != nil && !IsNil(o.CampsStacked) {
		return true
	}

	return false
}

// SetCampsStacked gets a reference to the given int32 and assigns it to the CampsStacked field.
func (o *MatchResponsePlayersInner) SetCampsStacked(v int32) {
	o.CampsStacked = &v
}

// GetConnectionLog returns the ConnectionLog field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetConnectionLog() []MatchResponsePlayersInnerConnectionLogInner {
	if o == nil || IsNil(o.ConnectionLog) {
		var ret []MatchResponsePlayersInnerConnectionLogInner
		return ret
	}
	return o.ConnectionLog
}

// GetConnectionLogOk returns a tuple with the ConnectionLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetConnectionLogOk() ([]MatchResponsePlayersInnerConnectionLogInner, bool) {
	if o == nil || IsNil(o.ConnectionLog) {
		return nil, false
	}
	return o.ConnectionLog, true
}

// HasConnectionLog returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasConnectionLog() bool {
	if o != nil && !IsNil(o.ConnectionLog) {
		return true
	}

	return false
}

// SetConnectionLog gets a reference to the given []MatchResponsePlayersInnerConnectionLogInner and assigns it to the ConnectionLog field.
func (o *MatchResponsePlayersInner) SetConnectionLog(v []MatchResponsePlayersInnerConnectionLogInner) {
	o.ConnectionLog = v
}

// GetCreepsStacked returns the CreepsStacked field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetCreepsStacked() int32 {
	if o == nil || IsNil(o.CreepsStacked) {
		var ret int32
		return ret
	}
	return *o.CreepsStacked
}

// GetCreepsStackedOk returns a tuple with the CreepsStacked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetCreepsStackedOk() (*int32, bool) {
	if o == nil || IsNil(o.CreepsStacked) {
		return nil, false
	}
	return o.CreepsStacked, true
}

// HasCreepsStacked returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasCreepsStacked() bool {
	if o != nil && !IsNil(o.CreepsStacked) {
		return true
	}

	return false
}

// SetCreepsStacked gets a reference to the given int32 and assigns it to the CreepsStacked field.
func (o *MatchResponsePlayersInner) SetCreepsStacked(v int32) {
	o.CreepsStacked = &v
}

// GetDamage returns the Damage field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetDamage() map[string]interface{} {
	if o == nil || IsNil(o.Damage) {
		var ret map[string]interface{}
		return ret
	}
	return o.Damage
}

// GetDamageOk returns a tuple with the Damage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetDamageOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Damage) {
		return map[string]interface{}{}, false
	}
	return o.Damage, true
}

// HasDamage returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasDamage() bool {
	if o != nil && !IsNil(o.Damage) {
		return true
	}

	return false
}

// SetDamage gets a reference to the given map[string]interface{} and assigns it to the Damage field.
func (o *MatchResponsePlayersInner) SetDamage(v map[string]interface{}) {
	o.Damage = v
}

// GetDamageInflictor returns the DamageInflictor field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetDamageInflictor() map[string]interface{} {
	if o == nil || IsNil(o.DamageInflictor) {
		var ret map[string]interface{}
		return ret
	}
	return o.DamageInflictor
}

// GetDamageInflictorOk returns a tuple with the DamageInflictor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetDamageInflictorOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DamageInflictor) {
		return map[string]interface{}{}, false
	}
	return o.DamageInflictor, true
}

// HasDamageInflictor returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasDamageInflictor() bool {
	if o != nil && !IsNil(o.DamageInflictor) {
		return true
	}

	return false
}

// SetDamageInflictor gets a reference to the given map[string]interface{} and assigns it to the DamageInflictor field.
func (o *MatchResponsePlayersInner) SetDamageInflictor(v map[string]interface{}) {
	o.DamageInflictor = v
}

// GetDamageInflictorReceived returns the DamageInflictorReceived field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetDamageInflictorReceived() map[string]interface{} {
	if o == nil || IsNil(o.DamageInflictorReceived) {
		var ret map[string]interface{}
		return ret
	}
	return o.DamageInflictorReceived
}

// GetDamageInflictorReceivedOk returns a tuple with the DamageInflictorReceived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetDamageInflictorReceivedOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DamageInflictorReceived) {
		return map[string]interface{}{}, false
	}
	return o.DamageInflictorReceived, true
}

// HasDamageInflictorReceived returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasDamageInflictorReceived() bool {
	if o != nil && !IsNil(o.DamageInflictorReceived) {
		return true
	}

	return false
}

// SetDamageInflictorReceived gets a reference to the given map[string]interface{} and assigns it to the DamageInflictorReceived field.
func (o *MatchResponsePlayersInner) SetDamageInflictorReceived(v map[string]interface{}) {
	o.DamageInflictorReceived = v
}

// GetDamageTaken returns the DamageTaken field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetDamageTaken() map[string]interface{} {
	if o == nil || IsNil(o.DamageTaken) {
		var ret map[string]interface{}
		return ret
	}
	return o.DamageTaken
}

// GetDamageTakenOk returns a tuple with the DamageTaken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetDamageTakenOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DamageTaken) {
		return map[string]interface{}{}, false
	}
	return o.DamageTaken, true
}

// HasDamageTaken returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasDamageTaken() bool {
	if o != nil && !IsNil(o.DamageTaken) {
		return true
	}

	return false
}

// SetDamageTaken gets a reference to the given map[string]interface{} and assigns it to the DamageTaken field.
func (o *MatchResponsePlayersInner) SetDamageTaken(v map[string]interface{}) {
	o.DamageTaken = v
}

// GetDeaths returns the Deaths field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetDeaths() int32 {
	if o == nil || IsNil(o.Deaths) {
		var ret int32
		return ret
	}
	return *o.Deaths
}

// GetDeathsOk returns a tuple with the Deaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetDeathsOk() (*int32, bool) {
	if o == nil || IsNil(o.Deaths) {
		return nil, false
	}
	return o.Deaths, true
}

// HasDeaths returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasDeaths() bool {
	if o != nil && !IsNil(o.Deaths) {
		return true
	}

	return false
}

// SetDeaths gets a reference to the given int32 and assigns it to the Deaths field.
func (o *MatchResponsePlayersInner) SetDeaths(v int32) {
	o.Deaths = &v
}

// GetDenies returns the Denies field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetDenies() int32 {
	if o == nil || IsNil(o.Denies) {
		var ret int32
		return ret
	}
	return *o.Denies
}

// GetDeniesOk returns a tuple with the Denies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetDeniesOk() (*int32, bool) {
	if o == nil || IsNil(o.Denies) {
		return nil, false
	}
	return o.Denies, true
}

// HasDenies returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasDenies() bool {
	if o != nil && !IsNil(o.Denies) {
		return true
	}

	return false
}

// SetDenies gets a reference to the given int32 and assigns it to the Denies field.
func (o *MatchResponsePlayersInner) SetDenies(v int32) {
	o.Denies = &v
}

// GetDnT returns the DnT field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetDnT() []int32 {
	if o == nil || IsNil(o.DnT) {
		var ret []int32
		return ret
	}
	return o.DnT
}

// GetDnTOk returns a tuple with the DnT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetDnTOk() ([]int32, bool) {
	if o == nil || IsNil(o.DnT) {
		return nil, false
	}
	return o.DnT, true
}

// HasDnT returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasDnT() bool {
	if o != nil && !IsNil(o.DnT) {
		return true
	}

	return false
}

// SetDnT gets a reference to the given []int32 and assigns it to the DnT field.
func (o *MatchResponsePlayersInner) SetDnT(v []int32) {
	o.DnT = v
}

// GetGold returns the Gold field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetGold() int32 {
	if o == nil || IsNil(o.Gold) {
		var ret int32
		return ret
	}
	return *o.Gold
}

// GetGoldOk returns a tuple with the Gold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetGoldOk() (*int32, bool) {
	if o == nil || IsNil(o.Gold) {
		return nil, false
	}
	return o.Gold, true
}

// HasGold returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasGold() bool {
	if o != nil && !IsNil(o.Gold) {
		return true
	}

	return false
}

// SetGold gets a reference to the given int32 and assigns it to the Gold field.
func (o *MatchResponsePlayersInner) SetGold(v int32) {
	o.Gold = &v
}

// GetGoldPerMin returns the GoldPerMin field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetGoldPerMin() int32 {
	if o == nil || IsNil(o.GoldPerMin) {
		var ret int32
		return ret
	}
	return *o.GoldPerMin
}

// GetGoldPerMinOk returns a tuple with the GoldPerMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetGoldPerMinOk() (*int32, bool) {
	if o == nil || IsNil(o.GoldPerMin) {
		return nil, false
	}
	return o.GoldPerMin, true
}

// HasGoldPerMin returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasGoldPerMin() bool {
	if o != nil && !IsNil(o.GoldPerMin) {
		return true
	}

	return false
}

// SetGoldPerMin gets a reference to the given int32 and assigns it to the GoldPerMin field.
func (o *MatchResponsePlayersInner) SetGoldPerMin(v int32) {
	o.GoldPerMin = &v
}

// GetGoldReasons returns the GoldReasons field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetGoldReasons() map[string]interface{} {
	if o == nil || IsNil(o.GoldReasons) {
		var ret map[string]interface{}
		return ret
	}
	return o.GoldReasons
}

// GetGoldReasonsOk returns a tuple with the GoldReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetGoldReasonsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.GoldReasons) {
		return map[string]interface{}{}, false
	}
	return o.GoldReasons, true
}

// HasGoldReasons returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasGoldReasons() bool {
	if o != nil && !IsNil(o.GoldReasons) {
		return true
	}

	return false
}

// SetGoldReasons gets a reference to the given map[string]interface{} and assigns it to the GoldReasons field.
func (o *MatchResponsePlayersInner) SetGoldReasons(v map[string]interface{}) {
	o.GoldReasons = v
}

// GetGoldSpent returns the GoldSpent field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetGoldSpent() int32 {
	if o == nil || IsNil(o.GoldSpent) {
		var ret int32
		return ret
	}
	return *o.GoldSpent
}

// GetGoldSpentOk returns a tuple with the GoldSpent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetGoldSpentOk() (*int32, bool) {
	if o == nil || IsNil(o.GoldSpent) {
		return nil, false
	}
	return o.GoldSpent, true
}

// HasGoldSpent returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasGoldSpent() bool {
	if o != nil && !IsNil(o.GoldSpent) {
		return true
	}

	return false
}

// SetGoldSpent gets a reference to the given int32 and assigns it to the GoldSpent field.
func (o *MatchResponsePlayersInner) SetGoldSpent(v int32) {
	o.GoldSpent = &v
}

// GetGoldT returns the GoldT field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetGoldT() []int32 {
	if o == nil || IsNil(o.GoldT) {
		var ret []int32
		return ret
	}
	return o.GoldT
}

// GetGoldTOk returns a tuple with the GoldT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetGoldTOk() ([]int32, bool) {
	if o == nil || IsNil(o.GoldT) {
		return nil, false
	}
	return o.GoldT, true
}

// HasGoldT returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasGoldT() bool {
	if o != nil && !IsNil(o.GoldT) {
		return true
	}

	return false
}

// SetGoldT gets a reference to the given []int32 and assigns it to the GoldT field.
func (o *MatchResponsePlayersInner) SetGoldT(v []int32) {
	o.GoldT = v
}

// GetHeroDamage returns the HeroDamage field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetHeroDamage() int32 {
	if o == nil || IsNil(o.HeroDamage) {
		var ret int32
		return ret
	}
	return *o.HeroDamage
}

// GetHeroDamageOk returns a tuple with the HeroDamage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetHeroDamageOk() (*int32, bool) {
	if o == nil || IsNil(o.HeroDamage) {
		return nil, false
	}
	return o.HeroDamage, true
}

// HasHeroDamage returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasHeroDamage() bool {
	if o != nil && !IsNil(o.HeroDamage) {
		return true
	}

	return false
}

// SetHeroDamage gets a reference to the given int32 and assigns it to the HeroDamage field.
func (o *MatchResponsePlayersInner) SetHeroDamage(v int32) {
	o.HeroDamage = &v
}

// GetHeroHealing returns the HeroHealing field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetHeroHealing() int32 {
	if o == nil || IsNil(o.HeroHealing) {
		var ret int32
		return ret
	}
	return *o.HeroHealing
}

// GetHeroHealingOk returns a tuple with the HeroHealing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetHeroHealingOk() (*int32, bool) {
	if o == nil || IsNil(o.HeroHealing) {
		return nil, false
	}
	return o.HeroHealing, true
}

// HasHeroHealing returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasHeroHealing() bool {
	if o != nil && !IsNil(o.HeroHealing) {
		return true
	}

	return false
}

// SetHeroHealing gets a reference to the given int32 and assigns it to the HeroHealing field.
func (o *MatchResponsePlayersInner) SetHeroHealing(v int32) {
	o.HeroHealing = &v
}

// GetHeroHits returns the HeroHits field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetHeroHits() map[string]interface{} {
	if o == nil || IsNil(o.HeroHits) {
		var ret map[string]interface{}
		return ret
	}
	return o.HeroHits
}

// GetHeroHitsOk returns a tuple with the HeroHits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetHeroHitsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.HeroHits) {
		return map[string]interface{}{}, false
	}
	return o.HeroHits, true
}

// HasHeroHits returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasHeroHits() bool {
	if o != nil && !IsNil(o.HeroHits) {
		return true
	}

	return false
}

// SetHeroHits gets a reference to the given map[string]interface{} and assigns it to the HeroHits field.
func (o *MatchResponsePlayersInner) SetHeroHits(v map[string]interface{}) {
	o.HeroHits = v
}

// GetHeroId returns the HeroId field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetHeroId() int32 {
	if o == nil || IsNil(o.HeroId) {
		var ret int32
		return ret
	}
	return *o.HeroId
}

// GetHeroIdOk returns a tuple with the HeroId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetHeroIdOk() (*int32, bool) {
	if o == nil || IsNil(o.HeroId) {
		return nil, false
	}
	return o.HeroId, true
}

// HasHeroId returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasHeroId() bool {
	if o != nil && !IsNil(o.HeroId) {
		return true
	}

	return false
}

// SetHeroId gets a reference to the given int32 and assigns it to the HeroId field.
func (o *MatchResponsePlayersInner) SetHeroId(v int32) {
	o.HeroId = &v
}

// GetItem0 returns the Item0 field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetItem0() int32 {
	if o == nil || IsNil(o.Item0) {
		var ret int32
		return ret
	}
	return *o.Item0
}

// GetItem0Ok returns a tuple with the Item0 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetItem0Ok() (*int32, bool) {
	if o == nil || IsNil(o.Item0) {
		return nil, false
	}
	return o.Item0, true
}

// HasItem0 returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasItem0() bool {
	if o != nil && !IsNil(o.Item0) {
		return true
	}

	return false
}

// SetItem0 gets a reference to the given int32 and assigns it to the Item0 field.
func (o *MatchResponsePlayersInner) SetItem0(v int32) {
	o.Item0 = &v
}

// GetItem1 returns the Item1 field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetItem1() int32 {
	if o == nil || IsNil(o.Item1) {
		var ret int32
		return ret
	}
	return *o.Item1
}

// GetItem1Ok returns a tuple with the Item1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetItem1Ok() (*int32, bool) {
	if o == nil || IsNil(o.Item1) {
		return nil, false
	}
	return o.Item1, true
}

// HasItem1 returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasItem1() bool {
	if o != nil && !IsNil(o.Item1) {
		return true
	}

	return false
}

// SetItem1 gets a reference to the given int32 and assigns it to the Item1 field.
func (o *MatchResponsePlayersInner) SetItem1(v int32) {
	o.Item1 = &v
}

// GetItem2 returns the Item2 field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetItem2() int32 {
	if o == nil || IsNil(o.Item2) {
		var ret int32
		return ret
	}
	return *o.Item2
}

// GetItem2Ok returns a tuple with the Item2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetItem2Ok() (*int32, bool) {
	if o == nil || IsNil(o.Item2) {
		return nil, false
	}
	return o.Item2, true
}

// HasItem2 returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasItem2() bool {
	if o != nil && !IsNil(o.Item2) {
		return true
	}

	return false
}

// SetItem2 gets a reference to the given int32 and assigns it to the Item2 field.
func (o *MatchResponsePlayersInner) SetItem2(v int32) {
	o.Item2 = &v
}

// GetItem3 returns the Item3 field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetItem3() int32 {
	if o == nil || IsNil(o.Item3) {
		var ret int32
		return ret
	}
	return *o.Item3
}

// GetItem3Ok returns a tuple with the Item3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetItem3Ok() (*int32, bool) {
	if o == nil || IsNil(o.Item3) {
		return nil, false
	}
	return o.Item3, true
}

// HasItem3 returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasItem3() bool {
	if o != nil && !IsNil(o.Item3) {
		return true
	}

	return false
}

// SetItem3 gets a reference to the given int32 and assigns it to the Item3 field.
func (o *MatchResponsePlayersInner) SetItem3(v int32) {
	o.Item3 = &v
}

// GetItem4 returns the Item4 field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetItem4() int32 {
	if o == nil || IsNil(o.Item4) {
		var ret int32
		return ret
	}
	return *o.Item4
}

// GetItem4Ok returns a tuple with the Item4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetItem4Ok() (*int32, bool) {
	if o == nil || IsNil(o.Item4) {
		return nil, false
	}
	return o.Item4, true
}

// HasItem4 returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasItem4() bool {
	if o != nil && !IsNil(o.Item4) {
		return true
	}

	return false
}

// SetItem4 gets a reference to the given int32 and assigns it to the Item4 field.
func (o *MatchResponsePlayersInner) SetItem4(v int32) {
	o.Item4 = &v
}

// GetItem5 returns the Item5 field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetItem5() int32 {
	if o == nil || IsNil(o.Item5) {
		var ret int32
		return ret
	}
	return *o.Item5
}

// GetItem5Ok returns a tuple with the Item5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetItem5Ok() (*int32, bool) {
	if o == nil || IsNil(o.Item5) {
		return nil, false
	}
	return o.Item5, true
}

// HasItem5 returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasItem5() bool {
	if o != nil && !IsNil(o.Item5) {
		return true
	}

	return false
}

// SetItem5 gets a reference to the given int32 and assigns it to the Item5 field.
func (o *MatchResponsePlayersInner) SetItem5(v int32) {
	o.Item5 = &v
}

// GetItemUses returns the ItemUses field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetItemUses() map[string]interface{} {
	if o == nil || IsNil(o.ItemUses) {
		var ret map[string]interface{}
		return ret
	}
	return o.ItemUses
}

// GetItemUsesOk returns a tuple with the ItemUses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetItemUsesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ItemUses) {
		return map[string]interface{}{}, false
	}
	return o.ItemUses, true
}

// HasItemUses returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasItemUses() bool {
	if o != nil && !IsNil(o.ItemUses) {
		return true
	}

	return false
}

// SetItemUses gets a reference to the given map[string]interface{} and assigns it to the ItemUses field.
func (o *MatchResponsePlayersInner) SetItemUses(v map[string]interface{}) {
	o.ItemUses = v
}

// GetKillStreaks returns the KillStreaks field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetKillStreaks() map[string]interface{} {
	if o == nil || IsNil(o.KillStreaks) {
		var ret map[string]interface{}
		return ret
	}
	return o.KillStreaks
}

// GetKillStreaksOk returns a tuple with the KillStreaks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetKillStreaksOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.KillStreaks) {
		return map[string]interface{}{}, false
	}
	return o.KillStreaks, true
}

// HasKillStreaks returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasKillStreaks() bool {
	if o != nil && !IsNil(o.KillStreaks) {
		return true
	}

	return false
}

// SetKillStreaks gets a reference to the given map[string]interface{} and assigns it to the KillStreaks field.
func (o *MatchResponsePlayersInner) SetKillStreaks(v map[string]interface{}) {
	o.KillStreaks = v
}

// GetKilled returns the Killed field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetKilled() map[string]interface{} {
	if o == nil || IsNil(o.Killed) {
		var ret map[string]interface{}
		return ret
	}
	return o.Killed
}

// GetKilledOk returns a tuple with the Killed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetKilledOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Killed) {
		return map[string]interface{}{}, false
	}
	return o.Killed, true
}

// HasKilled returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasKilled() bool {
	if o != nil && !IsNil(o.Killed) {
		return true
	}

	return false
}

// SetKilled gets a reference to the given map[string]interface{} and assigns it to the Killed field.
func (o *MatchResponsePlayersInner) SetKilled(v map[string]interface{}) {
	o.Killed = v
}

// GetKilledBy returns the KilledBy field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetKilledBy() map[string]interface{} {
	if o == nil || IsNil(o.KilledBy) {
		var ret map[string]interface{}
		return ret
	}
	return o.KilledBy
}

// GetKilledByOk returns a tuple with the KilledBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetKilledByOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.KilledBy) {
		return map[string]interface{}{}, false
	}
	return o.KilledBy, true
}

// HasKilledBy returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasKilledBy() bool {
	if o != nil && !IsNil(o.KilledBy) {
		return true
	}

	return false
}

// SetKilledBy gets a reference to the given map[string]interface{} and assigns it to the KilledBy field.
func (o *MatchResponsePlayersInner) SetKilledBy(v map[string]interface{}) {
	o.KilledBy = v
}

// GetKills returns the Kills field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetKills() int32 {
	if o == nil || IsNil(o.Kills) {
		var ret int32
		return ret
	}
	return *o.Kills
}

// GetKillsOk returns a tuple with the Kills field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetKillsOk() (*int32, bool) {
	if o == nil || IsNil(o.Kills) {
		return nil, false
	}
	return o.Kills, true
}

// HasKills returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasKills() bool {
	if o != nil && !IsNil(o.Kills) {
		return true
	}

	return false
}

// SetKills gets a reference to the given int32 and assigns it to the Kills field.
func (o *MatchResponsePlayersInner) SetKills(v int32) {
	o.Kills = &v
}

// GetKillsLog returns the KillsLog field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetKillsLog() []MatchResponsePlayersInnerKillsLogInner {
	if o == nil || IsNil(o.KillsLog) {
		var ret []MatchResponsePlayersInnerKillsLogInner
		return ret
	}
	return o.KillsLog
}

// GetKillsLogOk returns a tuple with the KillsLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetKillsLogOk() ([]MatchResponsePlayersInnerKillsLogInner, bool) {
	if o == nil || IsNil(o.KillsLog) {
		return nil, false
	}
	return o.KillsLog, true
}

// HasKillsLog returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasKillsLog() bool {
	if o != nil && !IsNil(o.KillsLog) {
		return true
	}

	return false
}

// SetKillsLog gets a reference to the given []MatchResponsePlayersInnerKillsLogInner and assigns it to the KillsLog field.
func (o *MatchResponsePlayersInner) SetKillsLog(v []MatchResponsePlayersInnerKillsLogInner) {
	o.KillsLog = v
}

// GetLanePos returns the LanePos field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetLanePos() map[string]interface{} {
	if o == nil || IsNil(o.LanePos) {
		var ret map[string]interface{}
		return ret
	}
	return o.LanePos
}

// GetLanePosOk returns a tuple with the LanePos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetLanePosOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.LanePos) {
		return map[string]interface{}{}, false
	}
	return o.LanePos, true
}

// HasLanePos returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasLanePos() bool {
	if o != nil && !IsNil(o.LanePos) {
		return true
	}

	return false
}

// SetLanePos gets a reference to the given map[string]interface{} and assigns it to the LanePos field.
func (o *MatchResponsePlayersInner) SetLanePos(v map[string]interface{}) {
	o.LanePos = v
}

// GetLastHits returns the LastHits field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetLastHits() int32 {
	if o == nil || IsNil(o.LastHits) {
		var ret int32
		return ret
	}
	return *o.LastHits
}

// GetLastHitsOk returns a tuple with the LastHits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetLastHitsOk() (*int32, bool) {
	if o == nil || IsNil(o.LastHits) {
		return nil, false
	}
	return o.LastHits, true
}

// HasLastHits returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasLastHits() bool {
	if o != nil && !IsNil(o.LastHits) {
		return true
	}

	return false
}

// SetLastHits gets a reference to the given int32 and assigns it to the LastHits field.
func (o *MatchResponsePlayersInner) SetLastHits(v int32) {
	o.LastHits = &v
}

// GetLeaverStatus returns the LeaverStatus field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetLeaverStatus() int32 {
	if o == nil || IsNil(o.LeaverStatus) {
		var ret int32
		return ret
	}
	return *o.LeaverStatus
}

// GetLeaverStatusOk returns a tuple with the LeaverStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetLeaverStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.LeaverStatus) {
		return nil, false
	}
	return o.LeaverStatus, true
}

// HasLeaverStatus returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasLeaverStatus() bool {
	if o != nil && !IsNil(o.LeaverStatus) {
		return true
	}

	return false
}

// SetLeaverStatus gets a reference to the given int32 and assigns it to the LeaverStatus field.
func (o *MatchResponsePlayersInner) SetLeaverStatus(v int32) {
	o.LeaverStatus = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetLevel() int32 {
	if o == nil || IsNil(o.Level) {
		var ret int32
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetLevelOk() (*int32, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given int32 and assigns it to the Level field.
func (o *MatchResponsePlayersInner) SetLevel(v int32) {
	o.Level = &v
}

// GetLhT returns the LhT field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetLhT() []int32 {
	if o == nil || IsNil(o.LhT) {
		var ret []int32
		return ret
	}
	return o.LhT
}

// GetLhTOk returns a tuple with the LhT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetLhTOk() ([]int32, bool) {
	if o == nil || IsNil(o.LhT) {
		return nil, false
	}
	return o.LhT, true
}

// HasLhT returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasLhT() bool {
	if o != nil && !IsNil(o.LhT) {
		return true
	}

	return false
}

// SetLhT gets a reference to the given []int32 and assigns it to the LhT field.
func (o *MatchResponsePlayersInner) SetLhT(v []int32) {
	o.LhT = v
}

// GetLifeState returns the LifeState field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetLifeState() map[string]interface{} {
	if o == nil || IsNil(o.LifeState) {
		var ret map[string]interface{}
		return ret
	}
	return o.LifeState
}

// GetLifeStateOk returns a tuple with the LifeState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetLifeStateOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.LifeState) {
		return map[string]interface{}{}, false
	}
	return o.LifeState, true
}

// HasLifeState returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasLifeState() bool {
	if o != nil && !IsNil(o.LifeState) {
		return true
	}

	return false
}

// SetLifeState gets a reference to the given map[string]interface{} and assigns it to the LifeState field.
func (o *MatchResponsePlayersInner) SetLifeState(v map[string]interface{}) {
	o.LifeState = v
}

// GetMaxHeroHit returns the MaxHeroHit field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetMaxHeroHit() map[string]interface{} {
	if o == nil || IsNil(o.MaxHeroHit) {
		var ret map[string]interface{}
		return ret
	}
	return o.MaxHeroHit
}

// GetMaxHeroHitOk returns a tuple with the MaxHeroHit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetMaxHeroHitOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.MaxHeroHit) {
		return map[string]interface{}{}, false
	}
	return o.MaxHeroHit, true
}

// HasMaxHeroHit returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasMaxHeroHit() bool {
	if o != nil && !IsNil(o.MaxHeroHit) {
		return true
	}

	return false
}

// SetMaxHeroHit gets a reference to the given map[string]interface{} and assigns it to the MaxHeroHit field.
func (o *MatchResponsePlayersInner) SetMaxHeroHit(v map[string]interface{}) {
	o.MaxHeroHit = v
}

// GetMultiKills returns the MultiKills field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetMultiKills() map[string]interface{} {
	if o == nil || IsNil(o.MultiKills) {
		var ret map[string]interface{}
		return ret
	}
	return o.MultiKills
}

// GetMultiKillsOk returns a tuple with the MultiKills field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetMultiKillsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.MultiKills) {
		return map[string]interface{}{}, false
	}
	return o.MultiKills, true
}

// HasMultiKills returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasMultiKills() bool {
	if o != nil && !IsNil(o.MultiKills) {
		return true
	}

	return false
}

// SetMultiKills gets a reference to the given map[string]interface{} and assigns it to the MultiKills field.
func (o *MatchResponsePlayersInner) SetMultiKills(v map[string]interface{}) {
	o.MultiKills = v
}

// GetObs returns the Obs field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetObs() map[string]interface{} {
	if o == nil || IsNil(o.Obs) {
		var ret map[string]interface{}
		return ret
	}
	return o.Obs
}

// GetObsOk returns a tuple with the Obs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetObsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Obs) {
		return map[string]interface{}{}, false
	}
	return o.Obs, true
}

// HasObs returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasObs() bool {
	if o != nil && !IsNil(o.Obs) {
		return true
	}

	return false
}

// SetObs gets a reference to the given map[string]interface{} and assigns it to the Obs field.
func (o *MatchResponsePlayersInner) SetObs(v map[string]interface{}) {
	o.Obs = v
}

// GetObsLeftLog returns the ObsLeftLog field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetObsLeftLog() []map[string]interface{} {
	if o == nil || IsNil(o.ObsLeftLog) {
		var ret []map[string]interface{}
		return ret
	}
	return o.ObsLeftLog
}

// GetObsLeftLogOk returns a tuple with the ObsLeftLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetObsLeftLogOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.ObsLeftLog) {
		return nil, false
	}
	return o.ObsLeftLog, true
}

// HasObsLeftLog returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasObsLeftLog() bool {
	if o != nil && !IsNil(o.ObsLeftLog) {
		return true
	}

	return false
}

// SetObsLeftLog gets a reference to the given []map[string]interface{} and assigns it to the ObsLeftLog field.
func (o *MatchResponsePlayersInner) SetObsLeftLog(v []map[string]interface{}) {
	o.ObsLeftLog = v
}

// GetObsLog returns the ObsLog field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetObsLog() []map[string]interface{} {
	if o == nil || IsNil(o.ObsLog) {
		var ret []map[string]interface{}
		return ret
	}
	return o.ObsLog
}

// GetObsLogOk returns a tuple with the ObsLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetObsLogOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.ObsLog) {
		return nil, false
	}
	return o.ObsLog, true
}

// HasObsLog returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasObsLog() bool {
	if o != nil && !IsNil(o.ObsLog) {
		return true
	}

	return false
}

// SetObsLog gets a reference to the given []map[string]interface{} and assigns it to the ObsLog field.
func (o *MatchResponsePlayersInner) SetObsLog(v []map[string]interface{}) {
	o.ObsLog = v
}

// GetObsPlaced returns the ObsPlaced field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetObsPlaced() int32 {
	if o == nil || IsNil(o.ObsPlaced) {
		var ret int32
		return ret
	}
	return *o.ObsPlaced
}

// GetObsPlacedOk returns a tuple with the ObsPlaced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetObsPlacedOk() (*int32, bool) {
	if o == nil || IsNil(o.ObsPlaced) {
		return nil, false
	}
	return o.ObsPlaced, true
}

// HasObsPlaced returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasObsPlaced() bool {
	if o != nil && !IsNil(o.ObsPlaced) {
		return true
	}

	return false
}

// SetObsPlaced gets a reference to the given int32 and assigns it to the ObsPlaced field.
func (o *MatchResponsePlayersInner) SetObsPlaced(v int32) {
	o.ObsPlaced = &v
}

// GetPartyId returns the PartyId field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetPartyId() int32 {
	if o == nil || IsNil(o.PartyId) {
		var ret int32
		return ret
	}
	return *o.PartyId
}

// GetPartyIdOk returns a tuple with the PartyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetPartyIdOk() (*int32, bool) {
	if o == nil || IsNil(o.PartyId) {
		return nil, false
	}
	return o.PartyId, true
}

// HasPartyId returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasPartyId() bool {
	if o != nil && !IsNil(o.PartyId) {
		return true
	}

	return false
}

// SetPartyId gets a reference to the given int32 and assigns it to the PartyId field.
func (o *MatchResponsePlayersInner) SetPartyId(v int32) {
	o.PartyId = &v
}

// GetPermanentBuffs returns the PermanentBuffs field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetPermanentBuffs() []map[string]interface{} {
	if o == nil || IsNil(o.PermanentBuffs) {
		var ret []map[string]interface{}
		return ret
	}
	return o.PermanentBuffs
}

// GetPermanentBuffsOk returns a tuple with the PermanentBuffs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetPermanentBuffsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.PermanentBuffs) {
		return nil, false
	}
	return o.PermanentBuffs, true
}

// HasPermanentBuffs returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasPermanentBuffs() bool {
	if o != nil && !IsNil(o.PermanentBuffs) {
		return true
	}

	return false
}

// SetPermanentBuffs gets a reference to the given []map[string]interface{} and assigns it to the PermanentBuffs field.
func (o *MatchResponsePlayersInner) SetPermanentBuffs(v []map[string]interface{}) {
	o.PermanentBuffs = v
}

// GetPings returns the Pings field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetPings() int32 {
	if o == nil || IsNil(o.Pings) {
		var ret int32
		return ret
	}
	return *o.Pings
}

// GetPingsOk returns a tuple with the Pings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetPingsOk() (*int32, bool) {
	if o == nil || IsNil(o.Pings) {
		return nil, false
	}
	return o.Pings, true
}

// HasPings returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasPings() bool {
	if o != nil && !IsNil(o.Pings) {
		return true
	}

	return false
}

// SetPings gets a reference to the given int32 and assigns it to the Pings field.
func (o *MatchResponsePlayersInner) SetPings(v int32) {
	o.Pings = &v
}

// GetPurchase returns the Purchase field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetPurchase() map[string]interface{} {
	if o == nil || IsNil(o.Purchase) {
		var ret map[string]interface{}
		return ret
	}
	return o.Purchase
}

// GetPurchaseOk returns a tuple with the Purchase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetPurchaseOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Purchase) {
		return map[string]interface{}{}, false
	}
	return o.Purchase, true
}

// HasPurchase returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasPurchase() bool {
	if o != nil && !IsNil(o.Purchase) {
		return true
	}

	return false
}

// SetPurchase gets a reference to the given map[string]interface{} and assigns it to the Purchase field.
func (o *MatchResponsePlayersInner) SetPurchase(v map[string]interface{}) {
	o.Purchase = v
}

// GetPurchaseLog returns the PurchaseLog field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetPurchaseLog() []MatchResponsePlayersInnerPurchaseLogInner {
	if o == nil || IsNil(o.PurchaseLog) {
		var ret []MatchResponsePlayersInnerPurchaseLogInner
		return ret
	}
	return o.PurchaseLog
}

// GetPurchaseLogOk returns a tuple with the PurchaseLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetPurchaseLogOk() ([]MatchResponsePlayersInnerPurchaseLogInner, bool) {
	if o == nil || IsNil(o.PurchaseLog) {
		return nil, false
	}
	return o.PurchaseLog, true
}

// HasPurchaseLog returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasPurchaseLog() bool {
	if o != nil && !IsNil(o.PurchaseLog) {
		return true
	}

	return false
}

// SetPurchaseLog gets a reference to the given []MatchResponsePlayersInnerPurchaseLogInner and assigns it to the PurchaseLog field.
func (o *MatchResponsePlayersInner) SetPurchaseLog(v []MatchResponsePlayersInnerPurchaseLogInner) {
	o.PurchaseLog = v
}

// GetRunePickups returns the RunePickups field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetRunePickups() int32 {
	if o == nil || IsNil(o.RunePickups) {
		var ret int32
		return ret
	}
	return *o.RunePickups
}

// GetRunePickupsOk returns a tuple with the RunePickups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetRunePickupsOk() (*int32, bool) {
	if o == nil || IsNil(o.RunePickups) {
		return nil, false
	}
	return o.RunePickups, true
}

// HasRunePickups returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasRunePickups() bool {
	if o != nil && !IsNil(o.RunePickups) {
		return true
	}

	return false
}

// SetRunePickups gets a reference to the given int32 and assigns it to the RunePickups field.
func (o *MatchResponsePlayersInner) SetRunePickups(v int32) {
	o.RunePickups = &v
}

// GetRunes returns the Runes field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetRunes() map[string]int32 {
	if o == nil || IsNil(o.Runes) {
		var ret map[string]int32
		return ret
	}
	return *o.Runes
}

// GetRunesOk returns a tuple with the Runes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetRunesOk() (*map[string]int32, bool) {
	if o == nil || IsNil(o.Runes) {
		return nil, false
	}
	return o.Runes, true
}

// HasRunes returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasRunes() bool {
	if o != nil && !IsNil(o.Runes) {
		return true
	}

	return false
}

// SetRunes gets a reference to the given map[string]int32 and assigns it to the Runes field.
func (o *MatchResponsePlayersInner) SetRunes(v map[string]int32) {
	o.Runes = &v
}

// GetRunesLog returns the RunesLog field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetRunesLog() []MatchResponsePlayersInnerRunesLogInner {
	if o == nil || IsNil(o.RunesLog) {
		var ret []MatchResponsePlayersInnerRunesLogInner
		return ret
	}
	return o.RunesLog
}

// GetRunesLogOk returns a tuple with the RunesLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetRunesLogOk() ([]MatchResponsePlayersInnerRunesLogInner, bool) {
	if o == nil || IsNil(o.RunesLog) {
		return nil, false
	}
	return o.RunesLog, true
}

// HasRunesLog returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasRunesLog() bool {
	if o != nil && !IsNil(o.RunesLog) {
		return true
	}

	return false
}

// SetRunesLog gets a reference to the given []MatchResponsePlayersInnerRunesLogInner and assigns it to the RunesLog field.
func (o *MatchResponsePlayersInner) SetRunesLog(v []MatchResponsePlayersInnerRunesLogInner) {
	o.RunesLog = v
}

// GetSen returns the Sen field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetSen() map[string]interface{} {
	if o == nil || IsNil(o.Sen) {
		var ret map[string]interface{}
		return ret
	}
	return o.Sen
}

// GetSenOk returns a tuple with the Sen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetSenOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Sen) {
		return map[string]interface{}{}, false
	}
	return o.Sen, true
}

// HasSen returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasSen() bool {
	if o != nil && !IsNil(o.Sen) {
		return true
	}

	return false
}

// SetSen gets a reference to the given map[string]interface{} and assigns it to the Sen field.
func (o *MatchResponsePlayersInner) SetSen(v map[string]interface{}) {
	o.Sen = v
}

// GetSenLeftLog returns the SenLeftLog field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetSenLeftLog() []map[string]interface{} {
	if o == nil || IsNil(o.SenLeftLog) {
		var ret []map[string]interface{}
		return ret
	}
	return o.SenLeftLog
}

// GetSenLeftLogOk returns a tuple with the SenLeftLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetSenLeftLogOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.SenLeftLog) {
		return nil, false
	}
	return o.SenLeftLog, true
}

// HasSenLeftLog returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasSenLeftLog() bool {
	if o != nil && !IsNil(o.SenLeftLog) {
		return true
	}

	return false
}

// SetSenLeftLog gets a reference to the given []map[string]interface{} and assigns it to the SenLeftLog field.
func (o *MatchResponsePlayersInner) SetSenLeftLog(v []map[string]interface{}) {
	o.SenLeftLog = v
}

// GetSenLog returns the SenLog field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetSenLog() []map[string]interface{} {
	if o == nil || IsNil(o.SenLog) {
		var ret []map[string]interface{}
		return ret
	}
	return o.SenLog
}

// GetSenLogOk returns a tuple with the SenLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetSenLogOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.SenLog) {
		return nil, false
	}
	return o.SenLog, true
}

// HasSenLog returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasSenLog() bool {
	if o != nil && !IsNil(o.SenLog) {
		return true
	}

	return false
}

// SetSenLog gets a reference to the given []map[string]interface{} and assigns it to the SenLog field.
func (o *MatchResponsePlayersInner) SetSenLog(v []map[string]interface{}) {
	o.SenLog = v
}

// GetSenPlaced returns the SenPlaced field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetSenPlaced() int32 {
	if o == nil || IsNil(o.SenPlaced) {
		var ret int32
		return ret
	}
	return *o.SenPlaced
}

// GetSenPlacedOk returns a tuple with the SenPlaced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetSenPlacedOk() (*int32, bool) {
	if o == nil || IsNil(o.SenPlaced) {
		return nil, false
	}
	return o.SenPlaced, true
}

// HasSenPlaced returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasSenPlaced() bool {
	if o != nil && !IsNil(o.SenPlaced) {
		return true
	}

	return false
}

// SetSenPlaced gets a reference to the given int32 and assigns it to the SenPlaced field.
func (o *MatchResponsePlayersInner) SetSenPlaced(v int32) {
	o.SenPlaced = &v
}

// GetStuns returns the Stuns field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetStuns() float32 {
	if o == nil || IsNil(o.Stuns) {
		var ret float32
		return ret
	}
	return *o.Stuns
}

// GetStunsOk returns a tuple with the Stuns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetStunsOk() (*float32, bool) {
	if o == nil || IsNil(o.Stuns) {
		return nil, false
	}
	return o.Stuns, true
}

// HasStuns returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasStuns() bool {
	if o != nil && !IsNil(o.Stuns) {
		return true
	}

	return false
}

// SetStuns gets a reference to the given float32 and assigns it to the Stuns field.
func (o *MatchResponsePlayersInner) SetStuns(v float32) {
	o.Stuns = &v
}

// GetTimes returns the Times field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetTimes() []int32 {
	if o == nil || IsNil(o.Times) {
		var ret []int32
		return ret
	}
	return o.Times
}

// GetTimesOk returns a tuple with the Times field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetTimesOk() ([]int32, bool) {
	if o == nil || IsNil(o.Times) {
		return nil, false
	}
	return o.Times, true
}

// HasTimes returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasTimes() bool {
	if o != nil && !IsNil(o.Times) {
		return true
	}

	return false
}

// SetTimes gets a reference to the given []int32 and assigns it to the Times field.
func (o *MatchResponsePlayersInner) SetTimes(v []int32) {
	o.Times = v
}

// GetTowerDamage returns the TowerDamage field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetTowerDamage() int32 {
	if o == nil || IsNil(o.TowerDamage) {
		var ret int32
		return ret
	}
	return *o.TowerDamage
}

// GetTowerDamageOk returns a tuple with the TowerDamage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetTowerDamageOk() (*int32, bool) {
	if o == nil || IsNil(o.TowerDamage) {
		return nil, false
	}
	return o.TowerDamage, true
}

// HasTowerDamage returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasTowerDamage() bool {
	if o != nil && !IsNil(o.TowerDamage) {
		return true
	}

	return false
}

// SetTowerDamage gets a reference to the given int32 and assigns it to the TowerDamage field.
func (o *MatchResponsePlayersInner) SetTowerDamage(v int32) {
	o.TowerDamage = &v
}

// GetXpPerMin returns the XpPerMin field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetXpPerMin() int32 {
	if o == nil || IsNil(o.XpPerMin) {
		var ret int32
		return ret
	}
	return *o.XpPerMin
}

// GetXpPerMinOk returns a tuple with the XpPerMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetXpPerMinOk() (*int32, bool) {
	if o == nil || IsNil(o.XpPerMin) {
		return nil, false
	}
	return o.XpPerMin, true
}

// HasXpPerMin returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasXpPerMin() bool {
	if o != nil && !IsNil(o.XpPerMin) {
		return true
	}

	return false
}

// SetXpPerMin gets a reference to the given int32 and assigns it to the XpPerMin field.
func (o *MatchResponsePlayersInner) SetXpPerMin(v int32) {
	o.XpPerMin = &v
}

// GetXpReasons returns the XpReasons field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetXpReasons() map[string]interface{} {
	if o == nil || IsNil(o.XpReasons) {
		var ret map[string]interface{}
		return ret
	}
	return o.XpReasons
}

// GetXpReasonsOk returns a tuple with the XpReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetXpReasonsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.XpReasons) {
		return map[string]interface{}{}, false
	}
	return o.XpReasons, true
}

// HasXpReasons returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasXpReasons() bool {
	if o != nil && !IsNil(o.XpReasons) {
		return true
	}

	return false
}

// SetXpReasons gets a reference to the given map[string]interface{} and assigns it to the XpReasons field.
func (o *MatchResponsePlayersInner) SetXpReasons(v map[string]interface{}) {
	o.XpReasons = v
}

// GetXpT returns the XpT field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetXpT() []int32 {
	if o == nil || IsNil(o.XpT) {
		var ret []int32
		return ret
	}
	return o.XpT
}

// GetXpTOk returns a tuple with the XpT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetXpTOk() ([]int32, bool) {
	if o == nil || IsNil(o.XpT) {
		return nil, false
	}
	return o.XpT, true
}

// HasXpT returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasXpT() bool {
	if o != nil && !IsNil(o.XpT) {
		return true
	}

	return false
}

// SetXpT gets a reference to the given []int32 and assigns it to the XpT field.
func (o *MatchResponsePlayersInner) SetXpT(v []int32) {
	o.XpT = v
}

// GetPersonaname returns the Personaname field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchResponsePlayersInner) GetPersonaname() string {
	if o == nil || IsNil(o.Personaname.Get()) {
		var ret string
		return ret
	}
	return *o.Personaname.Get()
}

// GetPersonanameOk returns a tuple with the Personaname field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchResponsePlayersInner) GetPersonanameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Personaname.Get(), o.Personaname.IsSet()
}

// HasPersonaname returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasPersonaname() bool {
	if o != nil && o.Personaname.IsSet() {
		return true
	}

	return false
}

// SetPersonaname gets a reference to the given NullableString and assigns it to the Personaname field.
func (o *MatchResponsePlayersInner) SetPersonaname(v string) {
	o.Personaname.Set(&v)
}
// SetPersonanameNil sets the value for Personaname to be an explicit nil
func (o *MatchResponsePlayersInner) SetPersonanameNil() {
	o.Personaname.Set(nil)
}

// UnsetPersonaname ensures that no value is present for Personaname, not even an explicit nil
func (o *MatchResponsePlayersInner) UnsetPersonaname() {
	o.Personaname.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchResponsePlayersInner) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchResponsePlayersInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *MatchResponsePlayersInner) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *MatchResponsePlayersInner) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *MatchResponsePlayersInner) UnsetName() {
	o.Name.Unset()
}

// GetLastLogin returns the LastLogin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchResponsePlayersInner) GetLastLogin() time.Time {
	if o == nil || IsNil(o.LastLogin.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastLogin.Get()
}

// GetLastLoginOk returns a tuple with the LastLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchResponsePlayersInner) GetLastLoginOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastLogin.Get(), o.LastLogin.IsSet()
}

// HasLastLogin returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasLastLogin() bool {
	if o != nil && o.LastLogin.IsSet() {
		return true
	}

	return false
}

// SetLastLogin gets a reference to the given NullableTime and assigns it to the LastLogin field.
func (o *MatchResponsePlayersInner) SetLastLogin(v time.Time) {
	o.LastLogin.Set(&v)
}
// SetLastLoginNil sets the value for LastLogin to be an explicit nil
func (o *MatchResponsePlayersInner) SetLastLoginNil() {
	o.LastLogin.Set(nil)
}

// UnsetLastLogin ensures that no value is present for LastLogin, not even an explicit nil
func (o *MatchResponsePlayersInner) UnsetLastLogin() {
	o.LastLogin.Unset()
}

// GetRadiantWin returns the RadiantWin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchResponsePlayersInner) GetRadiantWin() bool {
	if o == nil || IsNil(o.RadiantWin.Get()) {
		var ret bool
		return ret
	}
	return *o.RadiantWin.Get()
}

// GetRadiantWinOk returns a tuple with the RadiantWin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchResponsePlayersInner) GetRadiantWinOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RadiantWin.Get(), o.RadiantWin.IsSet()
}

// HasRadiantWin returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasRadiantWin() bool {
	if o != nil && o.RadiantWin.IsSet() {
		return true
	}

	return false
}

// SetRadiantWin gets a reference to the given NullableBool and assigns it to the RadiantWin field.
func (o *MatchResponsePlayersInner) SetRadiantWin(v bool) {
	o.RadiantWin.Set(&v)
}
// SetRadiantWinNil sets the value for RadiantWin to be an explicit nil
func (o *MatchResponsePlayersInner) SetRadiantWinNil() {
	o.RadiantWin.Set(nil)
}

// UnsetRadiantWin ensures that no value is present for RadiantWin, not even an explicit nil
func (o *MatchResponsePlayersInner) UnsetRadiantWin() {
	o.RadiantWin.Unset()
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetStartTime() int32 {
	if o == nil || IsNil(o.StartTime) {
		var ret int32
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetStartTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given int32 and assigns it to the StartTime field.
func (o *MatchResponsePlayersInner) SetStartTime(v int32) {
	o.StartTime = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetDuration() int32 {
	if o == nil || IsNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *MatchResponsePlayersInner) SetDuration(v int32) {
	o.Duration = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetCluster() int32 {
	if o == nil || IsNil(o.Cluster) {
		var ret int32
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetClusterOk() (*int32, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given int32 and assigns it to the Cluster field.
func (o *MatchResponsePlayersInner) SetCluster(v int32) {
	o.Cluster = &v
}

// GetLobbyType returns the LobbyType field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetLobbyType() int32 {
	if o == nil || IsNil(o.LobbyType) {
		var ret int32
		return ret
	}
	return *o.LobbyType
}

// GetLobbyTypeOk returns a tuple with the LobbyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetLobbyTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.LobbyType) {
		return nil, false
	}
	return o.LobbyType, true
}

// HasLobbyType returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasLobbyType() bool {
	if o != nil && !IsNil(o.LobbyType) {
		return true
	}

	return false
}

// SetLobbyType gets a reference to the given int32 and assigns it to the LobbyType field.
func (o *MatchResponsePlayersInner) SetLobbyType(v int32) {
	o.LobbyType = &v
}

// GetGameMode returns the GameMode field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetGameMode() int32 {
	if o == nil || IsNil(o.GameMode) {
		var ret int32
		return ret
	}
	return *o.GameMode
}

// GetGameModeOk returns a tuple with the GameMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetGameModeOk() (*int32, bool) {
	if o == nil || IsNil(o.GameMode) {
		return nil, false
	}
	return o.GameMode, true
}

// HasGameMode returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasGameMode() bool {
	if o != nil && !IsNil(o.GameMode) {
		return true
	}

	return false
}

// SetGameMode gets a reference to the given int32 and assigns it to the GameMode field.
func (o *MatchResponsePlayersInner) SetGameMode(v int32) {
	o.GameMode = &v
}

// GetPatch returns the Patch field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetPatch() int32 {
	if o == nil || IsNil(o.Patch) {
		var ret int32
		return ret
	}
	return *o.Patch
}

// GetPatchOk returns a tuple with the Patch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetPatchOk() (*int32, bool) {
	if o == nil || IsNil(o.Patch) {
		return nil, false
	}
	return o.Patch, true
}

// HasPatch returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasPatch() bool {
	if o != nil && !IsNil(o.Patch) {
		return true
	}

	return false
}

// SetPatch gets a reference to the given int32 and assigns it to the Patch field.
func (o *MatchResponsePlayersInner) SetPatch(v int32) {
	o.Patch = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetRegion() int32 {
	if o == nil || IsNil(o.Region) {
		var ret int32
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetRegionOk() (*int32, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given int32 and assigns it to the Region field.
func (o *MatchResponsePlayersInner) SetRegion(v int32) {
	o.Region = &v
}

// GetIsRadiant returns the IsRadiant field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetIsRadiant() bool {
	if o == nil || IsNil(o.IsRadiant) {
		var ret bool
		return ret
	}
	return *o.IsRadiant
}

// GetIsRadiantOk returns a tuple with the IsRadiant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetIsRadiantOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRadiant) {
		return nil, false
	}
	return o.IsRadiant, true
}

// HasIsRadiant returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasIsRadiant() bool {
	if o != nil && !IsNil(o.IsRadiant) {
		return true
	}

	return false
}

// SetIsRadiant gets a reference to the given bool and assigns it to the IsRadiant field.
func (o *MatchResponsePlayersInner) SetIsRadiant(v bool) {
	o.IsRadiant = &v
}

// GetWin returns the Win field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetWin() int32 {
	if o == nil || IsNil(o.Win) {
		var ret int32
		return ret
	}
	return *o.Win
}

// GetWinOk returns a tuple with the Win field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetWinOk() (*int32, bool) {
	if o == nil || IsNil(o.Win) {
		return nil, false
	}
	return o.Win, true
}

// HasWin returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasWin() bool {
	if o != nil && !IsNil(o.Win) {
		return true
	}

	return false
}

// SetWin gets a reference to the given int32 and assigns it to the Win field.
func (o *MatchResponsePlayersInner) SetWin(v int32) {
	o.Win = &v
}

// GetLose returns the Lose field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetLose() int32 {
	if o == nil || IsNil(o.Lose) {
		var ret int32
		return ret
	}
	return *o.Lose
}

// GetLoseOk returns a tuple with the Lose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetLoseOk() (*int32, bool) {
	if o == nil || IsNil(o.Lose) {
		return nil, false
	}
	return o.Lose, true
}

// HasLose returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasLose() bool {
	if o != nil && !IsNil(o.Lose) {
		return true
	}

	return false
}

// SetLose gets a reference to the given int32 and assigns it to the Lose field.
func (o *MatchResponsePlayersInner) SetLose(v int32) {
	o.Lose = &v
}

// GetTotalGold returns the TotalGold field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetTotalGold() int32 {
	if o == nil || IsNil(o.TotalGold) {
		var ret int32
		return ret
	}
	return *o.TotalGold
}

// GetTotalGoldOk returns a tuple with the TotalGold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetTotalGoldOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalGold) {
		return nil, false
	}
	return o.TotalGold, true
}

// HasTotalGold returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasTotalGold() bool {
	if o != nil && !IsNil(o.TotalGold) {
		return true
	}

	return false
}

// SetTotalGold gets a reference to the given int32 and assigns it to the TotalGold field.
func (o *MatchResponsePlayersInner) SetTotalGold(v int32) {
	o.TotalGold = &v
}

// GetTotalXp returns the TotalXp field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetTotalXp() int32 {
	if o == nil || IsNil(o.TotalXp) {
		var ret int32
		return ret
	}
	return *o.TotalXp
}

// GetTotalXpOk returns a tuple with the TotalXp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetTotalXpOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalXp) {
		return nil, false
	}
	return o.TotalXp, true
}

// HasTotalXp returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasTotalXp() bool {
	if o != nil && !IsNil(o.TotalXp) {
		return true
	}

	return false
}

// SetTotalXp gets a reference to the given int32 and assigns it to the TotalXp field.
func (o *MatchResponsePlayersInner) SetTotalXp(v int32) {
	o.TotalXp = &v
}

// GetKillsPerMin returns the KillsPerMin field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetKillsPerMin() float32 {
	if o == nil || IsNil(o.KillsPerMin) {
		var ret float32
		return ret
	}
	return *o.KillsPerMin
}

// GetKillsPerMinOk returns a tuple with the KillsPerMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetKillsPerMinOk() (*float32, bool) {
	if o == nil || IsNil(o.KillsPerMin) {
		return nil, false
	}
	return o.KillsPerMin, true
}

// HasKillsPerMin returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasKillsPerMin() bool {
	if o != nil && !IsNil(o.KillsPerMin) {
		return true
	}

	return false
}

// SetKillsPerMin gets a reference to the given float32 and assigns it to the KillsPerMin field.
func (o *MatchResponsePlayersInner) SetKillsPerMin(v float32) {
	o.KillsPerMin = &v
}

// GetKda returns the Kda field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetKda() float32 {
	if o == nil || IsNil(o.Kda) {
		var ret float32
		return ret
	}
	return *o.Kda
}

// GetKdaOk returns a tuple with the Kda field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetKdaOk() (*float32, bool) {
	if o == nil || IsNil(o.Kda) {
		return nil, false
	}
	return o.Kda, true
}

// HasKda returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasKda() bool {
	if o != nil && !IsNil(o.Kda) {
		return true
	}

	return false
}

// SetKda gets a reference to the given float32 and assigns it to the Kda field.
func (o *MatchResponsePlayersInner) SetKda(v float32) {
	o.Kda = &v
}

// GetAbandons returns the Abandons field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetAbandons() int32 {
	if o == nil || IsNil(o.Abandons) {
		var ret int32
		return ret
	}
	return *o.Abandons
}

// GetAbandonsOk returns a tuple with the Abandons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetAbandonsOk() (*int32, bool) {
	if o == nil || IsNil(o.Abandons) {
		return nil, false
	}
	return o.Abandons, true
}

// HasAbandons returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasAbandons() bool {
	if o != nil && !IsNil(o.Abandons) {
		return true
	}

	return false
}

// SetAbandons gets a reference to the given int32 and assigns it to the Abandons field.
func (o *MatchResponsePlayersInner) SetAbandons(v int32) {
	o.Abandons = &v
}

// GetNeutralKills returns the NeutralKills field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetNeutralKills() int32 {
	if o == nil || IsNil(o.NeutralKills) {
		var ret int32
		return ret
	}
	return *o.NeutralKills
}

// GetNeutralKillsOk returns a tuple with the NeutralKills field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetNeutralKillsOk() (*int32, bool) {
	if o == nil || IsNil(o.NeutralKills) {
		return nil, false
	}
	return o.NeutralKills, true
}

// HasNeutralKills returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasNeutralKills() bool {
	if o != nil && !IsNil(o.NeutralKills) {
		return true
	}

	return false
}

// SetNeutralKills gets a reference to the given int32 and assigns it to the NeutralKills field.
func (o *MatchResponsePlayersInner) SetNeutralKills(v int32) {
	o.NeutralKills = &v
}

// GetTowerKills returns the TowerKills field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetTowerKills() int32 {
	if o == nil || IsNil(o.TowerKills) {
		var ret int32
		return ret
	}
	return *o.TowerKills
}

// GetTowerKillsOk returns a tuple with the TowerKills field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetTowerKillsOk() (*int32, bool) {
	if o == nil || IsNil(o.TowerKills) {
		return nil, false
	}
	return o.TowerKills, true
}

// HasTowerKills returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasTowerKills() bool {
	if o != nil && !IsNil(o.TowerKills) {
		return true
	}

	return false
}

// SetTowerKills gets a reference to the given int32 and assigns it to the TowerKills field.
func (o *MatchResponsePlayersInner) SetTowerKills(v int32) {
	o.TowerKills = &v
}

// GetCourierKills returns the CourierKills field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetCourierKills() int32 {
	if o == nil || IsNil(o.CourierKills) {
		var ret int32
		return ret
	}
	return *o.CourierKills
}

// GetCourierKillsOk returns a tuple with the CourierKills field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetCourierKillsOk() (*int32, bool) {
	if o == nil || IsNil(o.CourierKills) {
		return nil, false
	}
	return o.CourierKills, true
}

// HasCourierKills returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasCourierKills() bool {
	if o != nil && !IsNil(o.CourierKills) {
		return true
	}

	return false
}

// SetCourierKills gets a reference to the given int32 and assigns it to the CourierKills field.
func (o *MatchResponsePlayersInner) SetCourierKills(v int32) {
	o.CourierKills = &v
}

// GetLaneKills returns the LaneKills field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetLaneKills() int32 {
	if o == nil || IsNil(o.LaneKills) {
		var ret int32
		return ret
	}
	return *o.LaneKills
}

// GetLaneKillsOk returns a tuple with the LaneKills field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetLaneKillsOk() (*int32, bool) {
	if o == nil || IsNil(o.LaneKills) {
		return nil, false
	}
	return o.LaneKills, true
}

// HasLaneKills returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasLaneKills() bool {
	if o != nil && !IsNil(o.LaneKills) {
		return true
	}

	return false
}

// SetLaneKills gets a reference to the given int32 and assigns it to the LaneKills field.
func (o *MatchResponsePlayersInner) SetLaneKills(v int32) {
	o.LaneKills = &v
}

// GetHeroKills returns the HeroKills field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetHeroKills() int32 {
	if o == nil || IsNil(o.HeroKills) {
		var ret int32
		return ret
	}
	return *o.HeroKills
}

// GetHeroKillsOk returns a tuple with the HeroKills field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetHeroKillsOk() (*int32, bool) {
	if o == nil || IsNil(o.HeroKills) {
		return nil, false
	}
	return o.HeroKills, true
}

// HasHeroKills returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasHeroKills() bool {
	if o != nil && !IsNil(o.HeroKills) {
		return true
	}

	return false
}

// SetHeroKills gets a reference to the given int32 and assigns it to the HeroKills field.
func (o *MatchResponsePlayersInner) SetHeroKills(v int32) {
	o.HeroKills = &v
}

// GetObserverKills returns the ObserverKills field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetObserverKills() int32 {
	if o == nil || IsNil(o.ObserverKills) {
		var ret int32
		return ret
	}
	return *o.ObserverKills
}

// GetObserverKillsOk returns a tuple with the ObserverKills field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetObserverKillsOk() (*int32, bool) {
	if o == nil || IsNil(o.ObserverKills) {
		return nil, false
	}
	return o.ObserverKills, true
}

// HasObserverKills returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasObserverKills() bool {
	if o != nil && !IsNil(o.ObserverKills) {
		return true
	}

	return false
}

// SetObserverKills gets a reference to the given int32 and assigns it to the ObserverKills field.
func (o *MatchResponsePlayersInner) SetObserverKills(v int32) {
	o.ObserverKills = &v
}

// GetSentryKills returns the SentryKills field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetSentryKills() int32 {
	if o == nil || IsNil(o.SentryKills) {
		var ret int32
		return ret
	}
	return *o.SentryKills
}

// GetSentryKillsOk returns a tuple with the SentryKills field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetSentryKillsOk() (*int32, bool) {
	if o == nil || IsNil(o.SentryKills) {
		return nil, false
	}
	return o.SentryKills, true
}

// HasSentryKills returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasSentryKills() bool {
	if o != nil && !IsNil(o.SentryKills) {
		return true
	}

	return false
}

// SetSentryKills gets a reference to the given int32 and assigns it to the SentryKills field.
func (o *MatchResponsePlayersInner) SetSentryKills(v int32) {
	o.SentryKills = &v
}

// GetRoshanKills returns the RoshanKills field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetRoshanKills() int32 {
	if o == nil || IsNil(o.RoshanKills) {
		var ret int32
		return ret
	}
	return *o.RoshanKills
}

// GetRoshanKillsOk returns a tuple with the RoshanKills field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetRoshanKillsOk() (*int32, bool) {
	if o == nil || IsNil(o.RoshanKills) {
		return nil, false
	}
	return o.RoshanKills, true
}

// HasRoshanKills returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasRoshanKills() bool {
	if o != nil && !IsNil(o.RoshanKills) {
		return true
	}

	return false
}

// SetRoshanKills gets a reference to the given int32 and assigns it to the RoshanKills field.
func (o *MatchResponsePlayersInner) SetRoshanKills(v int32) {
	o.RoshanKills = &v
}

// GetNecronomiconKills returns the NecronomiconKills field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetNecronomiconKills() int32 {
	if o == nil || IsNil(o.NecronomiconKills) {
		var ret int32
		return ret
	}
	return *o.NecronomiconKills
}

// GetNecronomiconKillsOk returns a tuple with the NecronomiconKills field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetNecronomiconKillsOk() (*int32, bool) {
	if o == nil || IsNil(o.NecronomiconKills) {
		return nil, false
	}
	return o.NecronomiconKills, true
}

// HasNecronomiconKills returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasNecronomiconKills() bool {
	if o != nil && !IsNil(o.NecronomiconKills) {
		return true
	}

	return false
}

// SetNecronomiconKills gets a reference to the given int32 and assigns it to the NecronomiconKills field.
func (o *MatchResponsePlayersInner) SetNecronomiconKills(v int32) {
	o.NecronomiconKills = &v
}

// GetAncientKills returns the AncientKills field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetAncientKills() int32 {
	if o == nil || IsNil(o.AncientKills) {
		var ret int32
		return ret
	}
	return *o.AncientKills
}

// GetAncientKillsOk returns a tuple with the AncientKills field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetAncientKillsOk() (*int32, bool) {
	if o == nil || IsNil(o.AncientKills) {
		return nil, false
	}
	return o.AncientKills, true
}

// HasAncientKills returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasAncientKills() bool {
	if o != nil && !IsNil(o.AncientKills) {
		return true
	}

	return false
}

// SetAncientKills gets a reference to the given int32 and assigns it to the AncientKills field.
func (o *MatchResponsePlayersInner) SetAncientKills(v int32) {
	o.AncientKills = &v
}

// GetBuybackCount returns the BuybackCount field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetBuybackCount() int32 {
	if o == nil || IsNil(o.BuybackCount) {
		var ret int32
		return ret
	}
	return *o.BuybackCount
}

// GetBuybackCountOk returns a tuple with the BuybackCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetBuybackCountOk() (*int32, bool) {
	if o == nil || IsNil(o.BuybackCount) {
		return nil, false
	}
	return o.BuybackCount, true
}

// HasBuybackCount returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasBuybackCount() bool {
	if o != nil && !IsNil(o.BuybackCount) {
		return true
	}

	return false
}

// SetBuybackCount gets a reference to the given int32 and assigns it to the BuybackCount field.
func (o *MatchResponsePlayersInner) SetBuybackCount(v int32) {
	o.BuybackCount = &v
}

// GetObserverUses returns the ObserverUses field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetObserverUses() int32 {
	if o == nil || IsNil(o.ObserverUses) {
		var ret int32
		return ret
	}
	return *o.ObserverUses
}

// GetObserverUsesOk returns a tuple with the ObserverUses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetObserverUsesOk() (*int32, bool) {
	if o == nil || IsNil(o.ObserverUses) {
		return nil, false
	}
	return o.ObserverUses, true
}

// HasObserverUses returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasObserverUses() bool {
	if o != nil && !IsNil(o.ObserverUses) {
		return true
	}

	return false
}

// SetObserverUses gets a reference to the given int32 and assigns it to the ObserverUses field.
func (o *MatchResponsePlayersInner) SetObserverUses(v int32) {
	o.ObserverUses = &v
}

// GetSentryUses returns the SentryUses field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetSentryUses() int32 {
	if o == nil || IsNil(o.SentryUses) {
		var ret int32
		return ret
	}
	return *o.SentryUses
}

// GetSentryUsesOk returns a tuple with the SentryUses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetSentryUsesOk() (*int32, bool) {
	if o == nil || IsNil(o.SentryUses) {
		return nil, false
	}
	return o.SentryUses, true
}

// HasSentryUses returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasSentryUses() bool {
	if o != nil && !IsNil(o.SentryUses) {
		return true
	}

	return false
}

// SetSentryUses gets a reference to the given int32 and assigns it to the SentryUses field.
func (o *MatchResponsePlayersInner) SetSentryUses(v int32) {
	o.SentryUses = &v
}

// GetLaneEfficiency returns the LaneEfficiency field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetLaneEfficiency() float32 {
	if o == nil || IsNil(o.LaneEfficiency) {
		var ret float32
		return ret
	}
	return *o.LaneEfficiency
}

// GetLaneEfficiencyOk returns a tuple with the LaneEfficiency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetLaneEfficiencyOk() (*float32, bool) {
	if o == nil || IsNil(o.LaneEfficiency) {
		return nil, false
	}
	return o.LaneEfficiency, true
}

// HasLaneEfficiency returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasLaneEfficiency() bool {
	if o != nil && !IsNil(o.LaneEfficiency) {
		return true
	}

	return false
}

// SetLaneEfficiency gets a reference to the given float32 and assigns it to the LaneEfficiency field.
func (o *MatchResponsePlayersInner) SetLaneEfficiency(v float32) {
	o.LaneEfficiency = &v
}

// GetLaneEfficiencyPct returns the LaneEfficiencyPct field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetLaneEfficiencyPct() float32 {
	if o == nil || IsNil(o.LaneEfficiencyPct) {
		var ret float32
		return ret
	}
	return *o.LaneEfficiencyPct
}

// GetLaneEfficiencyPctOk returns a tuple with the LaneEfficiencyPct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetLaneEfficiencyPctOk() (*float32, bool) {
	if o == nil || IsNil(o.LaneEfficiencyPct) {
		return nil, false
	}
	return o.LaneEfficiencyPct, true
}

// HasLaneEfficiencyPct returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasLaneEfficiencyPct() bool {
	if o != nil && !IsNil(o.LaneEfficiencyPct) {
		return true
	}

	return false
}

// SetLaneEfficiencyPct gets a reference to the given float32 and assigns it to the LaneEfficiencyPct field.
func (o *MatchResponsePlayersInner) SetLaneEfficiencyPct(v float32) {
	o.LaneEfficiencyPct = &v
}

// GetLane returns the Lane field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchResponsePlayersInner) GetLane() int32 {
	if o == nil || IsNil(o.Lane.Get()) {
		var ret int32
		return ret
	}
	return *o.Lane.Get()
}

// GetLaneOk returns a tuple with the Lane field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchResponsePlayersInner) GetLaneOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Lane.Get(), o.Lane.IsSet()
}

// HasLane returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasLane() bool {
	if o != nil && o.Lane.IsSet() {
		return true
	}

	return false
}

// SetLane gets a reference to the given NullableInt32 and assigns it to the Lane field.
func (o *MatchResponsePlayersInner) SetLane(v int32) {
	o.Lane.Set(&v)
}
// SetLaneNil sets the value for Lane to be an explicit nil
func (o *MatchResponsePlayersInner) SetLaneNil() {
	o.Lane.Set(nil)
}

// UnsetLane ensures that no value is present for Lane, not even an explicit nil
func (o *MatchResponsePlayersInner) UnsetLane() {
	o.Lane.Unset()
}

// GetLaneRole returns the LaneRole field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchResponsePlayersInner) GetLaneRole() int32 {
	if o == nil || IsNil(o.LaneRole.Get()) {
		var ret int32
		return ret
	}
	return *o.LaneRole.Get()
}

// GetLaneRoleOk returns a tuple with the LaneRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchResponsePlayersInner) GetLaneRoleOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LaneRole.Get(), o.LaneRole.IsSet()
}

// HasLaneRole returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasLaneRole() bool {
	if o != nil && o.LaneRole.IsSet() {
		return true
	}

	return false
}

// SetLaneRole gets a reference to the given NullableInt32 and assigns it to the LaneRole field.
func (o *MatchResponsePlayersInner) SetLaneRole(v int32) {
	o.LaneRole.Set(&v)
}
// SetLaneRoleNil sets the value for LaneRole to be an explicit nil
func (o *MatchResponsePlayersInner) SetLaneRoleNil() {
	o.LaneRole.Set(nil)
}

// UnsetLaneRole ensures that no value is present for LaneRole, not even an explicit nil
func (o *MatchResponsePlayersInner) UnsetLaneRole() {
	o.LaneRole.Unset()
}

// GetIsRoaming returns the IsRoaming field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchResponsePlayersInner) GetIsRoaming() bool {
	if o == nil || IsNil(o.IsRoaming.Get()) {
		var ret bool
		return ret
	}
	return *o.IsRoaming.Get()
}

// GetIsRoamingOk returns a tuple with the IsRoaming field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchResponsePlayersInner) GetIsRoamingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsRoaming.Get(), o.IsRoaming.IsSet()
}

// HasIsRoaming returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasIsRoaming() bool {
	if o != nil && o.IsRoaming.IsSet() {
		return true
	}

	return false
}

// SetIsRoaming gets a reference to the given NullableBool and assigns it to the IsRoaming field.
func (o *MatchResponsePlayersInner) SetIsRoaming(v bool) {
	o.IsRoaming.Set(&v)
}
// SetIsRoamingNil sets the value for IsRoaming to be an explicit nil
func (o *MatchResponsePlayersInner) SetIsRoamingNil() {
	o.IsRoaming.Set(nil)
}

// UnsetIsRoaming ensures that no value is present for IsRoaming, not even an explicit nil
func (o *MatchResponsePlayersInner) UnsetIsRoaming() {
	o.IsRoaming.Unset()
}

// GetPurchaseTime returns the PurchaseTime field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetPurchaseTime() map[string]interface{} {
	if o == nil || IsNil(o.PurchaseTime) {
		var ret map[string]interface{}
		return ret
	}
	return o.PurchaseTime
}

// GetPurchaseTimeOk returns a tuple with the PurchaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetPurchaseTimeOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.PurchaseTime) {
		return map[string]interface{}{}, false
	}
	return o.PurchaseTime, true
}

// HasPurchaseTime returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasPurchaseTime() bool {
	if o != nil && !IsNil(o.PurchaseTime) {
		return true
	}

	return false
}

// SetPurchaseTime gets a reference to the given map[string]interface{} and assigns it to the PurchaseTime field.
func (o *MatchResponsePlayersInner) SetPurchaseTime(v map[string]interface{}) {
	o.PurchaseTime = v
}

// GetFirstPurchaseTime returns the FirstPurchaseTime field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetFirstPurchaseTime() map[string]interface{} {
	if o == nil || IsNil(o.FirstPurchaseTime) {
		var ret map[string]interface{}
		return ret
	}
	return o.FirstPurchaseTime
}

// GetFirstPurchaseTimeOk returns a tuple with the FirstPurchaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetFirstPurchaseTimeOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.FirstPurchaseTime) {
		return map[string]interface{}{}, false
	}
	return o.FirstPurchaseTime, true
}

// HasFirstPurchaseTime returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasFirstPurchaseTime() bool {
	if o != nil && !IsNil(o.FirstPurchaseTime) {
		return true
	}

	return false
}

// SetFirstPurchaseTime gets a reference to the given map[string]interface{} and assigns it to the FirstPurchaseTime field.
func (o *MatchResponsePlayersInner) SetFirstPurchaseTime(v map[string]interface{}) {
	o.FirstPurchaseTime = v
}

// GetItemWin returns the ItemWin field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetItemWin() map[string]interface{} {
	if o == nil || IsNil(o.ItemWin) {
		var ret map[string]interface{}
		return ret
	}
	return o.ItemWin
}

// GetItemWinOk returns a tuple with the ItemWin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetItemWinOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ItemWin) {
		return map[string]interface{}{}, false
	}
	return o.ItemWin, true
}

// HasItemWin returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasItemWin() bool {
	if o != nil && !IsNil(o.ItemWin) {
		return true
	}

	return false
}

// SetItemWin gets a reference to the given map[string]interface{} and assigns it to the ItemWin field.
func (o *MatchResponsePlayersInner) SetItemWin(v map[string]interface{}) {
	o.ItemWin = v
}

// GetItemUsage returns the ItemUsage field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetItemUsage() map[string]interface{} {
	if o == nil || IsNil(o.ItemUsage) {
		var ret map[string]interface{}
		return ret
	}
	return o.ItemUsage
}

// GetItemUsageOk returns a tuple with the ItemUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetItemUsageOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ItemUsage) {
		return map[string]interface{}{}, false
	}
	return o.ItemUsage, true
}

// HasItemUsage returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasItemUsage() bool {
	if o != nil && !IsNil(o.ItemUsage) {
		return true
	}

	return false
}

// SetItemUsage gets a reference to the given map[string]interface{} and assigns it to the ItemUsage field.
func (o *MatchResponsePlayersInner) SetItemUsage(v map[string]interface{}) {
	o.ItemUsage = v
}

// GetPurchaseTpscroll returns the PurchaseTpscroll field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetPurchaseTpscroll() int32 {
	if o == nil || IsNil(o.PurchaseTpscroll) {
		var ret int32
		return ret
	}
	return *o.PurchaseTpscroll
}

// GetPurchaseTpscrollOk returns a tuple with the PurchaseTpscroll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetPurchaseTpscrollOk() (*int32, bool) {
	if o == nil || IsNil(o.PurchaseTpscroll) {
		return nil, false
	}
	return o.PurchaseTpscroll, true
}

// HasPurchaseTpscroll returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasPurchaseTpscroll() bool {
	if o != nil && !IsNil(o.PurchaseTpscroll) {
		return true
	}

	return false
}

// SetPurchaseTpscroll gets a reference to the given int32 and assigns it to the PurchaseTpscroll field.
func (o *MatchResponsePlayersInner) SetPurchaseTpscroll(v int32) {
	o.PurchaseTpscroll = &v
}

// GetActionsPerMin returns the ActionsPerMin field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetActionsPerMin() int32 {
	if o == nil || IsNil(o.ActionsPerMin) {
		var ret int32
		return ret
	}
	return *o.ActionsPerMin
}

// GetActionsPerMinOk returns a tuple with the ActionsPerMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetActionsPerMinOk() (*int32, bool) {
	if o == nil || IsNil(o.ActionsPerMin) {
		return nil, false
	}
	return o.ActionsPerMin, true
}

// HasActionsPerMin returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasActionsPerMin() bool {
	if o != nil && !IsNil(o.ActionsPerMin) {
		return true
	}

	return false
}

// SetActionsPerMin gets a reference to the given int32 and assigns it to the ActionsPerMin field.
func (o *MatchResponsePlayersInner) SetActionsPerMin(v int32) {
	o.ActionsPerMin = &v
}

// GetLifeStateDead returns the LifeStateDead field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetLifeStateDead() int32 {
	if o == nil || IsNil(o.LifeStateDead) {
		var ret int32
		return ret
	}
	return *o.LifeStateDead
}

// GetLifeStateDeadOk returns a tuple with the LifeStateDead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetLifeStateDeadOk() (*int32, bool) {
	if o == nil || IsNil(o.LifeStateDead) {
		return nil, false
	}
	return o.LifeStateDead, true
}

// HasLifeStateDead returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasLifeStateDead() bool {
	if o != nil && !IsNil(o.LifeStateDead) {
		return true
	}

	return false
}

// SetLifeStateDead gets a reference to the given int32 and assigns it to the LifeStateDead field.
func (o *MatchResponsePlayersInner) SetLifeStateDead(v int32) {
	o.LifeStateDead = &v
}

// GetRankTier returns the RankTier field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetRankTier() int32 {
	if o == nil || IsNil(o.RankTier) {
		var ret int32
		return ret
	}
	return *o.RankTier
}

// GetRankTierOk returns a tuple with the RankTier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetRankTierOk() (*int32, bool) {
	if o == nil || IsNil(o.RankTier) {
		return nil, false
	}
	return o.RankTier, true
}

// HasRankTier returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasRankTier() bool {
	if o != nil && !IsNil(o.RankTier) {
		return true
	}

	return false
}

// SetRankTier gets a reference to the given int32 and assigns it to the RankTier field.
func (o *MatchResponsePlayersInner) SetRankTier(v int32) {
	o.RankTier = &v
}

// GetCosmetics returns the Cosmetics field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetCosmetics() []MatchResponsePlayersInnerCosmeticsInner {
	if o == nil || IsNil(o.Cosmetics) {
		var ret []MatchResponsePlayersInnerCosmeticsInner
		return ret
	}
	return o.Cosmetics
}

// GetCosmeticsOk returns a tuple with the Cosmetics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetCosmeticsOk() ([]MatchResponsePlayersInnerCosmeticsInner, bool) {
	if o == nil || IsNil(o.Cosmetics) {
		return nil, false
	}
	return o.Cosmetics, true
}

// HasCosmetics returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasCosmetics() bool {
	if o != nil && !IsNil(o.Cosmetics) {
		return true
	}

	return false
}

// SetCosmetics gets a reference to the given []MatchResponsePlayersInnerCosmeticsInner and assigns it to the Cosmetics field.
func (o *MatchResponsePlayersInner) SetCosmetics(v []MatchResponsePlayersInnerCosmeticsInner) {
	o.Cosmetics = v
}

// GetBenchmarks returns the Benchmarks field value if set, zero value otherwise.
func (o *MatchResponsePlayersInner) GetBenchmarks() map[string]interface{} {
	if o == nil || IsNil(o.Benchmarks) {
		var ret map[string]interface{}
		return ret
	}
	return o.Benchmarks
}

// GetBenchmarksOk returns a tuple with the Benchmarks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInner) GetBenchmarksOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Benchmarks) {
		return map[string]interface{}{}, false
	}
	return o.Benchmarks, true
}

// HasBenchmarks returns a boolean if a field has been set.
func (o *MatchResponsePlayersInner) HasBenchmarks() bool {
	if o != nil && !IsNil(o.Benchmarks) {
		return true
	}

	return false
}

// SetBenchmarks gets a reference to the given map[string]interface{} and assigns it to the Benchmarks field.
func (o *MatchResponsePlayersInner) SetBenchmarks(v map[string]interface{}) {
	o.Benchmarks = v
}

func (o MatchResponsePlayersInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchResponsePlayersInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MatchId) {
		toSerialize["match_id"] = o.MatchId
	}
	if o.PlayerSlot.IsSet() {
		toSerialize["player_slot"] = o.PlayerSlot.Get()
	}
	if !IsNil(o.AbilityUpgradesArr) {
		toSerialize["ability_upgrades_arr"] = o.AbilityUpgradesArr
	}
	if !IsNil(o.AbilityUses) {
		toSerialize["ability_uses"] = o.AbilityUses
	}
	if !IsNil(o.AbilityTargets) {
		toSerialize["ability_targets"] = o.AbilityTargets
	}
	if !IsNil(o.DamageTargets) {
		toSerialize["damage_targets"] = o.DamageTargets
	}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	if !IsNil(o.Actions) {
		toSerialize["actions"] = o.Actions
	}
	if o.AdditionalUnits != nil {
		toSerialize["additional_units"] = o.AdditionalUnits
	}
	if !IsNil(o.Assists) {
		toSerialize["assists"] = o.Assists
	}
	if !IsNil(o.Backpack0) {
		toSerialize["backpack_0"] = o.Backpack0
	}
	if !IsNil(o.Backpack1) {
		toSerialize["backpack_1"] = o.Backpack1
	}
	if !IsNil(o.Backpack2) {
		toSerialize["backpack_2"] = o.Backpack2
	}
	if !IsNil(o.BuybackLog) {
		toSerialize["buyback_log"] = o.BuybackLog
	}
	if !IsNil(o.CampsStacked) {
		toSerialize["camps_stacked"] = o.CampsStacked
	}
	if !IsNil(o.ConnectionLog) {
		toSerialize["connection_log"] = o.ConnectionLog
	}
	if !IsNil(o.CreepsStacked) {
		toSerialize["creeps_stacked"] = o.CreepsStacked
	}
	if !IsNil(o.Damage) {
		toSerialize["damage"] = o.Damage
	}
	if !IsNil(o.DamageInflictor) {
		toSerialize["damage_inflictor"] = o.DamageInflictor
	}
	if !IsNil(o.DamageInflictorReceived) {
		toSerialize["damage_inflictor_received"] = o.DamageInflictorReceived
	}
	if !IsNil(o.DamageTaken) {
		toSerialize["damage_taken"] = o.DamageTaken
	}
	if !IsNil(o.Deaths) {
		toSerialize["deaths"] = o.Deaths
	}
	if !IsNil(o.Denies) {
		toSerialize["denies"] = o.Denies
	}
	if !IsNil(o.DnT) {
		toSerialize["dn_t"] = o.DnT
	}
	if !IsNil(o.Gold) {
		toSerialize["gold"] = o.Gold
	}
	if !IsNil(o.GoldPerMin) {
		toSerialize["gold_per_min"] = o.GoldPerMin
	}
	if !IsNil(o.GoldReasons) {
		toSerialize["gold_reasons"] = o.GoldReasons
	}
	if !IsNil(o.GoldSpent) {
		toSerialize["gold_spent"] = o.GoldSpent
	}
	if !IsNil(o.GoldT) {
		toSerialize["gold_t"] = o.GoldT
	}
	if !IsNil(o.HeroDamage) {
		toSerialize["hero_damage"] = o.HeroDamage
	}
	if !IsNil(o.HeroHealing) {
		toSerialize["hero_healing"] = o.HeroHealing
	}
	if !IsNil(o.HeroHits) {
		toSerialize["hero_hits"] = o.HeroHits
	}
	if !IsNil(o.HeroId) {
		toSerialize["hero_id"] = o.HeroId
	}
	if !IsNil(o.Item0) {
		toSerialize["item_0"] = o.Item0
	}
	if !IsNil(o.Item1) {
		toSerialize["item_1"] = o.Item1
	}
	if !IsNil(o.Item2) {
		toSerialize["item_2"] = o.Item2
	}
	if !IsNil(o.Item3) {
		toSerialize["item_3"] = o.Item3
	}
	if !IsNil(o.Item4) {
		toSerialize["item_4"] = o.Item4
	}
	if !IsNil(o.Item5) {
		toSerialize["item_5"] = o.Item5
	}
	if !IsNil(o.ItemUses) {
		toSerialize["item_uses"] = o.ItemUses
	}
	if !IsNil(o.KillStreaks) {
		toSerialize["kill_streaks"] = o.KillStreaks
	}
	if !IsNil(o.Killed) {
		toSerialize["killed"] = o.Killed
	}
	if !IsNil(o.KilledBy) {
		toSerialize["killed_by"] = o.KilledBy
	}
	if !IsNil(o.Kills) {
		toSerialize["kills"] = o.Kills
	}
	if !IsNil(o.KillsLog) {
		toSerialize["kills_log"] = o.KillsLog
	}
	if !IsNil(o.LanePos) {
		toSerialize["lane_pos"] = o.LanePos
	}
	if !IsNil(o.LastHits) {
		toSerialize["last_hits"] = o.LastHits
	}
	if !IsNil(o.LeaverStatus) {
		toSerialize["leaver_status"] = o.LeaverStatus
	}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if !IsNil(o.LhT) {
		toSerialize["lh_t"] = o.LhT
	}
	if !IsNil(o.LifeState) {
		toSerialize["life_state"] = o.LifeState
	}
	if !IsNil(o.MaxHeroHit) {
		toSerialize["max_hero_hit"] = o.MaxHeroHit
	}
	if !IsNil(o.MultiKills) {
		toSerialize["multi_kills"] = o.MultiKills
	}
	if !IsNil(o.Obs) {
		toSerialize["obs"] = o.Obs
	}
	if !IsNil(o.ObsLeftLog) {
		toSerialize["obs_left_log"] = o.ObsLeftLog
	}
	if !IsNil(o.ObsLog) {
		toSerialize["obs_log"] = o.ObsLog
	}
	if !IsNil(o.ObsPlaced) {
		toSerialize["obs_placed"] = o.ObsPlaced
	}
	if !IsNil(o.PartyId) {
		toSerialize["party_id"] = o.PartyId
	}
	if !IsNil(o.PermanentBuffs) {
		toSerialize["permanent_buffs"] = o.PermanentBuffs
	}
	if !IsNil(o.Pings) {
		toSerialize["pings"] = o.Pings
	}
	if !IsNil(o.Purchase) {
		toSerialize["purchase"] = o.Purchase
	}
	if !IsNil(o.PurchaseLog) {
		toSerialize["purchase_log"] = o.PurchaseLog
	}
	if !IsNil(o.RunePickups) {
		toSerialize["rune_pickups"] = o.RunePickups
	}
	if !IsNil(o.Runes) {
		toSerialize["runes"] = o.Runes
	}
	if !IsNil(o.RunesLog) {
		toSerialize["runes_log"] = o.RunesLog
	}
	if !IsNil(o.Sen) {
		toSerialize["sen"] = o.Sen
	}
	if !IsNil(o.SenLeftLog) {
		toSerialize["sen_left_log"] = o.SenLeftLog
	}
	if !IsNil(o.SenLog) {
		toSerialize["sen_log"] = o.SenLog
	}
	if !IsNil(o.SenPlaced) {
		toSerialize["sen_placed"] = o.SenPlaced
	}
	if !IsNil(o.Stuns) {
		toSerialize["stuns"] = o.Stuns
	}
	if !IsNil(o.Times) {
		toSerialize["times"] = o.Times
	}
	if !IsNil(o.TowerDamage) {
		toSerialize["tower_damage"] = o.TowerDamage
	}
	if !IsNil(o.XpPerMin) {
		toSerialize["xp_per_min"] = o.XpPerMin
	}
	if !IsNil(o.XpReasons) {
		toSerialize["xp_reasons"] = o.XpReasons
	}
	if !IsNil(o.XpT) {
		toSerialize["xp_t"] = o.XpT
	}
	if o.Personaname.IsSet() {
		toSerialize["personaname"] = o.Personaname.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.LastLogin.IsSet() {
		toSerialize["last_login"] = o.LastLogin.Get()
	}
	if o.RadiantWin.IsSet() {
		toSerialize["radiant_win"] = o.RadiantWin.Get()
	}
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.LobbyType) {
		toSerialize["lobby_type"] = o.LobbyType
	}
	if !IsNil(o.GameMode) {
		toSerialize["game_mode"] = o.GameMode
	}
	if !IsNil(o.Patch) {
		toSerialize["patch"] = o.Patch
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.IsRadiant) {
		toSerialize["isRadiant"] = o.IsRadiant
	}
	if !IsNil(o.Win) {
		toSerialize["win"] = o.Win
	}
	if !IsNil(o.Lose) {
		toSerialize["lose"] = o.Lose
	}
	if !IsNil(o.TotalGold) {
		toSerialize["total_gold"] = o.TotalGold
	}
	if !IsNil(o.TotalXp) {
		toSerialize["total_xp"] = o.TotalXp
	}
	if !IsNil(o.KillsPerMin) {
		toSerialize["kills_per_min"] = o.KillsPerMin
	}
	if !IsNil(o.Kda) {
		toSerialize["kda"] = o.Kda
	}
	if !IsNil(o.Abandons) {
		toSerialize["abandons"] = o.Abandons
	}
	if !IsNil(o.NeutralKills) {
		toSerialize["neutral_kills"] = o.NeutralKills
	}
	if !IsNil(o.TowerKills) {
		toSerialize["tower_kills"] = o.TowerKills
	}
	if !IsNil(o.CourierKills) {
		toSerialize["courier_kills"] = o.CourierKills
	}
	if !IsNil(o.LaneKills) {
		toSerialize["lane_kills"] = o.LaneKills
	}
	if !IsNil(o.HeroKills) {
		toSerialize["hero_kills"] = o.HeroKills
	}
	if !IsNil(o.ObserverKills) {
		toSerialize["observer_kills"] = o.ObserverKills
	}
	if !IsNil(o.SentryKills) {
		toSerialize["sentry_kills"] = o.SentryKills
	}
	if !IsNil(o.RoshanKills) {
		toSerialize["roshan_kills"] = o.RoshanKills
	}
	if !IsNil(o.NecronomiconKills) {
		toSerialize["necronomicon_kills"] = o.NecronomiconKills
	}
	if !IsNil(o.AncientKills) {
		toSerialize["ancient_kills"] = o.AncientKills
	}
	if !IsNil(o.BuybackCount) {
		toSerialize["buyback_count"] = o.BuybackCount
	}
	if !IsNil(o.ObserverUses) {
		toSerialize["observer_uses"] = o.ObserverUses
	}
	if !IsNil(o.SentryUses) {
		toSerialize["sentry_uses"] = o.SentryUses
	}
	if !IsNil(o.LaneEfficiency) {
		toSerialize["lane_efficiency"] = o.LaneEfficiency
	}
	if !IsNil(o.LaneEfficiencyPct) {
		toSerialize["lane_efficiency_pct"] = o.LaneEfficiencyPct
	}
	if o.Lane.IsSet() {
		toSerialize["lane"] = o.Lane.Get()
	}
	if o.LaneRole.IsSet() {
		toSerialize["lane_role"] = o.LaneRole.Get()
	}
	if o.IsRoaming.IsSet() {
		toSerialize["is_roaming"] = o.IsRoaming.Get()
	}
	if !IsNil(o.PurchaseTime) {
		toSerialize["purchase_time"] = o.PurchaseTime
	}
	if !IsNil(o.FirstPurchaseTime) {
		toSerialize["first_purchase_time"] = o.FirstPurchaseTime
	}
	if !IsNil(o.ItemWin) {
		toSerialize["item_win"] = o.ItemWin
	}
	if !IsNil(o.ItemUsage) {
		toSerialize["item_usage"] = o.ItemUsage
	}
	if !IsNil(o.PurchaseTpscroll) {
		toSerialize["purchase_tpscroll"] = o.PurchaseTpscroll
	}
	if !IsNil(o.ActionsPerMin) {
		toSerialize["actions_per_min"] = o.ActionsPerMin
	}
	if !IsNil(o.LifeStateDead) {
		toSerialize["life_state_dead"] = o.LifeStateDead
	}
	if !IsNil(o.RankTier) {
		toSerialize["rank_tier"] = o.RankTier
	}
	if !IsNil(o.Cosmetics) {
		toSerialize["cosmetics"] = o.Cosmetics
	}
	if !IsNil(o.Benchmarks) {
		toSerialize["benchmarks"] = o.Benchmarks
	}
	return toSerialize, nil
}

type NullableMatchResponsePlayersInner struct {
	value *MatchResponsePlayersInner
	isSet bool
}

func (v NullableMatchResponsePlayersInner) Get() *MatchResponsePlayersInner {
	return v.value
}

func (v *NullableMatchResponsePlayersInner) Set(val *MatchResponsePlayersInner) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchResponsePlayersInner) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchResponsePlayersInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchResponsePlayersInner(val *MatchResponsePlayersInner) *NullableMatchResponsePlayersInner {
	return &NullableMatchResponsePlayersInner{value: val, isSet: true}
}

func (v NullableMatchResponsePlayersInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchResponsePlayersInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


