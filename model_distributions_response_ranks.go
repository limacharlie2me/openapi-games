/*
OpenDota API

# Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  Without a key, you can make 2,000 free calls per day at a rate limit of 60 requests/minute. We also offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.     

API version: 25.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DistributionsResponseRanks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DistributionsResponseRanks{}

// DistributionsResponseRanks ranks
type DistributionsResponseRanks struct {
	// rows
	Rows []DistributionsResponseRanksRowsInner `json:"rows,omitempty"`
	Sum *DistributionsResponseRanksSum `json:"sum,omitempty"`
}

// NewDistributionsResponseRanks instantiates a new DistributionsResponseRanks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDistributionsResponseRanks() *DistributionsResponseRanks {
	this := DistributionsResponseRanks{}
	return &this
}

// NewDistributionsResponseRanksWithDefaults instantiates a new DistributionsResponseRanks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDistributionsResponseRanksWithDefaults() *DistributionsResponseRanks {
	this := DistributionsResponseRanks{}
	return &this
}

// GetRows returns the Rows field value if set, zero value otherwise.
func (o *DistributionsResponseRanks) GetRows() []DistributionsResponseRanksRowsInner {
	if o == nil || IsNil(o.Rows) {
		var ret []DistributionsResponseRanksRowsInner
		return ret
	}
	return o.Rows
}

// GetRowsOk returns a tuple with the Rows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DistributionsResponseRanks) GetRowsOk() ([]DistributionsResponseRanksRowsInner, bool) {
	if o == nil || IsNil(o.Rows) {
		return nil, false
	}
	return o.Rows, true
}

// HasRows returns a boolean if a field has been set.
func (o *DistributionsResponseRanks) HasRows() bool {
	if o != nil && !IsNil(o.Rows) {
		return true
	}

	return false
}

// SetRows gets a reference to the given []DistributionsResponseRanksRowsInner and assigns it to the Rows field.
func (o *DistributionsResponseRanks) SetRows(v []DistributionsResponseRanksRowsInner) {
	o.Rows = v
}

// GetSum returns the Sum field value if set, zero value otherwise.
func (o *DistributionsResponseRanks) GetSum() DistributionsResponseRanksSum {
	if o == nil || IsNil(o.Sum) {
		var ret DistributionsResponseRanksSum
		return ret
	}
	return *o.Sum
}

// GetSumOk returns a tuple with the Sum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DistributionsResponseRanks) GetSumOk() (*DistributionsResponseRanksSum, bool) {
	if o == nil || IsNil(o.Sum) {
		return nil, false
	}
	return o.Sum, true
}

// HasSum returns a boolean if a field has been set.
func (o *DistributionsResponseRanks) HasSum() bool {
	if o != nil && !IsNil(o.Sum) {
		return true
	}

	return false
}

// SetSum gets a reference to the given DistributionsResponseRanksSum and assigns it to the Sum field.
func (o *DistributionsResponseRanks) SetSum(v DistributionsResponseRanksSum) {
	o.Sum = &v
}

func (o DistributionsResponseRanks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DistributionsResponseRanks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Rows) {
		toSerialize["rows"] = o.Rows
	}
	if !IsNil(o.Sum) {
		toSerialize["sum"] = o.Sum
	}
	return toSerialize, nil
}

type NullableDistributionsResponseRanks struct {
	value *DistributionsResponseRanks
	isSet bool
}

func (v NullableDistributionsResponseRanks) Get() *DistributionsResponseRanks {
	return v.value
}

func (v *NullableDistributionsResponseRanks) Set(val *DistributionsResponseRanks) {
	v.value = val
	v.isSet = true
}

func (v NullableDistributionsResponseRanks) IsSet() bool {
	return v.isSet
}

func (v *NullableDistributionsResponseRanks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDistributionsResponseRanks(val *DistributionsResponseRanks) *NullableDistributionsResponseRanks {
	return &NullableDistributionsResponseRanks{value: val, isSet: true}
}

func (v NullableDistributionsResponseRanks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDistributionsResponseRanks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


