/*
OpenDota API

# Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  Without a key, you can make 2,000 free calls per day at a rate limit of 60 requests/minute. We also offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.     

API version: 25.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MatchResponsePlayersInnerRunesLogInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchResponsePlayersInnerRunesLogInner{}

// MatchResponsePlayersInnerRunesLogInner struct for MatchResponsePlayersInnerRunesLogInner
type MatchResponsePlayersInnerRunesLogInner struct {
	// Time in seconds rune picked up
	Time *int32 `json:"time,omitempty"`
	// key
	Key *int32 `json:"key,omitempty"`
}

// NewMatchResponsePlayersInnerRunesLogInner instantiates a new MatchResponsePlayersInnerRunesLogInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchResponsePlayersInnerRunesLogInner() *MatchResponsePlayersInnerRunesLogInner {
	this := MatchResponsePlayersInnerRunesLogInner{}
	return &this
}

// NewMatchResponsePlayersInnerRunesLogInnerWithDefaults instantiates a new MatchResponsePlayersInnerRunesLogInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchResponsePlayersInnerRunesLogInnerWithDefaults() *MatchResponsePlayersInnerRunesLogInner {
	this := MatchResponsePlayersInnerRunesLogInner{}
	return &this
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *MatchResponsePlayersInnerRunesLogInner) GetTime() int32 {
	if o == nil || IsNil(o.Time) {
		var ret int32
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInnerRunesLogInner) GetTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *MatchResponsePlayersInnerRunesLogInner) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given int32 and assigns it to the Time field.
func (o *MatchResponsePlayersInnerRunesLogInner) SetTime(v int32) {
	o.Time = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *MatchResponsePlayersInnerRunesLogInner) GetKey() int32 {
	if o == nil || IsNil(o.Key) {
		var ret int32
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePlayersInnerRunesLogInner) GetKeyOk() (*int32, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *MatchResponsePlayersInnerRunesLogInner) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given int32 and assigns it to the Key field.
func (o *MatchResponsePlayersInnerRunesLogInner) SetKey(v int32) {
	o.Key = &v
}

func (o MatchResponsePlayersInnerRunesLogInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchResponsePlayersInnerRunesLogInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	return toSerialize, nil
}

type NullableMatchResponsePlayersInnerRunesLogInner struct {
	value *MatchResponsePlayersInnerRunesLogInner
	isSet bool
}

func (v NullableMatchResponsePlayersInnerRunesLogInner) Get() *MatchResponsePlayersInnerRunesLogInner {
	return v.value
}

func (v *NullableMatchResponsePlayersInnerRunesLogInner) Set(val *MatchResponsePlayersInnerRunesLogInner) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchResponsePlayersInnerRunesLogInner) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchResponsePlayersInnerRunesLogInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchResponsePlayersInnerRunesLogInner(val *MatchResponsePlayersInnerRunesLogInner) *NullableMatchResponsePlayersInnerRunesLogInner {
	return &NullableMatchResponsePlayersInnerRunesLogInner{value: val, isSet: true}
}

func (v NullableMatchResponsePlayersInnerRunesLogInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchResponsePlayersInnerRunesLogInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


