/*
OpenDota API

# Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  Without a key, you can make 2,000 free calls per day at a rate limit of 60 requests/minute. We also offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.     

API version: 25.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MatchObjectResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchObjectResponse{}

// MatchObjectResponse struct for MatchObjectResponse
type MatchObjectResponse struct {
	// The ID number of the match assigned by Valve
	MatchId *int32 `json:"match_id,omitempty"`
	// Duration of the game in seconds
	Duration *int32 `json:"duration,omitempty"`
	// The Unix timestamp at which the game started
	StartTime *int32 `json:"start_time,omitempty"`
	// The Radiant's team_id
	RadiantTeamId *int32 `json:"radiant_team_id,omitempty"`
	// The Radiant's team name
	RadiantName *string `json:"radiant_name,omitempty"`
	// The Dire's team_id
	DireTeamId *int32 `json:"dire_team_id,omitempty"`
	// The Dire's team name
	DireName *string `json:"dire_name,omitempty"`
	// Identifier for the league the match took place in
	Leagueid *int32 `json:"leagueid,omitempty"`
	// Name of league the match took place in
	LeagueName *string `json:"league_name,omitempty"`
	// Identifier for the series of the match
	SeriesId *int32 `json:"series_id,omitempty"`
	// Type of series the match was
	SeriesType *int32 `json:"series_type,omitempty"`
	// Number of kills the Radiant team had when the match ended
	RadiantScore *int32 `json:"radiant_score,omitempty"`
	// Number of kills the Dire team had when the match ended
	DireScore *int32 `json:"dire_score,omitempty"`
	// Boolean indicating whether Radiant won the match
	RadiantWin NullableBool `json:"radiant_win,omitempty"`
	// Whether the team/player/hero was on Radiant
	Radiant *bool `json:"radiant,omitempty"`
}

// NewMatchObjectResponse instantiates a new MatchObjectResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchObjectResponse() *MatchObjectResponse {
	this := MatchObjectResponse{}
	return &this
}

// NewMatchObjectResponseWithDefaults instantiates a new MatchObjectResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchObjectResponseWithDefaults() *MatchObjectResponse {
	this := MatchObjectResponse{}
	return &this
}

// GetMatchId returns the MatchId field value if set, zero value otherwise.
func (o *MatchObjectResponse) GetMatchId() int32 {
	if o == nil || IsNil(o.MatchId) {
		var ret int32
		return ret
	}
	return *o.MatchId
}

// GetMatchIdOk returns a tuple with the MatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchObjectResponse) GetMatchIdOk() (*int32, bool) {
	if o == nil || IsNil(o.MatchId) {
		return nil, false
	}
	return o.MatchId, true
}

// HasMatchId returns a boolean if a field has been set.
func (o *MatchObjectResponse) HasMatchId() bool {
	if o != nil && !IsNil(o.MatchId) {
		return true
	}

	return false
}

// SetMatchId gets a reference to the given int32 and assigns it to the MatchId field.
func (o *MatchObjectResponse) SetMatchId(v int32) {
	o.MatchId = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *MatchObjectResponse) GetDuration() int32 {
	if o == nil || IsNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchObjectResponse) GetDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *MatchObjectResponse) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *MatchObjectResponse) SetDuration(v int32) {
	o.Duration = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *MatchObjectResponse) GetStartTime() int32 {
	if o == nil || IsNil(o.StartTime) {
		var ret int32
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchObjectResponse) GetStartTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *MatchObjectResponse) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given int32 and assigns it to the StartTime field.
func (o *MatchObjectResponse) SetStartTime(v int32) {
	o.StartTime = &v
}

// GetRadiantTeamId returns the RadiantTeamId field value if set, zero value otherwise.
func (o *MatchObjectResponse) GetRadiantTeamId() int32 {
	if o == nil || IsNil(o.RadiantTeamId) {
		var ret int32
		return ret
	}
	return *o.RadiantTeamId
}

// GetRadiantTeamIdOk returns a tuple with the RadiantTeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchObjectResponse) GetRadiantTeamIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RadiantTeamId) {
		return nil, false
	}
	return o.RadiantTeamId, true
}

// HasRadiantTeamId returns a boolean if a field has been set.
func (o *MatchObjectResponse) HasRadiantTeamId() bool {
	if o != nil && !IsNil(o.RadiantTeamId) {
		return true
	}

	return false
}

// SetRadiantTeamId gets a reference to the given int32 and assigns it to the RadiantTeamId field.
func (o *MatchObjectResponse) SetRadiantTeamId(v int32) {
	o.RadiantTeamId = &v
}

// GetRadiantName returns the RadiantName field value if set, zero value otherwise.
func (o *MatchObjectResponse) GetRadiantName() string {
	if o == nil || IsNil(o.RadiantName) {
		var ret string
		return ret
	}
	return *o.RadiantName
}

// GetRadiantNameOk returns a tuple with the RadiantName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchObjectResponse) GetRadiantNameOk() (*string, bool) {
	if o == nil || IsNil(o.RadiantName) {
		return nil, false
	}
	return o.RadiantName, true
}

// HasRadiantName returns a boolean if a field has been set.
func (o *MatchObjectResponse) HasRadiantName() bool {
	if o != nil && !IsNil(o.RadiantName) {
		return true
	}

	return false
}

// SetRadiantName gets a reference to the given string and assigns it to the RadiantName field.
func (o *MatchObjectResponse) SetRadiantName(v string) {
	o.RadiantName = &v
}

// GetDireTeamId returns the DireTeamId field value if set, zero value otherwise.
func (o *MatchObjectResponse) GetDireTeamId() int32 {
	if o == nil || IsNil(o.DireTeamId) {
		var ret int32
		return ret
	}
	return *o.DireTeamId
}

// GetDireTeamIdOk returns a tuple with the DireTeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchObjectResponse) GetDireTeamIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DireTeamId) {
		return nil, false
	}
	return o.DireTeamId, true
}

// HasDireTeamId returns a boolean if a field has been set.
func (o *MatchObjectResponse) HasDireTeamId() bool {
	if o != nil && !IsNil(o.DireTeamId) {
		return true
	}

	return false
}

// SetDireTeamId gets a reference to the given int32 and assigns it to the DireTeamId field.
func (o *MatchObjectResponse) SetDireTeamId(v int32) {
	o.DireTeamId = &v
}

// GetDireName returns the DireName field value if set, zero value otherwise.
func (o *MatchObjectResponse) GetDireName() string {
	if o == nil || IsNil(o.DireName) {
		var ret string
		return ret
	}
	return *o.DireName
}

// GetDireNameOk returns a tuple with the DireName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchObjectResponse) GetDireNameOk() (*string, bool) {
	if o == nil || IsNil(o.DireName) {
		return nil, false
	}
	return o.DireName, true
}

// HasDireName returns a boolean if a field has been set.
func (o *MatchObjectResponse) HasDireName() bool {
	if o != nil && !IsNil(o.DireName) {
		return true
	}

	return false
}

// SetDireName gets a reference to the given string and assigns it to the DireName field.
func (o *MatchObjectResponse) SetDireName(v string) {
	o.DireName = &v
}

// GetLeagueid returns the Leagueid field value if set, zero value otherwise.
func (o *MatchObjectResponse) GetLeagueid() int32 {
	if o == nil || IsNil(o.Leagueid) {
		var ret int32
		return ret
	}
	return *o.Leagueid
}

// GetLeagueidOk returns a tuple with the Leagueid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchObjectResponse) GetLeagueidOk() (*int32, bool) {
	if o == nil || IsNil(o.Leagueid) {
		return nil, false
	}
	return o.Leagueid, true
}

// HasLeagueid returns a boolean if a field has been set.
func (o *MatchObjectResponse) HasLeagueid() bool {
	if o != nil && !IsNil(o.Leagueid) {
		return true
	}

	return false
}

// SetLeagueid gets a reference to the given int32 and assigns it to the Leagueid field.
func (o *MatchObjectResponse) SetLeagueid(v int32) {
	o.Leagueid = &v
}

// GetLeagueName returns the LeagueName field value if set, zero value otherwise.
func (o *MatchObjectResponse) GetLeagueName() string {
	if o == nil || IsNil(o.LeagueName) {
		var ret string
		return ret
	}
	return *o.LeagueName
}

// GetLeagueNameOk returns a tuple with the LeagueName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchObjectResponse) GetLeagueNameOk() (*string, bool) {
	if o == nil || IsNil(o.LeagueName) {
		return nil, false
	}
	return o.LeagueName, true
}

// HasLeagueName returns a boolean if a field has been set.
func (o *MatchObjectResponse) HasLeagueName() bool {
	if o != nil && !IsNil(o.LeagueName) {
		return true
	}

	return false
}

// SetLeagueName gets a reference to the given string and assigns it to the LeagueName field.
func (o *MatchObjectResponse) SetLeagueName(v string) {
	o.LeagueName = &v
}

// GetSeriesId returns the SeriesId field value if set, zero value otherwise.
func (o *MatchObjectResponse) GetSeriesId() int32 {
	if o == nil || IsNil(o.SeriesId) {
		var ret int32
		return ret
	}
	return *o.SeriesId
}

// GetSeriesIdOk returns a tuple with the SeriesId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchObjectResponse) GetSeriesIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SeriesId) {
		return nil, false
	}
	return o.SeriesId, true
}

// HasSeriesId returns a boolean if a field has been set.
func (o *MatchObjectResponse) HasSeriesId() bool {
	if o != nil && !IsNil(o.SeriesId) {
		return true
	}

	return false
}

// SetSeriesId gets a reference to the given int32 and assigns it to the SeriesId field.
func (o *MatchObjectResponse) SetSeriesId(v int32) {
	o.SeriesId = &v
}

// GetSeriesType returns the SeriesType field value if set, zero value otherwise.
func (o *MatchObjectResponse) GetSeriesType() int32 {
	if o == nil || IsNil(o.SeriesType) {
		var ret int32
		return ret
	}
	return *o.SeriesType
}

// GetSeriesTypeOk returns a tuple with the SeriesType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchObjectResponse) GetSeriesTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.SeriesType) {
		return nil, false
	}
	return o.SeriesType, true
}

// HasSeriesType returns a boolean if a field has been set.
func (o *MatchObjectResponse) HasSeriesType() bool {
	if o != nil && !IsNil(o.SeriesType) {
		return true
	}

	return false
}

// SetSeriesType gets a reference to the given int32 and assigns it to the SeriesType field.
func (o *MatchObjectResponse) SetSeriesType(v int32) {
	o.SeriesType = &v
}

// GetRadiantScore returns the RadiantScore field value if set, zero value otherwise.
func (o *MatchObjectResponse) GetRadiantScore() int32 {
	if o == nil || IsNil(o.RadiantScore) {
		var ret int32
		return ret
	}
	return *o.RadiantScore
}

// GetRadiantScoreOk returns a tuple with the RadiantScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchObjectResponse) GetRadiantScoreOk() (*int32, bool) {
	if o == nil || IsNil(o.RadiantScore) {
		return nil, false
	}
	return o.RadiantScore, true
}

// HasRadiantScore returns a boolean if a field has been set.
func (o *MatchObjectResponse) HasRadiantScore() bool {
	if o != nil && !IsNil(o.RadiantScore) {
		return true
	}

	return false
}

// SetRadiantScore gets a reference to the given int32 and assigns it to the RadiantScore field.
func (o *MatchObjectResponse) SetRadiantScore(v int32) {
	o.RadiantScore = &v
}

// GetDireScore returns the DireScore field value if set, zero value otherwise.
func (o *MatchObjectResponse) GetDireScore() int32 {
	if o == nil || IsNil(o.DireScore) {
		var ret int32
		return ret
	}
	return *o.DireScore
}

// GetDireScoreOk returns a tuple with the DireScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchObjectResponse) GetDireScoreOk() (*int32, bool) {
	if o == nil || IsNil(o.DireScore) {
		return nil, false
	}
	return o.DireScore, true
}

// HasDireScore returns a boolean if a field has been set.
func (o *MatchObjectResponse) HasDireScore() bool {
	if o != nil && !IsNil(o.DireScore) {
		return true
	}

	return false
}

// SetDireScore gets a reference to the given int32 and assigns it to the DireScore field.
func (o *MatchObjectResponse) SetDireScore(v int32) {
	o.DireScore = &v
}

// GetRadiantWin returns the RadiantWin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchObjectResponse) GetRadiantWin() bool {
	if o == nil || IsNil(o.RadiantWin.Get()) {
		var ret bool
		return ret
	}
	return *o.RadiantWin.Get()
}

// GetRadiantWinOk returns a tuple with the RadiantWin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchObjectResponse) GetRadiantWinOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RadiantWin.Get(), o.RadiantWin.IsSet()
}

// HasRadiantWin returns a boolean if a field has been set.
func (o *MatchObjectResponse) HasRadiantWin() bool {
	if o != nil && o.RadiantWin.IsSet() {
		return true
	}

	return false
}

// SetRadiantWin gets a reference to the given NullableBool and assigns it to the RadiantWin field.
func (o *MatchObjectResponse) SetRadiantWin(v bool) {
	o.RadiantWin.Set(&v)
}
// SetRadiantWinNil sets the value for RadiantWin to be an explicit nil
func (o *MatchObjectResponse) SetRadiantWinNil() {
	o.RadiantWin.Set(nil)
}

// UnsetRadiantWin ensures that no value is present for RadiantWin, not even an explicit nil
func (o *MatchObjectResponse) UnsetRadiantWin() {
	o.RadiantWin.Unset()
}

// GetRadiant returns the Radiant field value if set, zero value otherwise.
func (o *MatchObjectResponse) GetRadiant() bool {
	if o == nil || IsNil(o.Radiant) {
		var ret bool
		return ret
	}
	return *o.Radiant
}

// GetRadiantOk returns a tuple with the Radiant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchObjectResponse) GetRadiantOk() (*bool, bool) {
	if o == nil || IsNil(o.Radiant) {
		return nil, false
	}
	return o.Radiant, true
}

// HasRadiant returns a boolean if a field has been set.
func (o *MatchObjectResponse) HasRadiant() bool {
	if o != nil && !IsNil(o.Radiant) {
		return true
	}

	return false
}

// SetRadiant gets a reference to the given bool and assigns it to the Radiant field.
func (o *MatchObjectResponse) SetRadiant(v bool) {
	o.Radiant = &v
}

func (o MatchObjectResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchObjectResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MatchId) {
		toSerialize["match_id"] = o.MatchId
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	if !IsNil(o.RadiantTeamId) {
		toSerialize["radiant_team_id"] = o.RadiantTeamId
	}
	if !IsNil(o.RadiantName) {
		toSerialize["radiant_name"] = o.RadiantName
	}
	if !IsNil(o.DireTeamId) {
		toSerialize["dire_team_id"] = o.DireTeamId
	}
	if !IsNil(o.DireName) {
		toSerialize["dire_name"] = o.DireName
	}
	if !IsNil(o.Leagueid) {
		toSerialize["leagueid"] = o.Leagueid
	}
	if !IsNil(o.LeagueName) {
		toSerialize["league_name"] = o.LeagueName
	}
	if !IsNil(o.SeriesId) {
		toSerialize["series_id"] = o.SeriesId
	}
	if !IsNil(o.SeriesType) {
		toSerialize["series_type"] = o.SeriesType
	}
	if !IsNil(o.RadiantScore) {
		toSerialize["radiant_score"] = o.RadiantScore
	}
	if !IsNil(o.DireScore) {
		toSerialize["dire_score"] = o.DireScore
	}
	if o.RadiantWin.IsSet() {
		toSerialize["radiant_win"] = o.RadiantWin.Get()
	}
	if !IsNil(o.Radiant) {
		toSerialize["radiant"] = o.Radiant
	}
	return toSerialize, nil
}

type NullableMatchObjectResponse struct {
	value *MatchObjectResponse
	isSet bool
}

func (v NullableMatchObjectResponse) Get() *MatchObjectResponse {
	return v.value
}

func (v *NullableMatchObjectResponse) Set(val *MatchObjectResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchObjectResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchObjectResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchObjectResponse(val *MatchObjectResponse) *NullableMatchObjectResponse {
	return &NullableMatchObjectResponse{value: val, isSet: true}
}

func (v NullableMatchObjectResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchObjectResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


