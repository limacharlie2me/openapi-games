/*
OpenDota API

# Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  Without a key, you can make 2,000 free calls per day at a rate limit of 60 requests/minute. We also offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.     

API version: 25.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PlayerTotalsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlayerTotalsResponse{}

// PlayerTotalsResponse struct for PlayerTotalsResponse
type PlayerTotalsResponse struct {
	// field
	Field *string `json:"field,omitempty"`
	// number
	N *int32 `json:"n,omitempty"`
	// sum
	Sum *float32 `json:"sum,omitempty"`
}

// NewPlayerTotalsResponse instantiates a new PlayerTotalsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlayerTotalsResponse() *PlayerTotalsResponse {
	this := PlayerTotalsResponse{}
	return &this
}

// NewPlayerTotalsResponseWithDefaults instantiates a new PlayerTotalsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayerTotalsResponseWithDefaults() *PlayerTotalsResponse {
	this := PlayerTotalsResponse{}
	return &this
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *PlayerTotalsResponse) GetField() string {
	if o == nil || IsNil(o.Field) {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerTotalsResponse) GetFieldOk() (*string, bool) {
	if o == nil || IsNil(o.Field) {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *PlayerTotalsResponse) HasField() bool {
	if o != nil && !IsNil(o.Field) {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *PlayerTotalsResponse) SetField(v string) {
	o.Field = &v
}

// GetN returns the N field value if set, zero value otherwise.
func (o *PlayerTotalsResponse) GetN() int32 {
	if o == nil || IsNil(o.N) {
		var ret int32
		return ret
	}
	return *o.N
}

// GetNOk returns a tuple with the N field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerTotalsResponse) GetNOk() (*int32, bool) {
	if o == nil || IsNil(o.N) {
		return nil, false
	}
	return o.N, true
}

// HasN returns a boolean if a field has been set.
func (o *PlayerTotalsResponse) HasN() bool {
	if o != nil && !IsNil(o.N) {
		return true
	}

	return false
}

// SetN gets a reference to the given int32 and assigns it to the N field.
func (o *PlayerTotalsResponse) SetN(v int32) {
	o.N = &v
}

// GetSum returns the Sum field value if set, zero value otherwise.
func (o *PlayerTotalsResponse) GetSum() float32 {
	if o == nil || IsNil(o.Sum) {
		var ret float32
		return ret
	}
	return *o.Sum
}

// GetSumOk returns a tuple with the Sum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerTotalsResponse) GetSumOk() (*float32, bool) {
	if o == nil || IsNil(o.Sum) {
		return nil, false
	}
	return o.Sum, true
}

// HasSum returns a boolean if a field has been set.
func (o *PlayerTotalsResponse) HasSum() bool {
	if o != nil && !IsNil(o.Sum) {
		return true
	}

	return false
}

// SetSum gets a reference to the given float32 and assigns it to the Sum field.
func (o *PlayerTotalsResponse) SetSum(v float32) {
	o.Sum = &v
}

func (o PlayerTotalsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlayerTotalsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Field) {
		toSerialize["field"] = o.Field
	}
	if !IsNil(o.N) {
		toSerialize["n"] = o.N
	}
	if !IsNil(o.Sum) {
		toSerialize["sum"] = o.Sum
	}
	return toSerialize, nil
}

type NullablePlayerTotalsResponse struct {
	value *PlayerTotalsResponse
	isSet bool
}

func (v NullablePlayerTotalsResponse) Get() *PlayerTotalsResponse {
	return v.value
}

func (v *NullablePlayerTotalsResponse) Set(val *PlayerTotalsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayerTotalsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayerTotalsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayerTotalsResponse(val *PlayerTotalsResponse) *NullablePlayerTotalsResponse {
	return &NullablePlayerTotalsResponse{value: val, isSet: true}
}

func (v NullablePlayerTotalsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayerTotalsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


