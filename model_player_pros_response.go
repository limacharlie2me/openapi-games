/*
OpenDota API

# Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  Without a key, you can make 2,000 free calls per day at a rate limit of 60 requests/minute. We also offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.     

API version: 25.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the PlayerProsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlayerProsResponse{}

// PlayerProsResponse struct for PlayerProsResponse
type PlayerProsResponse struct {
	// The player account ID
	AccountId *int32 `json:"account_id,omitempty"`
	// name
	Name NullableString `json:"name,omitempty"`
	// country_code
	CountryCode *string `json:"country_code,omitempty"`
	// fantasy_role
	FantasyRole *int32 `json:"fantasy_role,omitempty"`
	// team_id
	TeamId *int32 `json:"team_id,omitempty"`
	// Team name
	TeamName NullableString `json:"team_name,omitempty"`
	// team_tag
	TeamTag NullableString `json:"team_tag,omitempty"`
	// is_locked
	IsLocked *bool `json:"is_locked,omitempty"`
	// is_pro
	IsPro *bool `json:"is_pro,omitempty"`
	// locked_until
	LockedUntil NullableInt32 `json:"locked_until,omitempty"`
	// steamid
	Steamid NullableString `json:"steamid,omitempty"`
	// avatar
	Avatar NullableString `json:"avatar,omitempty"`
	// avatarmedium
	Avatarmedium NullableString `json:"avatarmedium,omitempty"`
	// avatarfull
	Avatarfull NullableString `json:"avatarfull,omitempty"`
	// profileurl
	Profileurl NullableString `json:"profileurl,omitempty"`
	// last_login
	LastLogin NullableTime `json:"last_login,omitempty"`
	// full_history_time
	FullHistoryTime NullableTime `json:"full_history_time,omitempty"`
	// cheese
	Cheese NullableInt32 `json:"cheese,omitempty"`
	// fh_unavailable
	FhUnavailable NullableBool `json:"fh_unavailable,omitempty"`
	// loccountrycode
	Loccountrycode NullableString `json:"loccountrycode,omitempty"`
	// last_played
	LastPlayed NullableInt32 `json:"last_played,omitempty"`
	// win
	Win *int32 `json:"win,omitempty"`
	// games
	Games *int32 `json:"games,omitempty"`
	// with_win
	WithWin *int32 `json:"with_win,omitempty"`
	// with_games
	WithGames *int32 `json:"with_games,omitempty"`
	// against_win
	AgainstWin *int32 `json:"against_win,omitempty"`
	// against_games
	AgainstGames *int32 `json:"against_games,omitempty"`
	// with_gpm_sum
	WithGpmSum NullableInt32 `json:"with_gpm_sum,omitempty"`
	// with_xpm_sum
	WithXpmSum NullableInt32 `json:"with_xpm_sum,omitempty"`
}

// NewPlayerProsResponse instantiates a new PlayerProsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlayerProsResponse() *PlayerProsResponse {
	this := PlayerProsResponse{}
	return &this
}

// NewPlayerProsResponseWithDefaults instantiates a new PlayerProsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayerProsResponseWithDefaults() *PlayerProsResponse {
	this := PlayerProsResponse{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *PlayerProsResponse) GetAccountId() int32 {
	if o == nil || IsNil(o.AccountId) {
		var ret int32
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerProsResponse) GetAccountIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *PlayerProsResponse) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given int32 and assigns it to the AccountId field.
func (o *PlayerProsResponse) SetAccountId(v int32) {
	o.AccountId = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerProsResponse) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerProsResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *PlayerProsResponse) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *PlayerProsResponse) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *PlayerProsResponse) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *PlayerProsResponse) UnsetName() {
	o.Name.Unset()
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *PlayerProsResponse) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerProsResponse) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *PlayerProsResponse) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *PlayerProsResponse) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetFantasyRole returns the FantasyRole field value if set, zero value otherwise.
func (o *PlayerProsResponse) GetFantasyRole() int32 {
	if o == nil || IsNil(o.FantasyRole) {
		var ret int32
		return ret
	}
	return *o.FantasyRole
}

// GetFantasyRoleOk returns a tuple with the FantasyRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerProsResponse) GetFantasyRoleOk() (*int32, bool) {
	if o == nil || IsNil(o.FantasyRole) {
		return nil, false
	}
	return o.FantasyRole, true
}

// HasFantasyRole returns a boolean if a field has been set.
func (o *PlayerProsResponse) HasFantasyRole() bool {
	if o != nil && !IsNil(o.FantasyRole) {
		return true
	}

	return false
}

// SetFantasyRole gets a reference to the given int32 and assigns it to the FantasyRole field.
func (o *PlayerProsResponse) SetFantasyRole(v int32) {
	o.FantasyRole = &v
}

// GetTeamId returns the TeamId field value if set, zero value otherwise.
func (o *PlayerProsResponse) GetTeamId() int32 {
	if o == nil || IsNil(o.TeamId) {
		var ret int32
		return ret
	}
	return *o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerProsResponse) GetTeamIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TeamId) {
		return nil, false
	}
	return o.TeamId, true
}

// HasTeamId returns a boolean if a field has been set.
func (o *PlayerProsResponse) HasTeamId() bool {
	if o != nil && !IsNil(o.TeamId) {
		return true
	}

	return false
}

// SetTeamId gets a reference to the given int32 and assigns it to the TeamId field.
func (o *PlayerProsResponse) SetTeamId(v int32) {
	o.TeamId = &v
}

// GetTeamName returns the TeamName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerProsResponse) GetTeamName() string {
	if o == nil || IsNil(o.TeamName.Get()) {
		var ret string
		return ret
	}
	return *o.TeamName.Get()
}

// GetTeamNameOk returns a tuple with the TeamName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerProsResponse) GetTeamNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TeamName.Get(), o.TeamName.IsSet()
}

// HasTeamName returns a boolean if a field has been set.
func (o *PlayerProsResponse) HasTeamName() bool {
	if o != nil && o.TeamName.IsSet() {
		return true
	}

	return false
}

// SetTeamName gets a reference to the given NullableString and assigns it to the TeamName field.
func (o *PlayerProsResponse) SetTeamName(v string) {
	o.TeamName.Set(&v)
}
// SetTeamNameNil sets the value for TeamName to be an explicit nil
func (o *PlayerProsResponse) SetTeamNameNil() {
	o.TeamName.Set(nil)
}

// UnsetTeamName ensures that no value is present for TeamName, not even an explicit nil
func (o *PlayerProsResponse) UnsetTeamName() {
	o.TeamName.Unset()
}

// GetTeamTag returns the TeamTag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerProsResponse) GetTeamTag() string {
	if o == nil || IsNil(o.TeamTag.Get()) {
		var ret string
		return ret
	}
	return *o.TeamTag.Get()
}

// GetTeamTagOk returns a tuple with the TeamTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerProsResponse) GetTeamTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TeamTag.Get(), o.TeamTag.IsSet()
}

// HasTeamTag returns a boolean if a field has been set.
func (o *PlayerProsResponse) HasTeamTag() bool {
	if o != nil && o.TeamTag.IsSet() {
		return true
	}

	return false
}

// SetTeamTag gets a reference to the given NullableString and assigns it to the TeamTag field.
func (o *PlayerProsResponse) SetTeamTag(v string) {
	o.TeamTag.Set(&v)
}
// SetTeamTagNil sets the value for TeamTag to be an explicit nil
func (o *PlayerProsResponse) SetTeamTagNil() {
	o.TeamTag.Set(nil)
}

// UnsetTeamTag ensures that no value is present for TeamTag, not even an explicit nil
func (o *PlayerProsResponse) UnsetTeamTag() {
	o.TeamTag.Unset()
}

// GetIsLocked returns the IsLocked field value if set, zero value otherwise.
func (o *PlayerProsResponse) GetIsLocked() bool {
	if o == nil || IsNil(o.IsLocked) {
		var ret bool
		return ret
	}
	return *o.IsLocked
}

// GetIsLockedOk returns a tuple with the IsLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerProsResponse) GetIsLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLocked) {
		return nil, false
	}
	return o.IsLocked, true
}

// HasIsLocked returns a boolean if a field has been set.
func (o *PlayerProsResponse) HasIsLocked() bool {
	if o != nil && !IsNil(o.IsLocked) {
		return true
	}

	return false
}

// SetIsLocked gets a reference to the given bool and assigns it to the IsLocked field.
func (o *PlayerProsResponse) SetIsLocked(v bool) {
	o.IsLocked = &v
}

// GetIsPro returns the IsPro field value if set, zero value otherwise.
func (o *PlayerProsResponse) GetIsPro() bool {
	if o == nil || IsNil(o.IsPro) {
		var ret bool
		return ret
	}
	return *o.IsPro
}

// GetIsProOk returns a tuple with the IsPro field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerProsResponse) GetIsProOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPro) {
		return nil, false
	}
	return o.IsPro, true
}

// HasIsPro returns a boolean if a field has been set.
func (o *PlayerProsResponse) HasIsPro() bool {
	if o != nil && !IsNil(o.IsPro) {
		return true
	}

	return false
}

// SetIsPro gets a reference to the given bool and assigns it to the IsPro field.
func (o *PlayerProsResponse) SetIsPro(v bool) {
	o.IsPro = &v
}

// GetLockedUntil returns the LockedUntil field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerProsResponse) GetLockedUntil() int32 {
	if o == nil || IsNil(o.LockedUntil.Get()) {
		var ret int32
		return ret
	}
	return *o.LockedUntil.Get()
}

// GetLockedUntilOk returns a tuple with the LockedUntil field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerProsResponse) GetLockedUntilOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LockedUntil.Get(), o.LockedUntil.IsSet()
}

// HasLockedUntil returns a boolean if a field has been set.
func (o *PlayerProsResponse) HasLockedUntil() bool {
	if o != nil && o.LockedUntil.IsSet() {
		return true
	}

	return false
}

// SetLockedUntil gets a reference to the given NullableInt32 and assigns it to the LockedUntil field.
func (o *PlayerProsResponse) SetLockedUntil(v int32) {
	o.LockedUntil.Set(&v)
}
// SetLockedUntilNil sets the value for LockedUntil to be an explicit nil
func (o *PlayerProsResponse) SetLockedUntilNil() {
	o.LockedUntil.Set(nil)
}

// UnsetLockedUntil ensures that no value is present for LockedUntil, not even an explicit nil
func (o *PlayerProsResponse) UnsetLockedUntil() {
	o.LockedUntil.Unset()
}

// GetSteamid returns the Steamid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerProsResponse) GetSteamid() string {
	if o == nil || IsNil(o.Steamid.Get()) {
		var ret string
		return ret
	}
	return *o.Steamid.Get()
}

// GetSteamidOk returns a tuple with the Steamid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerProsResponse) GetSteamidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Steamid.Get(), o.Steamid.IsSet()
}

// HasSteamid returns a boolean if a field has been set.
func (o *PlayerProsResponse) HasSteamid() bool {
	if o != nil && o.Steamid.IsSet() {
		return true
	}

	return false
}

// SetSteamid gets a reference to the given NullableString and assigns it to the Steamid field.
func (o *PlayerProsResponse) SetSteamid(v string) {
	o.Steamid.Set(&v)
}
// SetSteamidNil sets the value for Steamid to be an explicit nil
func (o *PlayerProsResponse) SetSteamidNil() {
	o.Steamid.Set(nil)
}

// UnsetSteamid ensures that no value is present for Steamid, not even an explicit nil
func (o *PlayerProsResponse) UnsetSteamid() {
	o.Steamid.Unset()
}

// GetAvatar returns the Avatar field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerProsResponse) GetAvatar() string {
	if o == nil || IsNil(o.Avatar.Get()) {
		var ret string
		return ret
	}
	return *o.Avatar.Get()
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerProsResponse) GetAvatarOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Avatar.Get(), o.Avatar.IsSet()
}

// HasAvatar returns a boolean if a field has been set.
func (o *PlayerProsResponse) HasAvatar() bool {
	if o != nil && o.Avatar.IsSet() {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given NullableString and assigns it to the Avatar field.
func (o *PlayerProsResponse) SetAvatar(v string) {
	o.Avatar.Set(&v)
}
// SetAvatarNil sets the value for Avatar to be an explicit nil
func (o *PlayerProsResponse) SetAvatarNil() {
	o.Avatar.Set(nil)
}

// UnsetAvatar ensures that no value is present for Avatar, not even an explicit nil
func (o *PlayerProsResponse) UnsetAvatar() {
	o.Avatar.Unset()
}

// GetAvatarmedium returns the Avatarmedium field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerProsResponse) GetAvatarmedium() string {
	if o == nil || IsNil(o.Avatarmedium.Get()) {
		var ret string
		return ret
	}
	return *o.Avatarmedium.Get()
}

// GetAvatarmediumOk returns a tuple with the Avatarmedium field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerProsResponse) GetAvatarmediumOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Avatarmedium.Get(), o.Avatarmedium.IsSet()
}

// HasAvatarmedium returns a boolean if a field has been set.
func (o *PlayerProsResponse) HasAvatarmedium() bool {
	if o != nil && o.Avatarmedium.IsSet() {
		return true
	}

	return false
}

// SetAvatarmedium gets a reference to the given NullableString and assigns it to the Avatarmedium field.
func (o *PlayerProsResponse) SetAvatarmedium(v string) {
	o.Avatarmedium.Set(&v)
}
// SetAvatarmediumNil sets the value for Avatarmedium to be an explicit nil
func (o *PlayerProsResponse) SetAvatarmediumNil() {
	o.Avatarmedium.Set(nil)
}

// UnsetAvatarmedium ensures that no value is present for Avatarmedium, not even an explicit nil
func (o *PlayerProsResponse) UnsetAvatarmedium() {
	o.Avatarmedium.Unset()
}

// GetAvatarfull returns the Avatarfull field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerProsResponse) GetAvatarfull() string {
	if o == nil || IsNil(o.Avatarfull.Get()) {
		var ret string
		return ret
	}
	return *o.Avatarfull.Get()
}

// GetAvatarfullOk returns a tuple with the Avatarfull field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerProsResponse) GetAvatarfullOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Avatarfull.Get(), o.Avatarfull.IsSet()
}

// HasAvatarfull returns a boolean if a field has been set.
func (o *PlayerProsResponse) HasAvatarfull() bool {
	if o != nil && o.Avatarfull.IsSet() {
		return true
	}

	return false
}

// SetAvatarfull gets a reference to the given NullableString and assigns it to the Avatarfull field.
func (o *PlayerProsResponse) SetAvatarfull(v string) {
	o.Avatarfull.Set(&v)
}
// SetAvatarfullNil sets the value for Avatarfull to be an explicit nil
func (o *PlayerProsResponse) SetAvatarfullNil() {
	o.Avatarfull.Set(nil)
}

// UnsetAvatarfull ensures that no value is present for Avatarfull, not even an explicit nil
func (o *PlayerProsResponse) UnsetAvatarfull() {
	o.Avatarfull.Unset()
}

// GetProfileurl returns the Profileurl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerProsResponse) GetProfileurl() string {
	if o == nil || IsNil(o.Profileurl.Get()) {
		var ret string
		return ret
	}
	return *o.Profileurl.Get()
}

// GetProfileurlOk returns a tuple with the Profileurl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerProsResponse) GetProfileurlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Profileurl.Get(), o.Profileurl.IsSet()
}

// HasProfileurl returns a boolean if a field has been set.
func (o *PlayerProsResponse) HasProfileurl() bool {
	if o != nil && o.Profileurl.IsSet() {
		return true
	}

	return false
}

// SetProfileurl gets a reference to the given NullableString and assigns it to the Profileurl field.
func (o *PlayerProsResponse) SetProfileurl(v string) {
	o.Profileurl.Set(&v)
}
// SetProfileurlNil sets the value for Profileurl to be an explicit nil
func (o *PlayerProsResponse) SetProfileurlNil() {
	o.Profileurl.Set(nil)
}

// UnsetProfileurl ensures that no value is present for Profileurl, not even an explicit nil
func (o *PlayerProsResponse) UnsetProfileurl() {
	o.Profileurl.Unset()
}

// GetLastLogin returns the LastLogin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerProsResponse) GetLastLogin() time.Time {
	if o == nil || IsNil(o.LastLogin.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastLogin.Get()
}

// GetLastLoginOk returns a tuple with the LastLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerProsResponse) GetLastLoginOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastLogin.Get(), o.LastLogin.IsSet()
}

// HasLastLogin returns a boolean if a field has been set.
func (o *PlayerProsResponse) HasLastLogin() bool {
	if o != nil && o.LastLogin.IsSet() {
		return true
	}

	return false
}

// SetLastLogin gets a reference to the given NullableTime and assigns it to the LastLogin field.
func (o *PlayerProsResponse) SetLastLogin(v time.Time) {
	o.LastLogin.Set(&v)
}
// SetLastLoginNil sets the value for LastLogin to be an explicit nil
func (o *PlayerProsResponse) SetLastLoginNil() {
	o.LastLogin.Set(nil)
}

// UnsetLastLogin ensures that no value is present for LastLogin, not even an explicit nil
func (o *PlayerProsResponse) UnsetLastLogin() {
	o.LastLogin.Unset()
}

// GetFullHistoryTime returns the FullHistoryTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerProsResponse) GetFullHistoryTime() time.Time {
	if o == nil || IsNil(o.FullHistoryTime.Get()) {
		var ret time.Time
		return ret
	}
	return *o.FullHistoryTime.Get()
}

// GetFullHistoryTimeOk returns a tuple with the FullHistoryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerProsResponse) GetFullHistoryTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.FullHistoryTime.Get(), o.FullHistoryTime.IsSet()
}

// HasFullHistoryTime returns a boolean if a field has been set.
func (o *PlayerProsResponse) HasFullHistoryTime() bool {
	if o != nil && o.FullHistoryTime.IsSet() {
		return true
	}

	return false
}

// SetFullHistoryTime gets a reference to the given NullableTime and assigns it to the FullHistoryTime field.
func (o *PlayerProsResponse) SetFullHistoryTime(v time.Time) {
	o.FullHistoryTime.Set(&v)
}
// SetFullHistoryTimeNil sets the value for FullHistoryTime to be an explicit nil
func (o *PlayerProsResponse) SetFullHistoryTimeNil() {
	o.FullHistoryTime.Set(nil)
}

// UnsetFullHistoryTime ensures that no value is present for FullHistoryTime, not even an explicit nil
func (o *PlayerProsResponse) UnsetFullHistoryTime() {
	o.FullHistoryTime.Unset()
}

// GetCheese returns the Cheese field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerProsResponse) GetCheese() int32 {
	if o == nil || IsNil(o.Cheese.Get()) {
		var ret int32
		return ret
	}
	return *o.Cheese.Get()
}

// GetCheeseOk returns a tuple with the Cheese field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerProsResponse) GetCheeseOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cheese.Get(), o.Cheese.IsSet()
}

// HasCheese returns a boolean if a field has been set.
func (o *PlayerProsResponse) HasCheese() bool {
	if o != nil && o.Cheese.IsSet() {
		return true
	}

	return false
}

// SetCheese gets a reference to the given NullableInt32 and assigns it to the Cheese field.
func (o *PlayerProsResponse) SetCheese(v int32) {
	o.Cheese.Set(&v)
}
// SetCheeseNil sets the value for Cheese to be an explicit nil
func (o *PlayerProsResponse) SetCheeseNil() {
	o.Cheese.Set(nil)
}

// UnsetCheese ensures that no value is present for Cheese, not even an explicit nil
func (o *PlayerProsResponse) UnsetCheese() {
	o.Cheese.Unset()
}

// GetFhUnavailable returns the FhUnavailable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerProsResponse) GetFhUnavailable() bool {
	if o == nil || IsNil(o.FhUnavailable.Get()) {
		var ret bool
		return ret
	}
	return *o.FhUnavailable.Get()
}

// GetFhUnavailableOk returns a tuple with the FhUnavailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerProsResponse) GetFhUnavailableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.FhUnavailable.Get(), o.FhUnavailable.IsSet()
}

// HasFhUnavailable returns a boolean if a field has been set.
func (o *PlayerProsResponse) HasFhUnavailable() bool {
	if o != nil && o.FhUnavailable.IsSet() {
		return true
	}

	return false
}

// SetFhUnavailable gets a reference to the given NullableBool and assigns it to the FhUnavailable field.
func (o *PlayerProsResponse) SetFhUnavailable(v bool) {
	o.FhUnavailable.Set(&v)
}
// SetFhUnavailableNil sets the value for FhUnavailable to be an explicit nil
func (o *PlayerProsResponse) SetFhUnavailableNil() {
	o.FhUnavailable.Set(nil)
}

// UnsetFhUnavailable ensures that no value is present for FhUnavailable, not even an explicit nil
func (o *PlayerProsResponse) UnsetFhUnavailable() {
	o.FhUnavailable.Unset()
}

// GetLoccountrycode returns the Loccountrycode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerProsResponse) GetLoccountrycode() string {
	if o == nil || IsNil(o.Loccountrycode.Get()) {
		var ret string
		return ret
	}
	return *o.Loccountrycode.Get()
}

// GetLoccountrycodeOk returns a tuple with the Loccountrycode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerProsResponse) GetLoccountrycodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Loccountrycode.Get(), o.Loccountrycode.IsSet()
}

// HasLoccountrycode returns a boolean if a field has been set.
func (o *PlayerProsResponse) HasLoccountrycode() bool {
	if o != nil && o.Loccountrycode.IsSet() {
		return true
	}

	return false
}

// SetLoccountrycode gets a reference to the given NullableString and assigns it to the Loccountrycode field.
func (o *PlayerProsResponse) SetLoccountrycode(v string) {
	o.Loccountrycode.Set(&v)
}
// SetLoccountrycodeNil sets the value for Loccountrycode to be an explicit nil
func (o *PlayerProsResponse) SetLoccountrycodeNil() {
	o.Loccountrycode.Set(nil)
}

// UnsetLoccountrycode ensures that no value is present for Loccountrycode, not even an explicit nil
func (o *PlayerProsResponse) UnsetLoccountrycode() {
	o.Loccountrycode.Unset()
}

// GetLastPlayed returns the LastPlayed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerProsResponse) GetLastPlayed() int32 {
	if o == nil || IsNil(o.LastPlayed.Get()) {
		var ret int32
		return ret
	}
	return *o.LastPlayed.Get()
}

// GetLastPlayedOk returns a tuple with the LastPlayed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerProsResponse) GetLastPlayedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastPlayed.Get(), o.LastPlayed.IsSet()
}

// HasLastPlayed returns a boolean if a field has been set.
func (o *PlayerProsResponse) HasLastPlayed() bool {
	if o != nil && o.LastPlayed.IsSet() {
		return true
	}

	return false
}

// SetLastPlayed gets a reference to the given NullableInt32 and assigns it to the LastPlayed field.
func (o *PlayerProsResponse) SetLastPlayed(v int32) {
	o.LastPlayed.Set(&v)
}
// SetLastPlayedNil sets the value for LastPlayed to be an explicit nil
func (o *PlayerProsResponse) SetLastPlayedNil() {
	o.LastPlayed.Set(nil)
}

// UnsetLastPlayed ensures that no value is present for LastPlayed, not even an explicit nil
func (o *PlayerProsResponse) UnsetLastPlayed() {
	o.LastPlayed.Unset()
}

// GetWin returns the Win field value if set, zero value otherwise.
func (o *PlayerProsResponse) GetWin() int32 {
	if o == nil || IsNil(o.Win) {
		var ret int32
		return ret
	}
	return *o.Win
}

// GetWinOk returns a tuple with the Win field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerProsResponse) GetWinOk() (*int32, bool) {
	if o == nil || IsNil(o.Win) {
		return nil, false
	}
	return o.Win, true
}

// HasWin returns a boolean if a field has been set.
func (o *PlayerProsResponse) HasWin() bool {
	if o != nil && !IsNil(o.Win) {
		return true
	}

	return false
}

// SetWin gets a reference to the given int32 and assigns it to the Win field.
func (o *PlayerProsResponse) SetWin(v int32) {
	o.Win = &v
}

// GetGames returns the Games field value if set, zero value otherwise.
func (o *PlayerProsResponse) GetGames() int32 {
	if o == nil || IsNil(o.Games) {
		var ret int32
		return ret
	}
	return *o.Games
}

// GetGamesOk returns a tuple with the Games field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerProsResponse) GetGamesOk() (*int32, bool) {
	if o == nil || IsNil(o.Games) {
		return nil, false
	}
	return o.Games, true
}

// HasGames returns a boolean if a field has been set.
func (o *PlayerProsResponse) HasGames() bool {
	if o != nil && !IsNil(o.Games) {
		return true
	}

	return false
}

// SetGames gets a reference to the given int32 and assigns it to the Games field.
func (o *PlayerProsResponse) SetGames(v int32) {
	o.Games = &v
}

// GetWithWin returns the WithWin field value if set, zero value otherwise.
func (o *PlayerProsResponse) GetWithWin() int32 {
	if o == nil || IsNil(o.WithWin) {
		var ret int32
		return ret
	}
	return *o.WithWin
}

// GetWithWinOk returns a tuple with the WithWin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerProsResponse) GetWithWinOk() (*int32, bool) {
	if o == nil || IsNil(o.WithWin) {
		return nil, false
	}
	return o.WithWin, true
}

// HasWithWin returns a boolean if a field has been set.
func (o *PlayerProsResponse) HasWithWin() bool {
	if o != nil && !IsNil(o.WithWin) {
		return true
	}

	return false
}

// SetWithWin gets a reference to the given int32 and assigns it to the WithWin field.
func (o *PlayerProsResponse) SetWithWin(v int32) {
	o.WithWin = &v
}

// GetWithGames returns the WithGames field value if set, zero value otherwise.
func (o *PlayerProsResponse) GetWithGames() int32 {
	if o == nil || IsNil(o.WithGames) {
		var ret int32
		return ret
	}
	return *o.WithGames
}

// GetWithGamesOk returns a tuple with the WithGames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerProsResponse) GetWithGamesOk() (*int32, bool) {
	if o == nil || IsNil(o.WithGames) {
		return nil, false
	}
	return o.WithGames, true
}

// HasWithGames returns a boolean if a field has been set.
func (o *PlayerProsResponse) HasWithGames() bool {
	if o != nil && !IsNil(o.WithGames) {
		return true
	}

	return false
}

// SetWithGames gets a reference to the given int32 and assigns it to the WithGames field.
func (o *PlayerProsResponse) SetWithGames(v int32) {
	o.WithGames = &v
}

// GetAgainstWin returns the AgainstWin field value if set, zero value otherwise.
func (o *PlayerProsResponse) GetAgainstWin() int32 {
	if o == nil || IsNil(o.AgainstWin) {
		var ret int32
		return ret
	}
	return *o.AgainstWin
}

// GetAgainstWinOk returns a tuple with the AgainstWin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerProsResponse) GetAgainstWinOk() (*int32, bool) {
	if o == nil || IsNil(o.AgainstWin) {
		return nil, false
	}
	return o.AgainstWin, true
}

// HasAgainstWin returns a boolean if a field has been set.
func (o *PlayerProsResponse) HasAgainstWin() bool {
	if o != nil && !IsNil(o.AgainstWin) {
		return true
	}

	return false
}

// SetAgainstWin gets a reference to the given int32 and assigns it to the AgainstWin field.
func (o *PlayerProsResponse) SetAgainstWin(v int32) {
	o.AgainstWin = &v
}

// GetAgainstGames returns the AgainstGames field value if set, zero value otherwise.
func (o *PlayerProsResponse) GetAgainstGames() int32 {
	if o == nil || IsNil(o.AgainstGames) {
		var ret int32
		return ret
	}
	return *o.AgainstGames
}

// GetAgainstGamesOk returns a tuple with the AgainstGames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerProsResponse) GetAgainstGamesOk() (*int32, bool) {
	if o == nil || IsNil(o.AgainstGames) {
		return nil, false
	}
	return o.AgainstGames, true
}

// HasAgainstGames returns a boolean if a field has been set.
func (o *PlayerProsResponse) HasAgainstGames() bool {
	if o != nil && !IsNil(o.AgainstGames) {
		return true
	}

	return false
}

// SetAgainstGames gets a reference to the given int32 and assigns it to the AgainstGames field.
func (o *PlayerProsResponse) SetAgainstGames(v int32) {
	o.AgainstGames = &v
}

// GetWithGpmSum returns the WithGpmSum field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerProsResponse) GetWithGpmSum() int32 {
	if o == nil || IsNil(o.WithGpmSum.Get()) {
		var ret int32
		return ret
	}
	return *o.WithGpmSum.Get()
}

// GetWithGpmSumOk returns a tuple with the WithGpmSum field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerProsResponse) GetWithGpmSumOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithGpmSum.Get(), o.WithGpmSum.IsSet()
}

// HasWithGpmSum returns a boolean if a field has been set.
func (o *PlayerProsResponse) HasWithGpmSum() bool {
	if o != nil && o.WithGpmSum.IsSet() {
		return true
	}

	return false
}

// SetWithGpmSum gets a reference to the given NullableInt32 and assigns it to the WithGpmSum field.
func (o *PlayerProsResponse) SetWithGpmSum(v int32) {
	o.WithGpmSum.Set(&v)
}
// SetWithGpmSumNil sets the value for WithGpmSum to be an explicit nil
func (o *PlayerProsResponse) SetWithGpmSumNil() {
	o.WithGpmSum.Set(nil)
}

// UnsetWithGpmSum ensures that no value is present for WithGpmSum, not even an explicit nil
func (o *PlayerProsResponse) UnsetWithGpmSum() {
	o.WithGpmSum.Unset()
}

// GetWithXpmSum returns the WithXpmSum field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerProsResponse) GetWithXpmSum() int32 {
	if o == nil || IsNil(o.WithXpmSum.Get()) {
		var ret int32
		return ret
	}
	return *o.WithXpmSum.Get()
}

// GetWithXpmSumOk returns a tuple with the WithXpmSum field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerProsResponse) GetWithXpmSumOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithXpmSum.Get(), o.WithXpmSum.IsSet()
}

// HasWithXpmSum returns a boolean if a field has been set.
func (o *PlayerProsResponse) HasWithXpmSum() bool {
	if o != nil && o.WithXpmSum.IsSet() {
		return true
	}

	return false
}

// SetWithXpmSum gets a reference to the given NullableInt32 and assigns it to the WithXpmSum field.
func (o *PlayerProsResponse) SetWithXpmSum(v int32) {
	o.WithXpmSum.Set(&v)
}
// SetWithXpmSumNil sets the value for WithXpmSum to be an explicit nil
func (o *PlayerProsResponse) SetWithXpmSumNil() {
	o.WithXpmSum.Set(nil)
}

// UnsetWithXpmSum ensures that no value is present for WithXpmSum, not even an explicit nil
func (o *PlayerProsResponse) UnsetWithXpmSum() {
	o.WithXpmSum.Unset()
}

func (o PlayerProsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlayerProsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.CountryCode) {
		toSerialize["country_code"] = o.CountryCode
	}
	if !IsNil(o.FantasyRole) {
		toSerialize["fantasy_role"] = o.FantasyRole
	}
	if !IsNil(o.TeamId) {
		toSerialize["team_id"] = o.TeamId
	}
	if o.TeamName.IsSet() {
		toSerialize["team_name"] = o.TeamName.Get()
	}
	if o.TeamTag.IsSet() {
		toSerialize["team_tag"] = o.TeamTag.Get()
	}
	if !IsNil(o.IsLocked) {
		toSerialize["is_locked"] = o.IsLocked
	}
	if !IsNil(o.IsPro) {
		toSerialize["is_pro"] = o.IsPro
	}
	if o.LockedUntil.IsSet() {
		toSerialize["locked_until"] = o.LockedUntil.Get()
	}
	if o.Steamid.IsSet() {
		toSerialize["steamid"] = o.Steamid.Get()
	}
	if o.Avatar.IsSet() {
		toSerialize["avatar"] = o.Avatar.Get()
	}
	if o.Avatarmedium.IsSet() {
		toSerialize["avatarmedium"] = o.Avatarmedium.Get()
	}
	if o.Avatarfull.IsSet() {
		toSerialize["avatarfull"] = o.Avatarfull.Get()
	}
	if o.Profileurl.IsSet() {
		toSerialize["profileurl"] = o.Profileurl.Get()
	}
	if o.LastLogin.IsSet() {
		toSerialize["last_login"] = o.LastLogin.Get()
	}
	if o.FullHistoryTime.IsSet() {
		toSerialize["full_history_time"] = o.FullHistoryTime.Get()
	}
	if o.Cheese.IsSet() {
		toSerialize["cheese"] = o.Cheese.Get()
	}
	if o.FhUnavailable.IsSet() {
		toSerialize["fh_unavailable"] = o.FhUnavailable.Get()
	}
	if o.Loccountrycode.IsSet() {
		toSerialize["loccountrycode"] = o.Loccountrycode.Get()
	}
	if o.LastPlayed.IsSet() {
		toSerialize["last_played"] = o.LastPlayed.Get()
	}
	if !IsNil(o.Win) {
		toSerialize["win"] = o.Win
	}
	if !IsNil(o.Games) {
		toSerialize["games"] = o.Games
	}
	if !IsNil(o.WithWin) {
		toSerialize["with_win"] = o.WithWin
	}
	if !IsNil(o.WithGames) {
		toSerialize["with_games"] = o.WithGames
	}
	if !IsNil(o.AgainstWin) {
		toSerialize["against_win"] = o.AgainstWin
	}
	if !IsNil(o.AgainstGames) {
		toSerialize["against_games"] = o.AgainstGames
	}
	if o.WithGpmSum.IsSet() {
		toSerialize["with_gpm_sum"] = o.WithGpmSum.Get()
	}
	if o.WithXpmSum.IsSet() {
		toSerialize["with_xpm_sum"] = o.WithXpmSum.Get()
	}
	return toSerialize, nil
}

type NullablePlayerProsResponse struct {
	value *PlayerProsResponse
	isSet bool
}

func (v NullablePlayerProsResponse) Get() *PlayerProsResponse {
	return v.value
}

func (v *NullablePlayerProsResponse) Set(val *PlayerProsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayerProsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayerProsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayerProsResponse(val *PlayerProsResponse) *NullablePlayerProsResponse {
	return &NullablePlayerProsResponse{value: val, isSet: true}
}

func (v NullablePlayerProsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayerProsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


