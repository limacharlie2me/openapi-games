/*
OpenDota API

# Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  Without a key, you can make 2,000 free calls per day at a rate limit of 60 requests/minute. We also offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.     

API version: 25.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PlayerWardMapResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlayerWardMapResponse{}

// PlayerWardMapResponse struct for PlayerWardMapResponse
type PlayerWardMapResponse struct {
	// obs
	Obs map[string]interface{} `json:"obs,omitempty"`
	// sen
	Sen map[string]interface{} `json:"sen,omitempty"`
}

// NewPlayerWardMapResponse instantiates a new PlayerWardMapResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlayerWardMapResponse() *PlayerWardMapResponse {
	this := PlayerWardMapResponse{}
	return &this
}

// NewPlayerWardMapResponseWithDefaults instantiates a new PlayerWardMapResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayerWardMapResponseWithDefaults() *PlayerWardMapResponse {
	this := PlayerWardMapResponse{}
	return &this
}

// GetObs returns the Obs field value if set, zero value otherwise.
func (o *PlayerWardMapResponse) GetObs() map[string]interface{} {
	if o == nil || IsNil(o.Obs) {
		var ret map[string]interface{}
		return ret
	}
	return o.Obs
}

// GetObsOk returns a tuple with the Obs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerWardMapResponse) GetObsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Obs) {
		return map[string]interface{}{}, false
	}
	return o.Obs, true
}

// HasObs returns a boolean if a field has been set.
func (o *PlayerWardMapResponse) HasObs() bool {
	if o != nil && !IsNil(o.Obs) {
		return true
	}

	return false
}

// SetObs gets a reference to the given map[string]interface{} and assigns it to the Obs field.
func (o *PlayerWardMapResponse) SetObs(v map[string]interface{}) {
	o.Obs = v
}

// GetSen returns the Sen field value if set, zero value otherwise.
func (o *PlayerWardMapResponse) GetSen() map[string]interface{} {
	if o == nil || IsNil(o.Sen) {
		var ret map[string]interface{}
		return ret
	}
	return o.Sen
}

// GetSenOk returns a tuple with the Sen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerWardMapResponse) GetSenOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Sen) {
		return map[string]interface{}{}, false
	}
	return o.Sen, true
}

// HasSen returns a boolean if a field has been set.
func (o *PlayerWardMapResponse) HasSen() bool {
	if o != nil && !IsNil(o.Sen) {
		return true
	}

	return false
}

// SetSen gets a reference to the given map[string]interface{} and assigns it to the Sen field.
func (o *PlayerWardMapResponse) SetSen(v map[string]interface{}) {
	o.Sen = v
}

func (o PlayerWardMapResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlayerWardMapResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Obs) {
		toSerialize["obs"] = o.Obs
	}
	if !IsNil(o.Sen) {
		toSerialize["sen"] = o.Sen
	}
	return toSerialize, nil
}

type NullablePlayerWardMapResponse struct {
	value *PlayerWardMapResponse
	isSet bool
}

func (v NullablePlayerWardMapResponse) Get() *PlayerWardMapResponse {
	return v.value
}

func (v *NullablePlayerWardMapResponse) Set(val *PlayerWardMapResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayerWardMapResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayerWardMapResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayerWardMapResponse(val *PlayerWardMapResponse) *NullablePlayerWardMapResponse {
	return &NullablePlayerWardMapResponse{value: val, isSet: true}
}

func (v NullablePlayerWardMapResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayerWardMapResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


