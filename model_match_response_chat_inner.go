/*
OpenDota API

# Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  Without a key, you can make 2,000 free calls per day at a rate limit of 60 requests/minute. We also offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.     

API version: 25.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MatchResponseChatInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchResponseChatInner{}

// MatchResponseChatInner struct for MatchResponseChatInner
type MatchResponseChatInner struct {
	// Time in seconds at which the message was said
	Time *int32 `json:"time,omitempty"`
	// Name of the player who sent the message
	Unit *string `json:"unit,omitempty"`
	// The message the player sent
	Key *string `json:"key,omitempty"`
	// slot
	Slot *int32 `json:"slot,omitempty"`
	// Which slot the player is in. 0-127 are Radiant, 128-255 are Dire
	PlayerSlot NullableInt32 `json:"player_slot,omitempty"`
}

// NewMatchResponseChatInner instantiates a new MatchResponseChatInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchResponseChatInner() *MatchResponseChatInner {
	this := MatchResponseChatInner{}
	return &this
}

// NewMatchResponseChatInnerWithDefaults instantiates a new MatchResponseChatInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchResponseChatInnerWithDefaults() *MatchResponseChatInner {
	this := MatchResponseChatInner{}
	return &this
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *MatchResponseChatInner) GetTime() int32 {
	if o == nil || IsNil(o.Time) {
		var ret int32
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponseChatInner) GetTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *MatchResponseChatInner) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given int32 and assigns it to the Time field.
func (o *MatchResponseChatInner) SetTime(v int32) {
	o.Time = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *MatchResponseChatInner) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponseChatInner) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *MatchResponseChatInner) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *MatchResponseChatInner) SetUnit(v string) {
	o.Unit = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *MatchResponseChatInner) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponseChatInner) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *MatchResponseChatInner) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *MatchResponseChatInner) SetKey(v string) {
	o.Key = &v
}

// GetSlot returns the Slot field value if set, zero value otherwise.
func (o *MatchResponseChatInner) GetSlot() int32 {
	if o == nil || IsNil(o.Slot) {
		var ret int32
		return ret
	}
	return *o.Slot
}

// GetSlotOk returns a tuple with the Slot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponseChatInner) GetSlotOk() (*int32, bool) {
	if o == nil || IsNil(o.Slot) {
		return nil, false
	}
	return o.Slot, true
}

// HasSlot returns a boolean if a field has been set.
func (o *MatchResponseChatInner) HasSlot() bool {
	if o != nil && !IsNil(o.Slot) {
		return true
	}

	return false
}

// SetSlot gets a reference to the given int32 and assigns it to the Slot field.
func (o *MatchResponseChatInner) SetSlot(v int32) {
	o.Slot = &v
}

// GetPlayerSlot returns the PlayerSlot field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchResponseChatInner) GetPlayerSlot() int32 {
	if o == nil || IsNil(o.PlayerSlot.Get()) {
		var ret int32
		return ret
	}
	return *o.PlayerSlot.Get()
}

// GetPlayerSlotOk returns a tuple with the PlayerSlot field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchResponseChatInner) GetPlayerSlotOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlayerSlot.Get(), o.PlayerSlot.IsSet()
}

// HasPlayerSlot returns a boolean if a field has been set.
func (o *MatchResponseChatInner) HasPlayerSlot() bool {
	if o != nil && o.PlayerSlot.IsSet() {
		return true
	}

	return false
}

// SetPlayerSlot gets a reference to the given NullableInt32 and assigns it to the PlayerSlot field.
func (o *MatchResponseChatInner) SetPlayerSlot(v int32) {
	o.PlayerSlot.Set(&v)
}
// SetPlayerSlotNil sets the value for PlayerSlot to be an explicit nil
func (o *MatchResponseChatInner) SetPlayerSlotNil() {
	o.PlayerSlot.Set(nil)
}

// UnsetPlayerSlot ensures that no value is present for PlayerSlot, not even an explicit nil
func (o *MatchResponseChatInner) UnsetPlayerSlot() {
	o.PlayerSlot.Unset()
}

func (o MatchResponseChatInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchResponseChatInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Slot) {
		toSerialize["slot"] = o.Slot
	}
	if o.PlayerSlot.IsSet() {
		toSerialize["player_slot"] = o.PlayerSlot.Get()
	}
	return toSerialize, nil
}

type NullableMatchResponseChatInner struct {
	value *MatchResponseChatInner
	isSet bool
}

func (v NullableMatchResponseChatInner) Get() *MatchResponseChatInner {
	return v.value
}

func (v *NullableMatchResponseChatInner) Set(val *MatchResponseChatInner) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchResponseChatInner) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchResponseChatInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchResponseChatInner(val *MatchResponseChatInner) *NullableMatchResponseChatInner {
	return &NullableMatchResponseChatInner{value: val, isSet: true}
}

func (v NullableMatchResponseChatInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchResponseChatInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


