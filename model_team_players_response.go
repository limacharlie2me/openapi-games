/*
OpenDota API

# Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  Without a key, you can make 2,000 free calls per day at a rate limit of 60 requests/minute. We also offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.     

API version: 25.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TeamPlayersResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamPlayersResponse{}

// TeamPlayersResponse struct for TeamPlayersResponse
type TeamPlayersResponse struct {
	// The player account ID
	AccountId *int32 `json:"account_id,omitempty"`
	// name
	Name NullableString `json:"name,omitempty"`
	// Number of games played
	GamesPlayed *int32 `json:"games_played,omitempty"`
	// Number of wins
	Wins *int32 `json:"wins,omitempty"`
	// If this player is on the current roster
	IsCurrentTeamMember *bool `json:"is_current_team_member,omitempty"`
}

// NewTeamPlayersResponse instantiates a new TeamPlayersResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamPlayersResponse() *TeamPlayersResponse {
	this := TeamPlayersResponse{}
	return &this
}

// NewTeamPlayersResponseWithDefaults instantiates a new TeamPlayersResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamPlayersResponseWithDefaults() *TeamPlayersResponse {
	this := TeamPlayersResponse{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *TeamPlayersResponse) GetAccountId() int32 {
	if o == nil || IsNil(o.AccountId) {
		var ret int32
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamPlayersResponse) GetAccountIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *TeamPlayersResponse) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given int32 and assigns it to the AccountId field.
func (o *TeamPlayersResponse) SetAccountId(v int32) {
	o.AccountId = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TeamPlayersResponse) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TeamPlayersResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *TeamPlayersResponse) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *TeamPlayersResponse) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *TeamPlayersResponse) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *TeamPlayersResponse) UnsetName() {
	o.Name.Unset()
}

// GetGamesPlayed returns the GamesPlayed field value if set, zero value otherwise.
func (o *TeamPlayersResponse) GetGamesPlayed() int32 {
	if o == nil || IsNil(o.GamesPlayed) {
		var ret int32
		return ret
	}
	return *o.GamesPlayed
}

// GetGamesPlayedOk returns a tuple with the GamesPlayed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamPlayersResponse) GetGamesPlayedOk() (*int32, bool) {
	if o == nil || IsNil(o.GamesPlayed) {
		return nil, false
	}
	return o.GamesPlayed, true
}

// HasGamesPlayed returns a boolean if a field has been set.
func (o *TeamPlayersResponse) HasGamesPlayed() bool {
	if o != nil && !IsNil(o.GamesPlayed) {
		return true
	}

	return false
}

// SetGamesPlayed gets a reference to the given int32 and assigns it to the GamesPlayed field.
func (o *TeamPlayersResponse) SetGamesPlayed(v int32) {
	o.GamesPlayed = &v
}

// GetWins returns the Wins field value if set, zero value otherwise.
func (o *TeamPlayersResponse) GetWins() int32 {
	if o == nil || IsNil(o.Wins) {
		var ret int32
		return ret
	}
	return *o.Wins
}

// GetWinsOk returns a tuple with the Wins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamPlayersResponse) GetWinsOk() (*int32, bool) {
	if o == nil || IsNil(o.Wins) {
		return nil, false
	}
	return o.Wins, true
}

// HasWins returns a boolean if a field has been set.
func (o *TeamPlayersResponse) HasWins() bool {
	if o != nil && !IsNil(o.Wins) {
		return true
	}

	return false
}

// SetWins gets a reference to the given int32 and assigns it to the Wins field.
func (o *TeamPlayersResponse) SetWins(v int32) {
	o.Wins = &v
}

// GetIsCurrentTeamMember returns the IsCurrentTeamMember field value if set, zero value otherwise.
func (o *TeamPlayersResponse) GetIsCurrentTeamMember() bool {
	if o == nil || IsNil(o.IsCurrentTeamMember) {
		var ret bool
		return ret
	}
	return *o.IsCurrentTeamMember
}

// GetIsCurrentTeamMemberOk returns a tuple with the IsCurrentTeamMember field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamPlayersResponse) GetIsCurrentTeamMemberOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCurrentTeamMember) {
		return nil, false
	}
	return o.IsCurrentTeamMember, true
}

// HasIsCurrentTeamMember returns a boolean if a field has been set.
func (o *TeamPlayersResponse) HasIsCurrentTeamMember() bool {
	if o != nil && !IsNil(o.IsCurrentTeamMember) {
		return true
	}

	return false
}

// SetIsCurrentTeamMember gets a reference to the given bool and assigns it to the IsCurrentTeamMember field.
func (o *TeamPlayersResponse) SetIsCurrentTeamMember(v bool) {
	o.IsCurrentTeamMember = &v
}

func (o TeamPlayersResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamPlayersResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.GamesPlayed) {
		toSerialize["games_played"] = o.GamesPlayed
	}
	if !IsNil(o.Wins) {
		toSerialize["wins"] = o.Wins
	}
	if !IsNil(o.IsCurrentTeamMember) {
		toSerialize["is_current_team_member"] = o.IsCurrentTeamMember
	}
	return toSerialize, nil
}

type NullableTeamPlayersResponse struct {
	value *TeamPlayersResponse
	isSet bool
}

func (v NullableTeamPlayersResponse) Get() *TeamPlayersResponse {
	return v.value
}

func (v *NullableTeamPlayersResponse) Set(val *TeamPlayersResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamPlayersResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamPlayersResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamPlayersResponse(val *TeamPlayersResponse) *NullableTeamPlayersResponse {
	return &NullableTeamPlayersResponse{value: val, isSet: true}
}

func (v NullableTeamPlayersResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamPlayersResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


