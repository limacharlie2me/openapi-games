/*
OpenDota API

# Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  Without a key, you can make 2,000 free calls per day at a rate limit of 60 requests/minute. We also offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.     

API version: 25.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PlayerPeersResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlayerPeersResponse{}

// PlayerPeersResponse struct for PlayerPeersResponse
type PlayerPeersResponse struct {
	// The player account ID
	AccountId *int32 `json:"account_id,omitempty"`
	// last_played
	LastPlayed *int32 `json:"last_played,omitempty"`
	// win
	Win *int32 `json:"win,omitempty"`
	// games
	Games *int32 `json:"games,omitempty"`
	// with_win
	WithWin *int32 `json:"with_win,omitempty"`
	// with_games
	WithGames *int32 `json:"with_games,omitempty"`
	// against_win
	AgainstWin *int32 `json:"against_win,omitempty"`
	// against_games
	AgainstGames *int32 `json:"against_games,omitempty"`
	// with_gpm_sum
	WithGpmSum *int32 `json:"with_gpm_sum,omitempty"`
	// with_xpm_sum
	WithXpmSum *int32 `json:"with_xpm_sum,omitempty"`
	// Player's Steam name
	Personaname NullableString `json:"personaname,omitempty"`
	// name
	Name NullableString `json:"name,omitempty"`
	// is_contributor
	IsContributor *bool `json:"is_contributor,omitempty"`
	// is_subscriber
	IsSubscriber *bool `json:"is_subscriber,omitempty"`
	// last_login
	LastLogin NullableString `json:"last_login,omitempty"`
	// avatar
	Avatar NullableString `json:"avatar,omitempty"`
	// avatarfull
	Avatarfull NullableString `json:"avatarfull,omitempty"`
}

// NewPlayerPeersResponse instantiates a new PlayerPeersResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlayerPeersResponse() *PlayerPeersResponse {
	this := PlayerPeersResponse{}
	return &this
}

// NewPlayerPeersResponseWithDefaults instantiates a new PlayerPeersResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayerPeersResponseWithDefaults() *PlayerPeersResponse {
	this := PlayerPeersResponse{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *PlayerPeersResponse) GetAccountId() int32 {
	if o == nil || IsNil(o.AccountId) {
		var ret int32
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerPeersResponse) GetAccountIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *PlayerPeersResponse) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given int32 and assigns it to the AccountId field.
func (o *PlayerPeersResponse) SetAccountId(v int32) {
	o.AccountId = &v
}

// GetLastPlayed returns the LastPlayed field value if set, zero value otherwise.
func (o *PlayerPeersResponse) GetLastPlayed() int32 {
	if o == nil || IsNil(o.LastPlayed) {
		var ret int32
		return ret
	}
	return *o.LastPlayed
}

// GetLastPlayedOk returns a tuple with the LastPlayed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerPeersResponse) GetLastPlayedOk() (*int32, bool) {
	if o == nil || IsNil(o.LastPlayed) {
		return nil, false
	}
	return o.LastPlayed, true
}

// HasLastPlayed returns a boolean if a field has been set.
func (o *PlayerPeersResponse) HasLastPlayed() bool {
	if o != nil && !IsNil(o.LastPlayed) {
		return true
	}

	return false
}

// SetLastPlayed gets a reference to the given int32 and assigns it to the LastPlayed field.
func (o *PlayerPeersResponse) SetLastPlayed(v int32) {
	o.LastPlayed = &v
}

// GetWin returns the Win field value if set, zero value otherwise.
func (o *PlayerPeersResponse) GetWin() int32 {
	if o == nil || IsNil(o.Win) {
		var ret int32
		return ret
	}
	return *o.Win
}

// GetWinOk returns a tuple with the Win field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerPeersResponse) GetWinOk() (*int32, bool) {
	if o == nil || IsNil(o.Win) {
		return nil, false
	}
	return o.Win, true
}

// HasWin returns a boolean if a field has been set.
func (o *PlayerPeersResponse) HasWin() bool {
	if o != nil && !IsNil(o.Win) {
		return true
	}

	return false
}

// SetWin gets a reference to the given int32 and assigns it to the Win field.
func (o *PlayerPeersResponse) SetWin(v int32) {
	o.Win = &v
}

// GetGames returns the Games field value if set, zero value otherwise.
func (o *PlayerPeersResponse) GetGames() int32 {
	if o == nil || IsNil(o.Games) {
		var ret int32
		return ret
	}
	return *o.Games
}

// GetGamesOk returns a tuple with the Games field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerPeersResponse) GetGamesOk() (*int32, bool) {
	if o == nil || IsNil(o.Games) {
		return nil, false
	}
	return o.Games, true
}

// HasGames returns a boolean if a field has been set.
func (o *PlayerPeersResponse) HasGames() bool {
	if o != nil && !IsNil(o.Games) {
		return true
	}

	return false
}

// SetGames gets a reference to the given int32 and assigns it to the Games field.
func (o *PlayerPeersResponse) SetGames(v int32) {
	o.Games = &v
}

// GetWithWin returns the WithWin field value if set, zero value otherwise.
func (o *PlayerPeersResponse) GetWithWin() int32 {
	if o == nil || IsNil(o.WithWin) {
		var ret int32
		return ret
	}
	return *o.WithWin
}

// GetWithWinOk returns a tuple with the WithWin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerPeersResponse) GetWithWinOk() (*int32, bool) {
	if o == nil || IsNil(o.WithWin) {
		return nil, false
	}
	return o.WithWin, true
}

// HasWithWin returns a boolean if a field has been set.
func (o *PlayerPeersResponse) HasWithWin() bool {
	if o != nil && !IsNil(o.WithWin) {
		return true
	}

	return false
}

// SetWithWin gets a reference to the given int32 and assigns it to the WithWin field.
func (o *PlayerPeersResponse) SetWithWin(v int32) {
	o.WithWin = &v
}

// GetWithGames returns the WithGames field value if set, zero value otherwise.
func (o *PlayerPeersResponse) GetWithGames() int32 {
	if o == nil || IsNil(o.WithGames) {
		var ret int32
		return ret
	}
	return *o.WithGames
}

// GetWithGamesOk returns a tuple with the WithGames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerPeersResponse) GetWithGamesOk() (*int32, bool) {
	if o == nil || IsNil(o.WithGames) {
		return nil, false
	}
	return o.WithGames, true
}

// HasWithGames returns a boolean if a field has been set.
func (o *PlayerPeersResponse) HasWithGames() bool {
	if o != nil && !IsNil(o.WithGames) {
		return true
	}

	return false
}

// SetWithGames gets a reference to the given int32 and assigns it to the WithGames field.
func (o *PlayerPeersResponse) SetWithGames(v int32) {
	o.WithGames = &v
}

// GetAgainstWin returns the AgainstWin field value if set, zero value otherwise.
func (o *PlayerPeersResponse) GetAgainstWin() int32 {
	if o == nil || IsNil(o.AgainstWin) {
		var ret int32
		return ret
	}
	return *o.AgainstWin
}

// GetAgainstWinOk returns a tuple with the AgainstWin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerPeersResponse) GetAgainstWinOk() (*int32, bool) {
	if o == nil || IsNil(o.AgainstWin) {
		return nil, false
	}
	return o.AgainstWin, true
}

// HasAgainstWin returns a boolean if a field has been set.
func (o *PlayerPeersResponse) HasAgainstWin() bool {
	if o != nil && !IsNil(o.AgainstWin) {
		return true
	}

	return false
}

// SetAgainstWin gets a reference to the given int32 and assigns it to the AgainstWin field.
func (o *PlayerPeersResponse) SetAgainstWin(v int32) {
	o.AgainstWin = &v
}

// GetAgainstGames returns the AgainstGames field value if set, zero value otherwise.
func (o *PlayerPeersResponse) GetAgainstGames() int32 {
	if o == nil || IsNil(o.AgainstGames) {
		var ret int32
		return ret
	}
	return *o.AgainstGames
}

// GetAgainstGamesOk returns a tuple with the AgainstGames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerPeersResponse) GetAgainstGamesOk() (*int32, bool) {
	if o == nil || IsNil(o.AgainstGames) {
		return nil, false
	}
	return o.AgainstGames, true
}

// HasAgainstGames returns a boolean if a field has been set.
func (o *PlayerPeersResponse) HasAgainstGames() bool {
	if o != nil && !IsNil(o.AgainstGames) {
		return true
	}

	return false
}

// SetAgainstGames gets a reference to the given int32 and assigns it to the AgainstGames field.
func (o *PlayerPeersResponse) SetAgainstGames(v int32) {
	o.AgainstGames = &v
}

// GetWithGpmSum returns the WithGpmSum field value if set, zero value otherwise.
func (o *PlayerPeersResponse) GetWithGpmSum() int32 {
	if o == nil || IsNil(o.WithGpmSum) {
		var ret int32
		return ret
	}
	return *o.WithGpmSum
}

// GetWithGpmSumOk returns a tuple with the WithGpmSum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerPeersResponse) GetWithGpmSumOk() (*int32, bool) {
	if o == nil || IsNil(o.WithGpmSum) {
		return nil, false
	}
	return o.WithGpmSum, true
}

// HasWithGpmSum returns a boolean if a field has been set.
func (o *PlayerPeersResponse) HasWithGpmSum() bool {
	if o != nil && !IsNil(o.WithGpmSum) {
		return true
	}

	return false
}

// SetWithGpmSum gets a reference to the given int32 and assigns it to the WithGpmSum field.
func (o *PlayerPeersResponse) SetWithGpmSum(v int32) {
	o.WithGpmSum = &v
}

// GetWithXpmSum returns the WithXpmSum field value if set, zero value otherwise.
func (o *PlayerPeersResponse) GetWithXpmSum() int32 {
	if o == nil || IsNil(o.WithXpmSum) {
		var ret int32
		return ret
	}
	return *o.WithXpmSum
}

// GetWithXpmSumOk returns a tuple with the WithXpmSum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerPeersResponse) GetWithXpmSumOk() (*int32, bool) {
	if o == nil || IsNil(o.WithXpmSum) {
		return nil, false
	}
	return o.WithXpmSum, true
}

// HasWithXpmSum returns a boolean if a field has been set.
func (o *PlayerPeersResponse) HasWithXpmSum() bool {
	if o != nil && !IsNil(o.WithXpmSum) {
		return true
	}

	return false
}

// SetWithXpmSum gets a reference to the given int32 and assigns it to the WithXpmSum field.
func (o *PlayerPeersResponse) SetWithXpmSum(v int32) {
	o.WithXpmSum = &v
}

// GetPersonaname returns the Personaname field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerPeersResponse) GetPersonaname() string {
	if o == nil || IsNil(o.Personaname.Get()) {
		var ret string
		return ret
	}
	return *o.Personaname.Get()
}

// GetPersonanameOk returns a tuple with the Personaname field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerPeersResponse) GetPersonanameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Personaname.Get(), o.Personaname.IsSet()
}

// HasPersonaname returns a boolean if a field has been set.
func (o *PlayerPeersResponse) HasPersonaname() bool {
	if o != nil && o.Personaname.IsSet() {
		return true
	}

	return false
}

// SetPersonaname gets a reference to the given NullableString and assigns it to the Personaname field.
func (o *PlayerPeersResponse) SetPersonaname(v string) {
	o.Personaname.Set(&v)
}
// SetPersonanameNil sets the value for Personaname to be an explicit nil
func (o *PlayerPeersResponse) SetPersonanameNil() {
	o.Personaname.Set(nil)
}

// UnsetPersonaname ensures that no value is present for Personaname, not even an explicit nil
func (o *PlayerPeersResponse) UnsetPersonaname() {
	o.Personaname.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerPeersResponse) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerPeersResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *PlayerPeersResponse) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *PlayerPeersResponse) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *PlayerPeersResponse) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *PlayerPeersResponse) UnsetName() {
	o.Name.Unset()
}

// GetIsContributor returns the IsContributor field value if set, zero value otherwise.
func (o *PlayerPeersResponse) GetIsContributor() bool {
	if o == nil || IsNil(o.IsContributor) {
		var ret bool
		return ret
	}
	return *o.IsContributor
}

// GetIsContributorOk returns a tuple with the IsContributor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerPeersResponse) GetIsContributorOk() (*bool, bool) {
	if o == nil || IsNil(o.IsContributor) {
		return nil, false
	}
	return o.IsContributor, true
}

// HasIsContributor returns a boolean if a field has been set.
func (o *PlayerPeersResponse) HasIsContributor() bool {
	if o != nil && !IsNil(o.IsContributor) {
		return true
	}

	return false
}

// SetIsContributor gets a reference to the given bool and assigns it to the IsContributor field.
func (o *PlayerPeersResponse) SetIsContributor(v bool) {
	o.IsContributor = &v
}

// GetIsSubscriber returns the IsSubscriber field value if set, zero value otherwise.
func (o *PlayerPeersResponse) GetIsSubscriber() bool {
	if o == nil || IsNil(o.IsSubscriber) {
		var ret bool
		return ret
	}
	return *o.IsSubscriber
}

// GetIsSubscriberOk returns a tuple with the IsSubscriber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerPeersResponse) GetIsSubscriberOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSubscriber) {
		return nil, false
	}
	return o.IsSubscriber, true
}

// HasIsSubscriber returns a boolean if a field has been set.
func (o *PlayerPeersResponse) HasIsSubscriber() bool {
	if o != nil && !IsNil(o.IsSubscriber) {
		return true
	}

	return false
}

// SetIsSubscriber gets a reference to the given bool and assigns it to the IsSubscriber field.
func (o *PlayerPeersResponse) SetIsSubscriber(v bool) {
	o.IsSubscriber = &v
}

// GetLastLogin returns the LastLogin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerPeersResponse) GetLastLogin() string {
	if o == nil || IsNil(o.LastLogin.Get()) {
		var ret string
		return ret
	}
	return *o.LastLogin.Get()
}

// GetLastLoginOk returns a tuple with the LastLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerPeersResponse) GetLastLoginOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastLogin.Get(), o.LastLogin.IsSet()
}

// HasLastLogin returns a boolean if a field has been set.
func (o *PlayerPeersResponse) HasLastLogin() bool {
	if o != nil && o.LastLogin.IsSet() {
		return true
	}

	return false
}

// SetLastLogin gets a reference to the given NullableString and assigns it to the LastLogin field.
func (o *PlayerPeersResponse) SetLastLogin(v string) {
	o.LastLogin.Set(&v)
}
// SetLastLoginNil sets the value for LastLogin to be an explicit nil
func (o *PlayerPeersResponse) SetLastLoginNil() {
	o.LastLogin.Set(nil)
}

// UnsetLastLogin ensures that no value is present for LastLogin, not even an explicit nil
func (o *PlayerPeersResponse) UnsetLastLogin() {
	o.LastLogin.Unset()
}

// GetAvatar returns the Avatar field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerPeersResponse) GetAvatar() string {
	if o == nil || IsNil(o.Avatar.Get()) {
		var ret string
		return ret
	}
	return *o.Avatar.Get()
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerPeersResponse) GetAvatarOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Avatar.Get(), o.Avatar.IsSet()
}

// HasAvatar returns a boolean if a field has been set.
func (o *PlayerPeersResponse) HasAvatar() bool {
	if o != nil && o.Avatar.IsSet() {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given NullableString and assigns it to the Avatar field.
func (o *PlayerPeersResponse) SetAvatar(v string) {
	o.Avatar.Set(&v)
}
// SetAvatarNil sets the value for Avatar to be an explicit nil
func (o *PlayerPeersResponse) SetAvatarNil() {
	o.Avatar.Set(nil)
}

// UnsetAvatar ensures that no value is present for Avatar, not even an explicit nil
func (o *PlayerPeersResponse) UnsetAvatar() {
	o.Avatar.Unset()
}

// GetAvatarfull returns the Avatarfull field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerPeersResponse) GetAvatarfull() string {
	if o == nil || IsNil(o.Avatarfull.Get()) {
		var ret string
		return ret
	}
	return *o.Avatarfull.Get()
}

// GetAvatarfullOk returns a tuple with the Avatarfull field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerPeersResponse) GetAvatarfullOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Avatarfull.Get(), o.Avatarfull.IsSet()
}

// HasAvatarfull returns a boolean if a field has been set.
func (o *PlayerPeersResponse) HasAvatarfull() bool {
	if o != nil && o.Avatarfull.IsSet() {
		return true
	}

	return false
}

// SetAvatarfull gets a reference to the given NullableString and assigns it to the Avatarfull field.
func (o *PlayerPeersResponse) SetAvatarfull(v string) {
	o.Avatarfull.Set(&v)
}
// SetAvatarfullNil sets the value for Avatarfull to be an explicit nil
func (o *PlayerPeersResponse) SetAvatarfullNil() {
	o.Avatarfull.Set(nil)
}

// UnsetAvatarfull ensures that no value is present for Avatarfull, not even an explicit nil
func (o *PlayerPeersResponse) UnsetAvatarfull() {
	o.Avatarfull.Unset()
}

func (o PlayerPeersResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlayerPeersResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	if !IsNil(o.LastPlayed) {
		toSerialize["last_played"] = o.LastPlayed
	}
	if !IsNil(o.Win) {
		toSerialize["win"] = o.Win
	}
	if !IsNil(o.Games) {
		toSerialize["games"] = o.Games
	}
	if !IsNil(o.WithWin) {
		toSerialize["with_win"] = o.WithWin
	}
	if !IsNil(o.WithGames) {
		toSerialize["with_games"] = o.WithGames
	}
	if !IsNil(o.AgainstWin) {
		toSerialize["against_win"] = o.AgainstWin
	}
	if !IsNil(o.AgainstGames) {
		toSerialize["against_games"] = o.AgainstGames
	}
	if !IsNil(o.WithGpmSum) {
		toSerialize["with_gpm_sum"] = o.WithGpmSum
	}
	if !IsNil(o.WithXpmSum) {
		toSerialize["with_xpm_sum"] = o.WithXpmSum
	}
	if o.Personaname.IsSet() {
		toSerialize["personaname"] = o.Personaname.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.IsContributor) {
		toSerialize["is_contributor"] = o.IsContributor
	}
	if !IsNil(o.IsSubscriber) {
		toSerialize["is_subscriber"] = o.IsSubscriber
	}
	if o.LastLogin.IsSet() {
		toSerialize["last_login"] = o.LastLogin.Get()
	}
	if o.Avatar.IsSet() {
		toSerialize["avatar"] = o.Avatar.Get()
	}
	if o.Avatarfull.IsSet() {
		toSerialize["avatarfull"] = o.Avatarfull.Get()
	}
	return toSerialize, nil
}

type NullablePlayerPeersResponse struct {
	value *PlayerPeersResponse
	isSet bool
}

func (v NullablePlayerPeersResponse) Get() *PlayerPeersResponse {
	return v.value
}

func (v *NullablePlayerPeersResponse) Set(val *PlayerPeersResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayerPeersResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayerPeersResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayerPeersResponse(val *PlayerPeersResponse) *NullablePlayerPeersResponse {
	return &NullablePlayerPeersResponse{value: val, isSet: true}
}

func (v NullablePlayerPeersResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayerPeersResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


