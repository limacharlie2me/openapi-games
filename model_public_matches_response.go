/*
OpenDota API

# Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  Without a key, you can make 2,000 free calls per day at a rate limit of 60 requests/minute. We also offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.     

API version: 25.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PublicMatchesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicMatchesResponse{}

// PublicMatchesResponse struct for PublicMatchesResponse
type PublicMatchesResponse struct {
	// The ID number of the match assigned by Valve
	MatchId *int32 `json:"match_id,omitempty"`
	// match_seq_num
	MatchSeqNum *int32 `json:"match_seq_num,omitempty"`
	// Boolean indicating whether Radiant won the match
	RadiantWin NullableBool `json:"radiant_win,omitempty"`
	// The Unix timestamp at which the game started
	StartTime *int32 `json:"start_time,omitempty"`
	// Duration of the game in seconds
	Duration *int32 `json:"duration,omitempty"`
	LobbyType *int32 `json:"lobby_type,omitempty"`
	GameMode *int32 `json:"game_mode,omitempty"`
	AvgRankTier *int32 `json:"avg_rank_tier,omitempty"`
	NumRankTier *int32 `json:"num_rank_tier,omitempty"`
	Cluster *int32 `json:"cluster,omitempty"`
	// radiant_team
	RadiantTeam []int32 `json:"radiant_team,omitempty"`
	// dire_team
	DireTeam []int32 `json:"dire_team,omitempty"`
}

// NewPublicMatchesResponse instantiates a new PublicMatchesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicMatchesResponse() *PublicMatchesResponse {
	this := PublicMatchesResponse{}
	return &this
}

// NewPublicMatchesResponseWithDefaults instantiates a new PublicMatchesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicMatchesResponseWithDefaults() *PublicMatchesResponse {
	this := PublicMatchesResponse{}
	return &this
}

// GetMatchId returns the MatchId field value if set, zero value otherwise.
func (o *PublicMatchesResponse) GetMatchId() int32 {
	if o == nil || IsNil(o.MatchId) {
		var ret int32
		return ret
	}
	return *o.MatchId
}

// GetMatchIdOk returns a tuple with the MatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicMatchesResponse) GetMatchIdOk() (*int32, bool) {
	if o == nil || IsNil(o.MatchId) {
		return nil, false
	}
	return o.MatchId, true
}

// HasMatchId returns a boolean if a field has been set.
func (o *PublicMatchesResponse) HasMatchId() bool {
	if o != nil && !IsNil(o.MatchId) {
		return true
	}

	return false
}

// SetMatchId gets a reference to the given int32 and assigns it to the MatchId field.
func (o *PublicMatchesResponse) SetMatchId(v int32) {
	o.MatchId = &v
}

// GetMatchSeqNum returns the MatchSeqNum field value if set, zero value otherwise.
func (o *PublicMatchesResponse) GetMatchSeqNum() int32 {
	if o == nil || IsNil(o.MatchSeqNum) {
		var ret int32
		return ret
	}
	return *o.MatchSeqNum
}

// GetMatchSeqNumOk returns a tuple with the MatchSeqNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicMatchesResponse) GetMatchSeqNumOk() (*int32, bool) {
	if o == nil || IsNil(o.MatchSeqNum) {
		return nil, false
	}
	return o.MatchSeqNum, true
}

// HasMatchSeqNum returns a boolean if a field has been set.
func (o *PublicMatchesResponse) HasMatchSeqNum() bool {
	if o != nil && !IsNil(o.MatchSeqNum) {
		return true
	}

	return false
}

// SetMatchSeqNum gets a reference to the given int32 and assigns it to the MatchSeqNum field.
func (o *PublicMatchesResponse) SetMatchSeqNum(v int32) {
	o.MatchSeqNum = &v
}

// GetRadiantWin returns the RadiantWin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicMatchesResponse) GetRadiantWin() bool {
	if o == nil || IsNil(o.RadiantWin.Get()) {
		var ret bool
		return ret
	}
	return *o.RadiantWin.Get()
}

// GetRadiantWinOk returns a tuple with the RadiantWin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicMatchesResponse) GetRadiantWinOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RadiantWin.Get(), o.RadiantWin.IsSet()
}

// HasRadiantWin returns a boolean if a field has been set.
func (o *PublicMatchesResponse) HasRadiantWin() bool {
	if o != nil && o.RadiantWin.IsSet() {
		return true
	}

	return false
}

// SetRadiantWin gets a reference to the given NullableBool and assigns it to the RadiantWin field.
func (o *PublicMatchesResponse) SetRadiantWin(v bool) {
	o.RadiantWin.Set(&v)
}
// SetRadiantWinNil sets the value for RadiantWin to be an explicit nil
func (o *PublicMatchesResponse) SetRadiantWinNil() {
	o.RadiantWin.Set(nil)
}

// UnsetRadiantWin ensures that no value is present for RadiantWin, not even an explicit nil
func (o *PublicMatchesResponse) UnsetRadiantWin() {
	o.RadiantWin.Unset()
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *PublicMatchesResponse) GetStartTime() int32 {
	if o == nil || IsNil(o.StartTime) {
		var ret int32
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicMatchesResponse) GetStartTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *PublicMatchesResponse) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given int32 and assigns it to the StartTime field.
func (o *PublicMatchesResponse) SetStartTime(v int32) {
	o.StartTime = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *PublicMatchesResponse) GetDuration() int32 {
	if o == nil || IsNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicMatchesResponse) GetDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *PublicMatchesResponse) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *PublicMatchesResponse) SetDuration(v int32) {
	o.Duration = &v
}

// GetLobbyType returns the LobbyType field value if set, zero value otherwise.
func (o *PublicMatchesResponse) GetLobbyType() int32 {
	if o == nil || IsNil(o.LobbyType) {
		var ret int32
		return ret
	}
	return *o.LobbyType
}

// GetLobbyTypeOk returns a tuple with the LobbyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicMatchesResponse) GetLobbyTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.LobbyType) {
		return nil, false
	}
	return o.LobbyType, true
}

// HasLobbyType returns a boolean if a field has been set.
func (o *PublicMatchesResponse) HasLobbyType() bool {
	if o != nil && !IsNil(o.LobbyType) {
		return true
	}

	return false
}

// SetLobbyType gets a reference to the given int32 and assigns it to the LobbyType field.
func (o *PublicMatchesResponse) SetLobbyType(v int32) {
	o.LobbyType = &v
}

// GetGameMode returns the GameMode field value if set, zero value otherwise.
func (o *PublicMatchesResponse) GetGameMode() int32 {
	if o == nil || IsNil(o.GameMode) {
		var ret int32
		return ret
	}
	return *o.GameMode
}

// GetGameModeOk returns a tuple with the GameMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicMatchesResponse) GetGameModeOk() (*int32, bool) {
	if o == nil || IsNil(o.GameMode) {
		return nil, false
	}
	return o.GameMode, true
}

// HasGameMode returns a boolean if a field has been set.
func (o *PublicMatchesResponse) HasGameMode() bool {
	if o != nil && !IsNil(o.GameMode) {
		return true
	}

	return false
}

// SetGameMode gets a reference to the given int32 and assigns it to the GameMode field.
func (o *PublicMatchesResponse) SetGameMode(v int32) {
	o.GameMode = &v
}

// GetAvgRankTier returns the AvgRankTier field value if set, zero value otherwise.
func (o *PublicMatchesResponse) GetAvgRankTier() int32 {
	if o == nil || IsNil(o.AvgRankTier) {
		var ret int32
		return ret
	}
	return *o.AvgRankTier
}

// GetAvgRankTierOk returns a tuple with the AvgRankTier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicMatchesResponse) GetAvgRankTierOk() (*int32, bool) {
	if o == nil || IsNil(o.AvgRankTier) {
		return nil, false
	}
	return o.AvgRankTier, true
}

// HasAvgRankTier returns a boolean if a field has been set.
func (o *PublicMatchesResponse) HasAvgRankTier() bool {
	if o != nil && !IsNil(o.AvgRankTier) {
		return true
	}

	return false
}

// SetAvgRankTier gets a reference to the given int32 and assigns it to the AvgRankTier field.
func (o *PublicMatchesResponse) SetAvgRankTier(v int32) {
	o.AvgRankTier = &v
}

// GetNumRankTier returns the NumRankTier field value if set, zero value otherwise.
func (o *PublicMatchesResponse) GetNumRankTier() int32 {
	if o == nil || IsNil(o.NumRankTier) {
		var ret int32
		return ret
	}
	return *o.NumRankTier
}

// GetNumRankTierOk returns a tuple with the NumRankTier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicMatchesResponse) GetNumRankTierOk() (*int32, bool) {
	if o == nil || IsNil(o.NumRankTier) {
		return nil, false
	}
	return o.NumRankTier, true
}

// HasNumRankTier returns a boolean if a field has been set.
func (o *PublicMatchesResponse) HasNumRankTier() bool {
	if o != nil && !IsNil(o.NumRankTier) {
		return true
	}

	return false
}

// SetNumRankTier gets a reference to the given int32 and assigns it to the NumRankTier field.
func (o *PublicMatchesResponse) SetNumRankTier(v int32) {
	o.NumRankTier = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *PublicMatchesResponse) GetCluster() int32 {
	if o == nil || IsNil(o.Cluster) {
		var ret int32
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicMatchesResponse) GetClusterOk() (*int32, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *PublicMatchesResponse) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given int32 and assigns it to the Cluster field.
func (o *PublicMatchesResponse) SetCluster(v int32) {
	o.Cluster = &v
}

// GetRadiantTeam returns the RadiantTeam field value if set, zero value otherwise.
func (o *PublicMatchesResponse) GetRadiantTeam() []int32 {
	if o == nil || IsNil(o.RadiantTeam) {
		var ret []int32
		return ret
	}
	return o.RadiantTeam
}

// GetRadiantTeamOk returns a tuple with the RadiantTeam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicMatchesResponse) GetRadiantTeamOk() ([]int32, bool) {
	if o == nil || IsNil(o.RadiantTeam) {
		return nil, false
	}
	return o.RadiantTeam, true
}

// HasRadiantTeam returns a boolean if a field has been set.
func (o *PublicMatchesResponse) HasRadiantTeam() bool {
	if o != nil && !IsNil(o.RadiantTeam) {
		return true
	}

	return false
}

// SetRadiantTeam gets a reference to the given []int32 and assigns it to the RadiantTeam field.
func (o *PublicMatchesResponse) SetRadiantTeam(v []int32) {
	o.RadiantTeam = v
}

// GetDireTeam returns the DireTeam field value if set, zero value otherwise.
func (o *PublicMatchesResponse) GetDireTeam() []int32 {
	if o == nil || IsNil(o.DireTeam) {
		var ret []int32
		return ret
	}
	return o.DireTeam
}

// GetDireTeamOk returns a tuple with the DireTeam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicMatchesResponse) GetDireTeamOk() ([]int32, bool) {
	if o == nil || IsNil(o.DireTeam) {
		return nil, false
	}
	return o.DireTeam, true
}

// HasDireTeam returns a boolean if a field has been set.
func (o *PublicMatchesResponse) HasDireTeam() bool {
	if o != nil && !IsNil(o.DireTeam) {
		return true
	}

	return false
}

// SetDireTeam gets a reference to the given []int32 and assigns it to the DireTeam field.
func (o *PublicMatchesResponse) SetDireTeam(v []int32) {
	o.DireTeam = v
}

func (o PublicMatchesResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicMatchesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MatchId) {
		toSerialize["match_id"] = o.MatchId
	}
	if !IsNil(o.MatchSeqNum) {
		toSerialize["match_seq_num"] = o.MatchSeqNum
	}
	if o.RadiantWin.IsSet() {
		toSerialize["radiant_win"] = o.RadiantWin.Get()
	}
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.LobbyType) {
		toSerialize["lobby_type"] = o.LobbyType
	}
	if !IsNil(o.GameMode) {
		toSerialize["game_mode"] = o.GameMode
	}
	if !IsNil(o.AvgRankTier) {
		toSerialize["avg_rank_tier"] = o.AvgRankTier
	}
	if !IsNil(o.NumRankTier) {
		toSerialize["num_rank_tier"] = o.NumRankTier
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.RadiantTeam) {
		toSerialize["radiant_team"] = o.RadiantTeam
	}
	if !IsNil(o.DireTeam) {
		toSerialize["dire_team"] = o.DireTeam
	}
	return toSerialize, nil
}

type NullablePublicMatchesResponse struct {
	value *PublicMatchesResponse
	isSet bool
}

func (v NullablePublicMatchesResponse) Get() *PublicMatchesResponse {
	return v.value
}

func (v *NullablePublicMatchesResponse) Set(val *PublicMatchesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicMatchesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicMatchesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicMatchesResponse(val *PublicMatchesResponse) *NullablePublicMatchesResponse {
	return &NullablePublicMatchesResponse{value: val, isSet: true}
}

func (v NullablePublicMatchesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicMatchesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


