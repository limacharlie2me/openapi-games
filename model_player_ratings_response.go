/*
OpenDota API

# Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  Without a key, you can make 2,000 free calls per day at a rate limit of 60 requests/minute. We also offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.     

API version: 25.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PlayerRatingsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlayerRatingsResponse{}

// PlayerRatingsResponse struct for PlayerRatingsResponse
type PlayerRatingsResponse struct {
	// The player account ID
	AccountId *int32 `json:"account_id,omitempty"`
	// The ID number of the match assigned by Valve
	MatchId *int32 `json:"match_id,omitempty"`
	// solo_competitive_rank
	SoloCompetitiveRank NullableInt32 `json:"solo_competitive_rank,omitempty"`
	// competitive_rank
	CompetitiveRank *int32 `json:"competitive_rank,omitempty"`
	// time
	Time *int32 `json:"time,omitempty"`
}

// NewPlayerRatingsResponse instantiates a new PlayerRatingsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlayerRatingsResponse() *PlayerRatingsResponse {
	this := PlayerRatingsResponse{}
	return &this
}

// NewPlayerRatingsResponseWithDefaults instantiates a new PlayerRatingsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayerRatingsResponseWithDefaults() *PlayerRatingsResponse {
	this := PlayerRatingsResponse{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *PlayerRatingsResponse) GetAccountId() int32 {
	if o == nil || IsNil(o.AccountId) {
		var ret int32
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerRatingsResponse) GetAccountIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *PlayerRatingsResponse) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given int32 and assigns it to the AccountId field.
func (o *PlayerRatingsResponse) SetAccountId(v int32) {
	o.AccountId = &v
}

// GetMatchId returns the MatchId field value if set, zero value otherwise.
func (o *PlayerRatingsResponse) GetMatchId() int32 {
	if o == nil || IsNil(o.MatchId) {
		var ret int32
		return ret
	}
	return *o.MatchId
}

// GetMatchIdOk returns a tuple with the MatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerRatingsResponse) GetMatchIdOk() (*int32, bool) {
	if o == nil || IsNil(o.MatchId) {
		return nil, false
	}
	return o.MatchId, true
}

// HasMatchId returns a boolean if a field has been set.
func (o *PlayerRatingsResponse) HasMatchId() bool {
	if o != nil && !IsNil(o.MatchId) {
		return true
	}

	return false
}

// SetMatchId gets a reference to the given int32 and assigns it to the MatchId field.
func (o *PlayerRatingsResponse) SetMatchId(v int32) {
	o.MatchId = &v
}

// GetSoloCompetitiveRank returns the SoloCompetitiveRank field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayerRatingsResponse) GetSoloCompetitiveRank() int32 {
	if o == nil || IsNil(o.SoloCompetitiveRank.Get()) {
		var ret int32
		return ret
	}
	return *o.SoloCompetitiveRank.Get()
}

// GetSoloCompetitiveRankOk returns a tuple with the SoloCompetitiveRank field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayerRatingsResponse) GetSoloCompetitiveRankOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SoloCompetitiveRank.Get(), o.SoloCompetitiveRank.IsSet()
}

// HasSoloCompetitiveRank returns a boolean if a field has been set.
func (o *PlayerRatingsResponse) HasSoloCompetitiveRank() bool {
	if o != nil && o.SoloCompetitiveRank.IsSet() {
		return true
	}

	return false
}

// SetSoloCompetitiveRank gets a reference to the given NullableInt32 and assigns it to the SoloCompetitiveRank field.
func (o *PlayerRatingsResponse) SetSoloCompetitiveRank(v int32) {
	o.SoloCompetitiveRank.Set(&v)
}
// SetSoloCompetitiveRankNil sets the value for SoloCompetitiveRank to be an explicit nil
func (o *PlayerRatingsResponse) SetSoloCompetitiveRankNil() {
	o.SoloCompetitiveRank.Set(nil)
}

// UnsetSoloCompetitiveRank ensures that no value is present for SoloCompetitiveRank, not even an explicit nil
func (o *PlayerRatingsResponse) UnsetSoloCompetitiveRank() {
	o.SoloCompetitiveRank.Unset()
}

// GetCompetitiveRank returns the CompetitiveRank field value if set, zero value otherwise.
func (o *PlayerRatingsResponse) GetCompetitiveRank() int32 {
	if o == nil || IsNil(o.CompetitiveRank) {
		var ret int32
		return ret
	}
	return *o.CompetitiveRank
}

// GetCompetitiveRankOk returns a tuple with the CompetitiveRank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerRatingsResponse) GetCompetitiveRankOk() (*int32, bool) {
	if o == nil || IsNil(o.CompetitiveRank) {
		return nil, false
	}
	return o.CompetitiveRank, true
}

// HasCompetitiveRank returns a boolean if a field has been set.
func (o *PlayerRatingsResponse) HasCompetitiveRank() bool {
	if o != nil && !IsNil(o.CompetitiveRank) {
		return true
	}

	return false
}

// SetCompetitiveRank gets a reference to the given int32 and assigns it to the CompetitiveRank field.
func (o *PlayerRatingsResponse) SetCompetitiveRank(v int32) {
	o.CompetitiveRank = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *PlayerRatingsResponse) GetTime() int32 {
	if o == nil || IsNil(o.Time) {
		var ret int32
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerRatingsResponse) GetTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *PlayerRatingsResponse) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given int32 and assigns it to the Time field.
func (o *PlayerRatingsResponse) SetTime(v int32) {
	o.Time = &v
}

func (o PlayerRatingsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlayerRatingsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	if !IsNil(o.MatchId) {
		toSerialize["match_id"] = o.MatchId
	}
	if o.SoloCompetitiveRank.IsSet() {
		toSerialize["solo_competitive_rank"] = o.SoloCompetitiveRank.Get()
	}
	if !IsNil(o.CompetitiveRank) {
		toSerialize["competitive_rank"] = o.CompetitiveRank
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	return toSerialize, nil
}

type NullablePlayerRatingsResponse struct {
	value *PlayerRatingsResponse
	isSet bool
}

func (v NullablePlayerRatingsResponse) Get() *PlayerRatingsResponse {
	return v.value
}

func (v *NullablePlayerRatingsResponse) Set(val *PlayerRatingsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayerRatingsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayerRatingsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayerRatingsResponse(val *PlayerRatingsResponse) *NullablePlayerRatingsResponse {
	return &NullablePlayerRatingsResponse{value: val, isSet: true}
}

func (v NullablePlayerRatingsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayerRatingsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


