/*
OpenDota API

# Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  Without a key, you can make 2,000 free calls per day at a rate limit of 60 requests/minute. We also offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.     

API version: 25.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PlayerCountsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlayerCountsResponse{}

// PlayerCountsResponse struct for PlayerCountsResponse
type PlayerCountsResponse struct {
	// Integer describing whether or not the player left the game. 0: didn't leave. 1: left safely. 2+: Abandoned
	LeaverStatus map[string]interface{} `json:"leaver_status,omitempty"`
	// Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json
	GameMode map[string]interface{} `json:"game_mode,omitempty"`
	// Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json
	LobbyType map[string]interface{} `json:"lobby_type,omitempty"`
	// lane_role
	LaneRole map[string]interface{} `json:"lane_role,omitempty"`
	// Integer corresponding to the region the game was played on
	Region map[string]interface{} `json:"region,omitempty"`
	// Patch ID, from dotaconstants
	Patch map[string]interface{} `json:"patch,omitempty"`
}

// NewPlayerCountsResponse instantiates a new PlayerCountsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlayerCountsResponse() *PlayerCountsResponse {
	this := PlayerCountsResponse{}
	return &this
}

// NewPlayerCountsResponseWithDefaults instantiates a new PlayerCountsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayerCountsResponseWithDefaults() *PlayerCountsResponse {
	this := PlayerCountsResponse{}
	return &this
}

// GetLeaverStatus returns the LeaverStatus field value if set, zero value otherwise.
func (o *PlayerCountsResponse) GetLeaverStatus() map[string]interface{} {
	if o == nil || IsNil(o.LeaverStatus) {
		var ret map[string]interface{}
		return ret
	}
	return o.LeaverStatus
}

// GetLeaverStatusOk returns a tuple with the LeaverStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerCountsResponse) GetLeaverStatusOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.LeaverStatus) {
		return map[string]interface{}{}, false
	}
	return o.LeaverStatus, true
}

// HasLeaverStatus returns a boolean if a field has been set.
func (o *PlayerCountsResponse) HasLeaverStatus() bool {
	if o != nil && !IsNil(o.LeaverStatus) {
		return true
	}

	return false
}

// SetLeaverStatus gets a reference to the given map[string]interface{} and assigns it to the LeaverStatus field.
func (o *PlayerCountsResponse) SetLeaverStatus(v map[string]interface{}) {
	o.LeaverStatus = v
}

// GetGameMode returns the GameMode field value if set, zero value otherwise.
func (o *PlayerCountsResponse) GetGameMode() map[string]interface{} {
	if o == nil || IsNil(o.GameMode) {
		var ret map[string]interface{}
		return ret
	}
	return o.GameMode
}

// GetGameModeOk returns a tuple with the GameMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerCountsResponse) GetGameModeOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.GameMode) {
		return map[string]interface{}{}, false
	}
	return o.GameMode, true
}

// HasGameMode returns a boolean if a field has been set.
func (o *PlayerCountsResponse) HasGameMode() bool {
	if o != nil && !IsNil(o.GameMode) {
		return true
	}

	return false
}

// SetGameMode gets a reference to the given map[string]interface{} and assigns it to the GameMode field.
func (o *PlayerCountsResponse) SetGameMode(v map[string]interface{}) {
	o.GameMode = v
}

// GetLobbyType returns the LobbyType field value if set, zero value otherwise.
func (o *PlayerCountsResponse) GetLobbyType() map[string]interface{} {
	if o == nil || IsNil(o.LobbyType) {
		var ret map[string]interface{}
		return ret
	}
	return o.LobbyType
}

// GetLobbyTypeOk returns a tuple with the LobbyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerCountsResponse) GetLobbyTypeOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.LobbyType) {
		return map[string]interface{}{}, false
	}
	return o.LobbyType, true
}

// HasLobbyType returns a boolean if a field has been set.
func (o *PlayerCountsResponse) HasLobbyType() bool {
	if o != nil && !IsNil(o.LobbyType) {
		return true
	}

	return false
}

// SetLobbyType gets a reference to the given map[string]interface{} and assigns it to the LobbyType field.
func (o *PlayerCountsResponse) SetLobbyType(v map[string]interface{}) {
	o.LobbyType = v
}

// GetLaneRole returns the LaneRole field value if set, zero value otherwise.
func (o *PlayerCountsResponse) GetLaneRole() map[string]interface{} {
	if o == nil || IsNil(o.LaneRole) {
		var ret map[string]interface{}
		return ret
	}
	return o.LaneRole
}

// GetLaneRoleOk returns a tuple with the LaneRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerCountsResponse) GetLaneRoleOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.LaneRole) {
		return map[string]interface{}{}, false
	}
	return o.LaneRole, true
}

// HasLaneRole returns a boolean if a field has been set.
func (o *PlayerCountsResponse) HasLaneRole() bool {
	if o != nil && !IsNil(o.LaneRole) {
		return true
	}

	return false
}

// SetLaneRole gets a reference to the given map[string]interface{} and assigns it to the LaneRole field.
func (o *PlayerCountsResponse) SetLaneRole(v map[string]interface{}) {
	o.LaneRole = v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *PlayerCountsResponse) GetRegion() map[string]interface{} {
	if o == nil || IsNil(o.Region) {
		var ret map[string]interface{}
		return ret
	}
	return o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerCountsResponse) GetRegionOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Region) {
		return map[string]interface{}{}, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *PlayerCountsResponse) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given map[string]interface{} and assigns it to the Region field.
func (o *PlayerCountsResponse) SetRegion(v map[string]interface{}) {
	o.Region = v
}

// GetPatch returns the Patch field value if set, zero value otherwise.
func (o *PlayerCountsResponse) GetPatch() map[string]interface{} {
	if o == nil || IsNil(o.Patch) {
		var ret map[string]interface{}
		return ret
	}
	return o.Patch
}

// GetPatchOk returns a tuple with the Patch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerCountsResponse) GetPatchOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Patch) {
		return map[string]interface{}{}, false
	}
	return o.Patch, true
}

// HasPatch returns a boolean if a field has been set.
func (o *PlayerCountsResponse) HasPatch() bool {
	if o != nil && !IsNil(o.Patch) {
		return true
	}

	return false
}

// SetPatch gets a reference to the given map[string]interface{} and assigns it to the Patch field.
func (o *PlayerCountsResponse) SetPatch(v map[string]interface{}) {
	o.Patch = v
}

func (o PlayerCountsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlayerCountsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LeaverStatus) {
		toSerialize["leaver_status"] = o.LeaverStatus
	}
	if !IsNil(o.GameMode) {
		toSerialize["game_mode"] = o.GameMode
	}
	if !IsNil(o.LobbyType) {
		toSerialize["lobby_type"] = o.LobbyType
	}
	if !IsNil(o.LaneRole) {
		toSerialize["lane_role"] = o.LaneRole
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.Patch) {
		toSerialize["patch"] = o.Patch
	}
	return toSerialize, nil
}

type NullablePlayerCountsResponse struct {
	value *PlayerCountsResponse
	isSet bool
}

func (v NullablePlayerCountsResponse) Get() *PlayerCountsResponse {
	return v.value
}

func (v *NullablePlayerCountsResponse) Set(val *PlayerCountsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayerCountsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayerCountsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayerCountsResponse(val *PlayerCountsResponse) *NullablePlayerCountsResponse {
	return &NullablePlayerCountsResponse{value: val, isSet: true}
}

func (v NullablePlayerCountsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayerCountsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


