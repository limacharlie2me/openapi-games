/*
OpenDota API

# Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  Without a key, you can make 2,000 free calls per day at a rate limit of 60 requests/minute. We also offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.     

API version: 25.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MatchResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchResponse{}

// MatchResponse struct for MatchResponse
type MatchResponse struct {
	// The ID number of the match assigned by Valve
	MatchId *int32 `json:"match_id,omitempty"`
	// Bitmask. An integer that represents a binary of which barracks are still standing. 63 would mean all barracks still stand at the end of the game.
	BarracksStatusDire *int32 `json:"barracks_status_dire,omitempty"`
	// Bitmask. An integer that represents a binary of which barracks are still standing. 63 would mean all barracks still stand at the end of the game.
	BarracksStatusRadiant *int32 `json:"barracks_status_radiant,omitempty"`
	// Array containing information on the chat of the game
	Chat []MatchResponseChatInner `json:"chat,omitempty"`
	// cluster
	Cluster *int32 `json:"cluster,omitempty"`
	// cosmetics
	Cosmetics *map[string]int32 `json:"cosmetics,omitempty"`
	// Number of kills the Dire team had when the match ended
	DireScore *int32 `json:"dire_score,omitempty"`
	// draft_timings
	DraftTimings []MatchResponseDraftTimingsInner `json:"draft_timings,omitempty"`
	// Duration of the game in seconds
	Duration *int32 `json:"duration,omitempty"`
	// engine
	Engine *int32 `json:"engine,omitempty"`
	// Time in seconds at which first blood occurred
	FirstBloodTime *int32 `json:"first_blood_time,omitempty"`
	// Integer corresponding to game mode played. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/game_mode.json
	GameMode *int32 `json:"game_mode,omitempty"`
	// Number of human players in the game
	HumanPlayers *int32 `json:"human_players,omitempty"`
	// leagueid
	Leagueid *int32 `json:"leagueid,omitempty"`
	// Integer corresponding to lobby type of match. List of constants can be found here: https://github.com/odota/dotaconstants/blob/master/json/lobby_type.json
	LobbyType *int32 `json:"lobby_type,omitempty"`
	// match_seq_num
	MatchSeqNum *int32 `json:"match_seq_num,omitempty"`
	// Number of negative votes the replay received in the in-game client
	NegativeVotes *int32 `json:"negative_votes,omitempty"`
	// objectives
	Objectives []map[string]interface{} `json:"objectives,omitempty"`
	// Array containing information on the draft. Each item contains a boolean relating to whether the choice is a pick or a ban, the hero ID, the team the picked or banned it, and the order.
	PicksBans []MatchResponsePicksBansInner `json:"picks_bans,omitempty"`
	// Number of positive votes the replay received in the in-game client
	PositiveVotes *int32 `json:"positive_votes,omitempty"`
	// Array of the Radiant gold advantage at each minute in the game. A negative number means that Radiant is behind, and thus it is their gold disadvantage. 
	RadiantGoldAdv []float32 `json:"radiant_gold_adv,omitempty"`
	// Number of kills the Radiant team had when the match ended
	RadiantScore *int32 `json:"radiant_score,omitempty"`
	// Boolean indicating whether Radiant won the match
	RadiantWin NullableBool `json:"radiant_win,omitempty"`
	// Array of the Radiant experience advantage at each minute in the game. A negative number means that Radiant is behind, and thus it is their experience disadvantage. 
	RadiantXpAdv []float32 `json:"radiant_xp_adv,omitempty"`
	// The Unix timestamp at which the game started
	StartTime *int32 `json:"start_time,omitempty"`
	// teamfights
	Teamfights []map[string]interface{} `json:"teamfights,omitempty"`
	// Bitmask. An integer that represents a binary of which Dire towers are still standing.
	TowerStatusDire *int32 `json:"tower_status_dire,omitempty"`
	// Bitmask. An integer that represents a binary of which Radiant towers are still standing.
	TowerStatusRadiant *int32 `json:"tower_status_radiant,omitempty"`
	// Parse version, used internally by OpenDota
	Version *int32 `json:"version,omitempty"`
	// replay_salt
	ReplaySalt *int32 `json:"replay_salt,omitempty"`
	// series_id
	SeriesId *int32 `json:"series_id,omitempty"`
	// series_type
	SeriesType *int32 `json:"series_type,omitempty"`
	// radiant_team
	RadiantTeam map[string]interface{} `json:"radiant_team,omitempty"`
	// dire_team
	DireTeam map[string]interface{} `json:"dire_team,omitempty"`
	// league
	League map[string]interface{} `json:"league,omitempty"`
	// Skill bracket assigned by Valve (Normal, High, Very High)
	Skill NullableInt32 `json:"skill,omitempty"`
	// Array of information on individual players
	Players []MatchResponsePlayersInner `json:"players,omitempty"`
	// Patch ID, from dotaconstants
	Patch *int32 `json:"patch,omitempty"`
	// Integer corresponding to the region the game was played on
	Region *int32 `json:"region,omitempty"`
	// Word counts of the all chat messages in the player's games
	AllWordCounts map[string]interface{} `json:"all_word_counts,omitempty"`
	// Word counts of the player's all chat messages
	MyWordCounts map[string]interface{} `json:"my_word_counts,omitempty"`
	// Maximum gold advantage of the player's team if they lost the match
	Throw *int32 `json:"throw,omitempty"`
	// Maximum gold disadvantage of the player's team if they won the match
	Comeback *int32 `json:"comeback,omitempty"`
	// Maximum gold disadvantage of the player's team if they lost the match
	Loss *int32 `json:"loss,omitempty"`
	// Maximum gold advantage of the player's team if they won the match
	Win *int32 `json:"win,omitempty"`
	// replay_url
	ReplayUrl *string `json:"replay_url,omitempty"`
}

// NewMatchResponse instantiates a new MatchResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchResponse() *MatchResponse {
	this := MatchResponse{}
	return &this
}

// NewMatchResponseWithDefaults instantiates a new MatchResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchResponseWithDefaults() *MatchResponse {
	this := MatchResponse{}
	return &this
}

// GetMatchId returns the MatchId field value if set, zero value otherwise.
func (o *MatchResponse) GetMatchId() int32 {
	if o == nil || IsNil(o.MatchId) {
		var ret int32
		return ret
	}
	return *o.MatchId
}

// GetMatchIdOk returns a tuple with the MatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetMatchIdOk() (*int32, bool) {
	if o == nil || IsNil(o.MatchId) {
		return nil, false
	}
	return o.MatchId, true
}

// HasMatchId returns a boolean if a field has been set.
func (o *MatchResponse) HasMatchId() bool {
	if o != nil && !IsNil(o.MatchId) {
		return true
	}

	return false
}

// SetMatchId gets a reference to the given int32 and assigns it to the MatchId field.
func (o *MatchResponse) SetMatchId(v int32) {
	o.MatchId = &v
}

// GetBarracksStatusDire returns the BarracksStatusDire field value if set, zero value otherwise.
func (o *MatchResponse) GetBarracksStatusDire() int32 {
	if o == nil || IsNil(o.BarracksStatusDire) {
		var ret int32
		return ret
	}
	return *o.BarracksStatusDire
}

// GetBarracksStatusDireOk returns a tuple with the BarracksStatusDire field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetBarracksStatusDireOk() (*int32, bool) {
	if o == nil || IsNil(o.BarracksStatusDire) {
		return nil, false
	}
	return o.BarracksStatusDire, true
}

// HasBarracksStatusDire returns a boolean if a field has been set.
func (o *MatchResponse) HasBarracksStatusDire() bool {
	if o != nil && !IsNil(o.BarracksStatusDire) {
		return true
	}

	return false
}

// SetBarracksStatusDire gets a reference to the given int32 and assigns it to the BarracksStatusDire field.
func (o *MatchResponse) SetBarracksStatusDire(v int32) {
	o.BarracksStatusDire = &v
}

// GetBarracksStatusRadiant returns the BarracksStatusRadiant field value if set, zero value otherwise.
func (o *MatchResponse) GetBarracksStatusRadiant() int32 {
	if o == nil || IsNil(o.BarracksStatusRadiant) {
		var ret int32
		return ret
	}
	return *o.BarracksStatusRadiant
}

// GetBarracksStatusRadiantOk returns a tuple with the BarracksStatusRadiant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetBarracksStatusRadiantOk() (*int32, bool) {
	if o == nil || IsNil(o.BarracksStatusRadiant) {
		return nil, false
	}
	return o.BarracksStatusRadiant, true
}

// HasBarracksStatusRadiant returns a boolean if a field has been set.
func (o *MatchResponse) HasBarracksStatusRadiant() bool {
	if o != nil && !IsNil(o.BarracksStatusRadiant) {
		return true
	}

	return false
}

// SetBarracksStatusRadiant gets a reference to the given int32 and assigns it to the BarracksStatusRadiant field.
func (o *MatchResponse) SetBarracksStatusRadiant(v int32) {
	o.BarracksStatusRadiant = &v
}

// GetChat returns the Chat field value if set, zero value otherwise.
func (o *MatchResponse) GetChat() []MatchResponseChatInner {
	if o == nil || IsNil(o.Chat) {
		var ret []MatchResponseChatInner
		return ret
	}
	return o.Chat
}

// GetChatOk returns a tuple with the Chat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetChatOk() ([]MatchResponseChatInner, bool) {
	if o == nil || IsNil(o.Chat) {
		return nil, false
	}
	return o.Chat, true
}

// HasChat returns a boolean if a field has been set.
func (o *MatchResponse) HasChat() bool {
	if o != nil && !IsNil(o.Chat) {
		return true
	}

	return false
}

// SetChat gets a reference to the given []MatchResponseChatInner and assigns it to the Chat field.
func (o *MatchResponse) SetChat(v []MatchResponseChatInner) {
	o.Chat = v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *MatchResponse) GetCluster() int32 {
	if o == nil || IsNil(o.Cluster) {
		var ret int32
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetClusterOk() (*int32, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *MatchResponse) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given int32 and assigns it to the Cluster field.
func (o *MatchResponse) SetCluster(v int32) {
	o.Cluster = &v
}

// GetCosmetics returns the Cosmetics field value if set, zero value otherwise.
func (o *MatchResponse) GetCosmetics() map[string]int32 {
	if o == nil || IsNil(o.Cosmetics) {
		var ret map[string]int32
		return ret
	}
	return *o.Cosmetics
}

// GetCosmeticsOk returns a tuple with the Cosmetics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetCosmeticsOk() (*map[string]int32, bool) {
	if o == nil || IsNil(o.Cosmetics) {
		return nil, false
	}
	return o.Cosmetics, true
}

// HasCosmetics returns a boolean if a field has been set.
func (o *MatchResponse) HasCosmetics() bool {
	if o != nil && !IsNil(o.Cosmetics) {
		return true
	}

	return false
}

// SetCosmetics gets a reference to the given map[string]int32 and assigns it to the Cosmetics field.
func (o *MatchResponse) SetCosmetics(v map[string]int32) {
	o.Cosmetics = &v
}

// GetDireScore returns the DireScore field value if set, zero value otherwise.
func (o *MatchResponse) GetDireScore() int32 {
	if o == nil || IsNil(o.DireScore) {
		var ret int32
		return ret
	}
	return *o.DireScore
}

// GetDireScoreOk returns a tuple with the DireScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetDireScoreOk() (*int32, bool) {
	if o == nil || IsNil(o.DireScore) {
		return nil, false
	}
	return o.DireScore, true
}

// HasDireScore returns a boolean if a field has been set.
func (o *MatchResponse) HasDireScore() bool {
	if o != nil && !IsNil(o.DireScore) {
		return true
	}

	return false
}

// SetDireScore gets a reference to the given int32 and assigns it to the DireScore field.
func (o *MatchResponse) SetDireScore(v int32) {
	o.DireScore = &v
}

// GetDraftTimings returns the DraftTimings field value if set, zero value otherwise.
func (o *MatchResponse) GetDraftTimings() []MatchResponseDraftTimingsInner {
	if o == nil || IsNil(o.DraftTimings) {
		var ret []MatchResponseDraftTimingsInner
		return ret
	}
	return o.DraftTimings
}

// GetDraftTimingsOk returns a tuple with the DraftTimings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetDraftTimingsOk() ([]MatchResponseDraftTimingsInner, bool) {
	if o == nil || IsNil(o.DraftTimings) {
		return nil, false
	}
	return o.DraftTimings, true
}

// HasDraftTimings returns a boolean if a field has been set.
func (o *MatchResponse) HasDraftTimings() bool {
	if o != nil && !IsNil(o.DraftTimings) {
		return true
	}

	return false
}

// SetDraftTimings gets a reference to the given []MatchResponseDraftTimingsInner and assigns it to the DraftTimings field.
func (o *MatchResponse) SetDraftTimings(v []MatchResponseDraftTimingsInner) {
	o.DraftTimings = v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *MatchResponse) GetDuration() int32 {
	if o == nil || IsNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *MatchResponse) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *MatchResponse) SetDuration(v int32) {
	o.Duration = &v
}

// GetEngine returns the Engine field value if set, zero value otherwise.
func (o *MatchResponse) GetEngine() int32 {
	if o == nil || IsNil(o.Engine) {
		var ret int32
		return ret
	}
	return *o.Engine
}

// GetEngineOk returns a tuple with the Engine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetEngineOk() (*int32, bool) {
	if o == nil || IsNil(o.Engine) {
		return nil, false
	}
	return o.Engine, true
}

// HasEngine returns a boolean if a field has been set.
func (o *MatchResponse) HasEngine() bool {
	if o != nil && !IsNil(o.Engine) {
		return true
	}

	return false
}

// SetEngine gets a reference to the given int32 and assigns it to the Engine field.
func (o *MatchResponse) SetEngine(v int32) {
	o.Engine = &v
}

// GetFirstBloodTime returns the FirstBloodTime field value if set, zero value otherwise.
func (o *MatchResponse) GetFirstBloodTime() int32 {
	if o == nil || IsNil(o.FirstBloodTime) {
		var ret int32
		return ret
	}
	return *o.FirstBloodTime
}

// GetFirstBloodTimeOk returns a tuple with the FirstBloodTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetFirstBloodTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.FirstBloodTime) {
		return nil, false
	}
	return o.FirstBloodTime, true
}

// HasFirstBloodTime returns a boolean if a field has been set.
func (o *MatchResponse) HasFirstBloodTime() bool {
	if o != nil && !IsNil(o.FirstBloodTime) {
		return true
	}

	return false
}

// SetFirstBloodTime gets a reference to the given int32 and assigns it to the FirstBloodTime field.
func (o *MatchResponse) SetFirstBloodTime(v int32) {
	o.FirstBloodTime = &v
}

// GetGameMode returns the GameMode field value if set, zero value otherwise.
func (o *MatchResponse) GetGameMode() int32 {
	if o == nil || IsNil(o.GameMode) {
		var ret int32
		return ret
	}
	return *o.GameMode
}

// GetGameModeOk returns a tuple with the GameMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetGameModeOk() (*int32, bool) {
	if o == nil || IsNil(o.GameMode) {
		return nil, false
	}
	return o.GameMode, true
}

// HasGameMode returns a boolean if a field has been set.
func (o *MatchResponse) HasGameMode() bool {
	if o != nil && !IsNil(o.GameMode) {
		return true
	}

	return false
}

// SetGameMode gets a reference to the given int32 and assigns it to the GameMode field.
func (o *MatchResponse) SetGameMode(v int32) {
	o.GameMode = &v
}

// GetHumanPlayers returns the HumanPlayers field value if set, zero value otherwise.
func (o *MatchResponse) GetHumanPlayers() int32 {
	if o == nil || IsNil(o.HumanPlayers) {
		var ret int32
		return ret
	}
	return *o.HumanPlayers
}

// GetHumanPlayersOk returns a tuple with the HumanPlayers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetHumanPlayersOk() (*int32, bool) {
	if o == nil || IsNil(o.HumanPlayers) {
		return nil, false
	}
	return o.HumanPlayers, true
}

// HasHumanPlayers returns a boolean if a field has been set.
func (o *MatchResponse) HasHumanPlayers() bool {
	if o != nil && !IsNil(o.HumanPlayers) {
		return true
	}

	return false
}

// SetHumanPlayers gets a reference to the given int32 and assigns it to the HumanPlayers field.
func (o *MatchResponse) SetHumanPlayers(v int32) {
	o.HumanPlayers = &v
}

// GetLeagueid returns the Leagueid field value if set, zero value otherwise.
func (o *MatchResponse) GetLeagueid() int32 {
	if o == nil || IsNil(o.Leagueid) {
		var ret int32
		return ret
	}
	return *o.Leagueid
}

// GetLeagueidOk returns a tuple with the Leagueid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetLeagueidOk() (*int32, bool) {
	if o == nil || IsNil(o.Leagueid) {
		return nil, false
	}
	return o.Leagueid, true
}

// HasLeagueid returns a boolean if a field has been set.
func (o *MatchResponse) HasLeagueid() bool {
	if o != nil && !IsNil(o.Leagueid) {
		return true
	}

	return false
}

// SetLeagueid gets a reference to the given int32 and assigns it to the Leagueid field.
func (o *MatchResponse) SetLeagueid(v int32) {
	o.Leagueid = &v
}

// GetLobbyType returns the LobbyType field value if set, zero value otherwise.
func (o *MatchResponse) GetLobbyType() int32 {
	if o == nil || IsNil(o.LobbyType) {
		var ret int32
		return ret
	}
	return *o.LobbyType
}

// GetLobbyTypeOk returns a tuple with the LobbyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetLobbyTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.LobbyType) {
		return nil, false
	}
	return o.LobbyType, true
}

// HasLobbyType returns a boolean if a field has been set.
func (o *MatchResponse) HasLobbyType() bool {
	if o != nil && !IsNil(o.LobbyType) {
		return true
	}

	return false
}

// SetLobbyType gets a reference to the given int32 and assigns it to the LobbyType field.
func (o *MatchResponse) SetLobbyType(v int32) {
	o.LobbyType = &v
}

// GetMatchSeqNum returns the MatchSeqNum field value if set, zero value otherwise.
func (o *MatchResponse) GetMatchSeqNum() int32 {
	if o == nil || IsNil(o.MatchSeqNum) {
		var ret int32
		return ret
	}
	return *o.MatchSeqNum
}

// GetMatchSeqNumOk returns a tuple with the MatchSeqNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetMatchSeqNumOk() (*int32, bool) {
	if o == nil || IsNil(o.MatchSeqNum) {
		return nil, false
	}
	return o.MatchSeqNum, true
}

// HasMatchSeqNum returns a boolean if a field has been set.
func (o *MatchResponse) HasMatchSeqNum() bool {
	if o != nil && !IsNil(o.MatchSeqNum) {
		return true
	}

	return false
}

// SetMatchSeqNum gets a reference to the given int32 and assigns it to the MatchSeqNum field.
func (o *MatchResponse) SetMatchSeqNum(v int32) {
	o.MatchSeqNum = &v
}

// GetNegativeVotes returns the NegativeVotes field value if set, zero value otherwise.
func (o *MatchResponse) GetNegativeVotes() int32 {
	if o == nil || IsNil(o.NegativeVotes) {
		var ret int32
		return ret
	}
	return *o.NegativeVotes
}

// GetNegativeVotesOk returns a tuple with the NegativeVotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetNegativeVotesOk() (*int32, bool) {
	if o == nil || IsNil(o.NegativeVotes) {
		return nil, false
	}
	return o.NegativeVotes, true
}

// HasNegativeVotes returns a boolean if a field has been set.
func (o *MatchResponse) HasNegativeVotes() bool {
	if o != nil && !IsNil(o.NegativeVotes) {
		return true
	}

	return false
}

// SetNegativeVotes gets a reference to the given int32 and assigns it to the NegativeVotes field.
func (o *MatchResponse) SetNegativeVotes(v int32) {
	o.NegativeVotes = &v
}

// GetObjectives returns the Objectives field value if set, zero value otherwise.
func (o *MatchResponse) GetObjectives() []map[string]interface{} {
	if o == nil || IsNil(o.Objectives) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Objectives
}

// GetObjectivesOk returns a tuple with the Objectives field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetObjectivesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Objectives) {
		return nil, false
	}
	return o.Objectives, true
}

// HasObjectives returns a boolean if a field has been set.
func (o *MatchResponse) HasObjectives() bool {
	if o != nil && !IsNil(o.Objectives) {
		return true
	}

	return false
}

// SetObjectives gets a reference to the given []map[string]interface{} and assigns it to the Objectives field.
func (o *MatchResponse) SetObjectives(v []map[string]interface{}) {
	o.Objectives = v
}

// GetPicksBans returns the PicksBans field value if set, zero value otherwise.
func (o *MatchResponse) GetPicksBans() []MatchResponsePicksBansInner {
	if o == nil || IsNil(o.PicksBans) {
		var ret []MatchResponsePicksBansInner
		return ret
	}
	return o.PicksBans
}

// GetPicksBansOk returns a tuple with the PicksBans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetPicksBansOk() ([]MatchResponsePicksBansInner, bool) {
	if o == nil || IsNil(o.PicksBans) {
		return nil, false
	}
	return o.PicksBans, true
}

// HasPicksBans returns a boolean if a field has been set.
func (o *MatchResponse) HasPicksBans() bool {
	if o != nil && !IsNil(o.PicksBans) {
		return true
	}

	return false
}

// SetPicksBans gets a reference to the given []MatchResponsePicksBansInner and assigns it to the PicksBans field.
func (o *MatchResponse) SetPicksBans(v []MatchResponsePicksBansInner) {
	o.PicksBans = v
}

// GetPositiveVotes returns the PositiveVotes field value if set, zero value otherwise.
func (o *MatchResponse) GetPositiveVotes() int32 {
	if o == nil || IsNil(o.PositiveVotes) {
		var ret int32
		return ret
	}
	return *o.PositiveVotes
}

// GetPositiveVotesOk returns a tuple with the PositiveVotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetPositiveVotesOk() (*int32, bool) {
	if o == nil || IsNil(o.PositiveVotes) {
		return nil, false
	}
	return o.PositiveVotes, true
}

// HasPositiveVotes returns a boolean if a field has been set.
func (o *MatchResponse) HasPositiveVotes() bool {
	if o != nil && !IsNil(o.PositiveVotes) {
		return true
	}

	return false
}

// SetPositiveVotes gets a reference to the given int32 and assigns it to the PositiveVotes field.
func (o *MatchResponse) SetPositiveVotes(v int32) {
	o.PositiveVotes = &v
}

// GetRadiantGoldAdv returns the RadiantGoldAdv field value if set, zero value otherwise.
func (o *MatchResponse) GetRadiantGoldAdv() []float32 {
	if o == nil || IsNil(o.RadiantGoldAdv) {
		var ret []float32
		return ret
	}
	return o.RadiantGoldAdv
}

// GetRadiantGoldAdvOk returns a tuple with the RadiantGoldAdv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetRadiantGoldAdvOk() ([]float32, bool) {
	if o == nil || IsNil(o.RadiantGoldAdv) {
		return nil, false
	}
	return o.RadiantGoldAdv, true
}

// HasRadiantGoldAdv returns a boolean if a field has been set.
func (o *MatchResponse) HasRadiantGoldAdv() bool {
	if o != nil && !IsNil(o.RadiantGoldAdv) {
		return true
	}

	return false
}

// SetRadiantGoldAdv gets a reference to the given []float32 and assigns it to the RadiantGoldAdv field.
func (o *MatchResponse) SetRadiantGoldAdv(v []float32) {
	o.RadiantGoldAdv = v
}

// GetRadiantScore returns the RadiantScore field value if set, zero value otherwise.
func (o *MatchResponse) GetRadiantScore() int32 {
	if o == nil || IsNil(o.RadiantScore) {
		var ret int32
		return ret
	}
	return *o.RadiantScore
}

// GetRadiantScoreOk returns a tuple with the RadiantScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetRadiantScoreOk() (*int32, bool) {
	if o == nil || IsNil(o.RadiantScore) {
		return nil, false
	}
	return o.RadiantScore, true
}

// HasRadiantScore returns a boolean if a field has been set.
func (o *MatchResponse) HasRadiantScore() bool {
	if o != nil && !IsNil(o.RadiantScore) {
		return true
	}

	return false
}

// SetRadiantScore gets a reference to the given int32 and assigns it to the RadiantScore field.
func (o *MatchResponse) SetRadiantScore(v int32) {
	o.RadiantScore = &v
}

// GetRadiantWin returns the RadiantWin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchResponse) GetRadiantWin() bool {
	if o == nil || IsNil(o.RadiantWin.Get()) {
		var ret bool
		return ret
	}
	return *o.RadiantWin.Get()
}

// GetRadiantWinOk returns a tuple with the RadiantWin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchResponse) GetRadiantWinOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RadiantWin.Get(), o.RadiantWin.IsSet()
}

// HasRadiantWin returns a boolean if a field has been set.
func (o *MatchResponse) HasRadiantWin() bool {
	if o != nil && o.RadiantWin.IsSet() {
		return true
	}

	return false
}

// SetRadiantWin gets a reference to the given NullableBool and assigns it to the RadiantWin field.
func (o *MatchResponse) SetRadiantWin(v bool) {
	o.RadiantWin.Set(&v)
}
// SetRadiantWinNil sets the value for RadiantWin to be an explicit nil
func (o *MatchResponse) SetRadiantWinNil() {
	o.RadiantWin.Set(nil)
}

// UnsetRadiantWin ensures that no value is present for RadiantWin, not even an explicit nil
func (o *MatchResponse) UnsetRadiantWin() {
	o.RadiantWin.Unset()
}

// GetRadiantXpAdv returns the RadiantXpAdv field value if set, zero value otherwise.
func (o *MatchResponse) GetRadiantXpAdv() []float32 {
	if o == nil || IsNil(o.RadiantXpAdv) {
		var ret []float32
		return ret
	}
	return o.RadiantXpAdv
}

// GetRadiantXpAdvOk returns a tuple with the RadiantXpAdv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetRadiantXpAdvOk() ([]float32, bool) {
	if o == nil || IsNil(o.RadiantXpAdv) {
		return nil, false
	}
	return o.RadiantXpAdv, true
}

// HasRadiantXpAdv returns a boolean if a field has been set.
func (o *MatchResponse) HasRadiantXpAdv() bool {
	if o != nil && !IsNil(o.RadiantXpAdv) {
		return true
	}

	return false
}

// SetRadiantXpAdv gets a reference to the given []float32 and assigns it to the RadiantXpAdv field.
func (o *MatchResponse) SetRadiantXpAdv(v []float32) {
	o.RadiantXpAdv = v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *MatchResponse) GetStartTime() int32 {
	if o == nil || IsNil(o.StartTime) {
		var ret int32
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetStartTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *MatchResponse) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given int32 and assigns it to the StartTime field.
func (o *MatchResponse) SetStartTime(v int32) {
	o.StartTime = &v
}

// GetTeamfights returns the Teamfights field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchResponse) GetTeamfights() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.Teamfights
}

// GetTeamfightsOk returns a tuple with the Teamfights field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchResponse) GetTeamfightsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Teamfights) {
		return nil, false
	}
	return o.Teamfights, true
}

// HasTeamfights returns a boolean if a field has been set.
func (o *MatchResponse) HasTeamfights() bool {
	if o != nil && IsNil(o.Teamfights) {
		return true
	}

	return false
}

// SetTeamfights gets a reference to the given []map[string]interface{} and assigns it to the Teamfights field.
func (o *MatchResponse) SetTeamfights(v []map[string]interface{}) {
	o.Teamfights = v
}

// GetTowerStatusDire returns the TowerStatusDire field value if set, zero value otherwise.
func (o *MatchResponse) GetTowerStatusDire() int32 {
	if o == nil || IsNil(o.TowerStatusDire) {
		var ret int32
		return ret
	}
	return *o.TowerStatusDire
}

// GetTowerStatusDireOk returns a tuple with the TowerStatusDire field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetTowerStatusDireOk() (*int32, bool) {
	if o == nil || IsNil(o.TowerStatusDire) {
		return nil, false
	}
	return o.TowerStatusDire, true
}

// HasTowerStatusDire returns a boolean if a field has been set.
func (o *MatchResponse) HasTowerStatusDire() bool {
	if o != nil && !IsNil(o.TowerStatusDire) {
		return true
	}

	return false
}

// SetTowerStatusDire gets a reference to the given int32 and assigns it to the TowerStatusDire field.
func (o *MatchResponse) SetTowerStatusDire(v int32) {
	o.TowerStatusDire = &v
}

// GetTowerStatusRadiant returns the TowerStatusRadiant field value if set, zero value otherwise.
func (o *MatchResponse) GetTowerStatusRadiant() int32 {
	if o == nil || IsNil(o.TowerStatusRadiant) {
		var ret int32
		return ret
	}
	return *o.TowerStatusRadiant
}

// GetTowerStatusRadiantOk returns a tuple with the TowerStatusRadiant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetTowerStatusRadiantOk() (*int32, bool) {
	if o == nil || IsNil(o.TowerStatusRadiant) {
		return nil, false
	}
	return o.TowerStatusRadiant, true
}

// HasTowerStatusRadiant returns a boolean if a field has been set.
func (o *MatchResponse) HasTowerStatusRadiant() bool {
	if o != nil && !IsNil(o.TowerStatusRadiant) {
		return true
	}

	return false
}

// SetTowerStatusRadiant gets a reference to the given int32 and assigns it to the TowerStatusRadiant field.
func (o *MatchResponse) SetTowerStatusRadiant(v int32) {
	o.TowerStatusRadiant = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *MatchResponse) GetVersion() int32 {
	if o == nil || IsNil(o.Version) {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *MatchResponse) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *MatchResponse) SetVersion(v int32) {
	o.Version = &v
}

// GetReplaySalt returns the ReplaySalt field value if set, zero value otherwise.
func (o *MatchResponse) GetReplaySalt() int32 {
	if o == nil || IsNil(o.ReplaySalt) {
		var ret int32
		return ret
	}
	return *o.ReplaySalt
}

// GetReplaySaltOk returns a tuple with the ReplaySalt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetReplaySaltOk() (*int32, bool) {
	if o == nil || IsNil(o.ReplaySalt) {
		return nil, false
	}
	return o.ReplaySalt, true
}

// HasReplaySalt returns a boolean if a field has been set.
func (o *MatchResponse) HasReplaySalt() bool {
	if o != nil && !IsNil(o.ReplaySalt) {
		return true
	}

	return false
}

// SetReplaySalt gets a reference to the given int32 and assigns it to the ReplaySalt field.
func (o *MatchResponse) SetReplaySalt(v int32) {
	o.ReplaySalt = &v
}

// GetSeriesId returns the SeriesId field value if set, zero value otherwise.
func (o *MatchResponse) GetSeriesId() int32 {
	if o == nil || IsNil(o.SeriesId) {
		var ret int32
		return ret
	}
	return *o.SeriesId
}

// GetSeriesIdOk returns a tuple with the SeriesId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetSeriesIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SeriesId) {
		return nil, false
	}
	return o.SeriesId, true
}

// HasSeriesId returns a boolean if a field has been set.
func (o *MatchResponse) HasSeriesId() bool {
	if o != nil && !IsNil(o.SeriesId) {
		return true
	}

	return false
}

// SetSeriesId gets a reference to the given int32 and assigns it to the SeriesId field.
func (o *MatchResponse) SetSeriesId(v int32) {
	o.SeriesId = &v
}

// GetSeriesType returns the SeriesType field value if set, zero value otherwise.
func (o *MatchResponse) GetSeriesType() int32 {
	if o == nil || IsNil(o.SeriesType) {
		var ret int32
		return ret
	}
	return *o.SeriesType
}

// GetSeriesTypeOk returns a tuple with the SeriesType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetSeriesTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.SeriesType) {
		return nil, false
	}
	return o.SeriesType, true
}

// HasSeriesType returns a boolean if a field has been set.
func (o *MatchResponse) HasSeriesType() bool {
	if o != nil && !IsNil(o.SeriesType) {
		return true
	}

	return false
}

// SetSeriesType gets a reference to the given int32 and assigns it to the SeriesType field.
func (o *MatchResponse) SetSeriesType(v int32) {
	o.SeriesType = &v
}

// GetRadiantTeam returns the RadiantTeam field value if set, zero value otherwise.
func (o *MatchResponse) GetRadiantTeam() map[string]interface{} {
	if o == nil || IsNil(o.RadiantTeam) {
		var ret map[string]interface{}
		return ret
	}
	return o.RadiantTeam
}

// GetRadiantTeamOk returns a tuple with the RadiantTeam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetRadiantTeamOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.RadiantTeam) {
		return map[string]interface{}{}, false
	}
	return o.RadiantTeam, true
}

// HasRadiantTeam returns a boolean if a field has been set.
func (o *MatchResponse) HasRadiantTeam() bool {
	if o != nil && !IsNil(o.RadiantTeam) {
		return true
	}

	return false
}

// SetRadiantTeam gets a reference to the given map[string]interface{} and assigns it to the RadiantTeam field.
func (o *MatchResponse) SetRadiantTeam(v map[string]interface{}) {
	o.RadiantTeam = v
}

// GetDireTeam returns the DireTeam field value if set, zero value otherwise.
func (o *MatchResponse) GetDireTeam() map[string]interface{} {
	if o == nil || IsNil(o.DireTeam) {
		var ret map[string]interface{}
		return ret
	}
	return o.DireTeam
}

// GetDireTeamOk returns a tuple with the DireTeam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetDireTeamOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DireTeam) {
		return map[string]interface{}{}, false
	}
	return o.DireTeam, true
}

// HasDireTeam returns a boolean if a field has been set.
func (o *MatchResponse) HasDireTeam() bool {
	if o != nil && !IsNil(o.DireTeam) {
		return true
	}

	return false
}

// SetDireTeam gets a reference to the given map[string]interface{} and assigns it to the DireTeam field.
func (o *MatchResponse) SetDireTeam(v map[string]interface{}) {
	o.DireTeam = v
}

// GetLeague returns the League field value if set, zero value otherwise.
func (o *MatchResponse) GetLeague() map[string]interface{} {
	if o == nil || IsNil(o.League) {
		var ret map[string]interface{}
		return ret
	}
	return o.League
}

// GetLeagueOk returns a tuple with the League field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetLeagueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.League) {
		return map[string]interface{}{}, false
	}
	return o.League, true
}

// HasLeague returns a boolean if a field has been set.
func (o *MatchResponse) HasLeague() bool {
	if o != nil && !IsNil(o.League) {
		return true
	}

	return false
}

// SetLeague gets a reference to the given map[string]interface{} and assigns it to the League field.
func (o *MatchResponse) SetLeague(v map[string]interface{}) {
	o.League = v
}

// GetSkill returns the Skill field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MatchResponse) GetSkill() int32 {
	if o == nil || IsNil(o.Skill.Get()) {
		var ret int32
		return ret
	}
	return *o.Skill.Get()
}

// GetSkillOk returns a tuple with the Skill field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MatchResponse) GetSkillOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Skill.Get(), o.Skill.IsSet()
}

// HasSkill returns a boolean if a field has been set.
func (o *MatchResponse) HasSkill() bool {
	if o != nil && o.Skill.IsSet() {
		return true
	}

	return false
}

// SetSkill gets a reference to the given NullableInt32 and assigns it to the Skill field.
func (o *MatchResponse) SetSkill(v int32) {
	o.Skill.Set(&v)
}
// SetSkillNil sets the value for Skill to be an explicit nil
func (o *MatchResponse) SetSkillNil() {
	o.Skill.Set(nil)
}

// UnsetSkill ensures that no value is present for Skill, not even an explicit nil
func (o *MatchResponse) UnsetSkill() {
	o.Skill.Unset()
}

// GetPlayers returns the Players field value if set, zero value otherwise.
func (o *MatchResponse) GetPlayers() []MatchResponsePlayersInner {
	if o == nil || IsNil(o.Players) {
		var ret []MatchResponsePlayersInner
		return ret
	}
	return o.Players
}

// GetPlayersOk returns a tuple with the Players field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetPlayersOk() ([]MatchResponsePlayersInner, bool) {
	if o == nil || IsNil(o.Players) {
		return nil, false
	}
	return o.Players, true
}

// HasPlayers returns a boolean if a field has been set.
func (o *MatchResponse) HasPlayers() bool {
	if o != nil && !IsNil(o.Players) {
		return true
	}

	return false
}

// SetPlayers gets a reference to the given []MatchResponsePlayersInner and assigns it to the Players field.
func (o *MatchResponse) SetPlayers(v []MatchResponsePlayersInner) {
	o.Players = v
}

// GetPatch returns the Patch field value if set, zero value otherwise.
func (o *MatchResponse) GetPatch() int32 {
	if o == nil || IsNil(o.Patch) {
		var ret int32
		return ret
	}
	return *o.Patch
}

// GetPatchOk returns a tuple with the Patch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetPatchOk() (*int32, bool) {
	if o == nil || IsNil(o.Patch) {
		return nil, false
	}
	return o.Patch, true
}

// HasPatch returns a boolean if a field has been set.
func (o *MatchResponse) HasPatch() bool {
	if o != nil && !IsNil(o.Patch) {
		return true
	}

	return false
}

// SetPatch gets a reference to the given int32 and assigns it to the Patch field.
func (o *MatchResponse) SetPatch(v int32) {
	o.Patch = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *MatchResponse) GetRegion() int32 {
	if o == nil || IsNil(o.Region) {
		var ret int32
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetRegionOk() (*int32, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *MatchResponse) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given int32 and assigns it to the Region field.
func (o *MatchResponse) SetRegion(v int32) {
	o.Region = &v
}

// GetAllWordCounts returns the AllWordCounts field value if set, zero value otherwise.
func (o *MatchResponse) GetAllWordCounts() map[string]interface{} {
	if o == nil || IsNil(o.AllWordCounts) {
		var ret map[string]interface{}
		return ret
	}
	return o.AllWordCounts
}

// GetAllWordCountsOk returns a tuple with the AllWordCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetAllWordCountsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AllWordCounts) {
		return map[string]interface{}{}, false
	}
	return o.AllWordCounts, true
}

// HasAllWordCounts returns a boolean if a field has been set.
func (o *MatchResponse) HasAllWordCounts() bool {
	if o != nil && !IsNil(o.AllWordCounts) {
		return true
	}

	return false
}

// SetAllWordCounts gets a reference to the given map[string]interface{} and assigns it to the AllWordCounts field.
func (o *MatchResponse) SetAllWordCounts(v map[string]interface{}) {
	o.AllWordCounts = v
}

// GetMyWordCounts returns the MyWordCounts field value if set, zero value otherwise.
func (o *MatchResponse) GetMyWordCounts() map[string]interface{} {
	if o == nil || IsNil(o.MyWordCounts) {
		var ret map[string]interface{}
		return ret
	}
	return o.MyWordCounts
}

// GetMyWordCountsOk returns a tuple with the MyWordCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetMyWordCountsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.MyWordCounts) {
		return map[string]interface{}{}, false
	}
	return o.MyWordCounts, true
}

// HasMyWordCounts returns a boolean if a field has been set.
func (o *MatchResponse) HasMyWordCounts() bool {
	if o != nil && !IsNil(o.MyWordCounts) {
		return true
	}

	return false
}

// SetMyWordCounts gets a reference to the given map[string]interface{} and assigns it to the MyWordCounts field.
func (o *MatchResponse) SetMyWordCounts(v map[string]interface{}) {
	o.MyWordCounts = v
}

// GetThrow returns the Throw field value if set, zero value otherwise.
func (o *MatchResponse) GetThrow() int32 {
	if o == nil || IsNil(o.Throw) {
		var ret int32
		return ret
	}
	return *o.Throw
}

// GetThrowOk returns a tuple with the Throw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetThrowOk() (*int32, bool) {
	if o == nil || IsNil(o.Throw) {
		return nil, false
	}
	return o.Throw, true
}

// HasThrow returns a boolean if a field has been set.
func (o *MatchResponse) HasThrow() bool {
	if o != nil && !IsNil(o.Throw) {
		return true
	}

	return false
}

// SetThrow gets a reference to the given int32 and assigns it to the Throw field.
func (o *MatchResponse) SetThrow(v int32) {
	o.Throw = &v
}

// GetComeback returns the Comeback field value if set, zero value otherwise.
func (o *MatchResponse) GetComeback() int32 {
	if o == nil || IsNil(o.Comeback) {
		var ret int32
		return ret
	}
	return *o.Comeback
}

// GetComebackOk returns a tuple with the Comeback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetComebackOk() (*int32, bool) {
	if o == nil || IsNil(o.Comeback) {
		return nil, false
	}
	return o.Comeback, true
}

// HasComeback returns a boolean if a field has been set.
func (o *MatchResponse) HasComeback() bool {
	if o != nil && !IsNil(o.Comeback) {
		return true
	}

	return false
}

// SetComeback gets a reference to the given int32 and assigns it to the Comeback field.
func (o *MatchResponse) SetComeback(v int32) {
	o.Comeback = &v
}

// GetLoss returns the Loss field value if set, zero value otherwise.
func (o *MatchResponse) GetLoss() int32 {
	if o == nil || IsNil(o.Loss) {
		var ret int32
		return ret
	}
	return *o.Loss
}

// GetLossOk returns a tuple with the Loss field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetLossOk() (*int32, bool) {
	if o == nil || IsNil(o.Loss) {
		return nil, false
	}
	return o.Loss, true
}

// HasLoss returns a boolean if a field has been set.
func (o *MatchResponse) HasLoss() bool {
	if o != nil && !IsNil(o.Loss) {
		return true
	}

	return false
}

// SetLoss gets a reference to the given int32 and assigns it to the Loss field.
func (o *MatchResponse) SetLoss(v int32) {
	o.Loss = &v
}

// GetWin returns the Win field value if set, zero value otherwise.
func (o *MatchResponse) GetWin() int32 {
	if o == nil || IsNil(o.Win) {
		var ret int32
		return ret
	}
	return *o.Win
}

// GetWinOk returns a tuple with the Win field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetWinOk() (*int32, bool) {
	if o == nil || IsNil(o.Win) {
		return nil, false
	}
	return o.Win, true
}

// HasWin returns a boolean if a field has been set.
func (o *MatchResponse) HasWin() bool {
	if o != nil && !IsNil(o.Win) {
		return true
	}

	return false
}

// SetWin gets a reference to the given int32 and assigns it to the Win field.
func (o *MatchResponse) SetWin(v int32) {
	o.Win = &v
}

// GetReplayUrl returns the ReplayUrl field value if set, zero value otherwise.
func (o *MatchResponse) GetReplayUrl() string {
	if o == nil || IsNil(o.ReplayUrl) {
		var ret string
		return ret
	}
	return *o.ReplayUrl
}

// GetReplayUrlOk returns a tuple with the ReplayUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponse) GetReplayUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ReplayUrl) {
		return nil, false
	}
	return o.ReplayUrl, true
}

// HasReplayUrl returns a boolean if a field has been set.
func (o *MatchResponse) HasReplayUrl() bool {
	if o != nil && !IsNil(o.ReplayUrl) {
		return true
	}

	return false
}

// SetReplayUrl gets a reference to the given string and assigns it to the ReplayUrl field.
func (o *MatchResponse) SetReplayUrl(v string) {
	o.ReplayUrl = &v
}

func (o MatchResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MatchId) {
		toSerialize["match_id"] = o.MatchId
	}
	if !IsNil(o.BarracksStatusDire) {
		toSerialize["barracks_status_dire"] = o.BarracksStatusDire
	}
	if !IsNil(o.BarracksStatusRadiant) {
		toSerialize["barracks_status_radiant"] = o.BarracksStatusRadiant
	}
	if !IsNil(o.Chat) {
		toSerialize["chat"] = o.Chat
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Cosmetics) {
		toSerialize["cosmetics"] = o.Cosmetics
	}
	if !IsNil(o.DireScore) {
		toSerialize["dire_score"] = o.DireScore
	}
	if !IsNil(o.DraftTimings) {
		toSerialize["draft_timings"] = o.DraftTimings
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.Engine) {
		toSerialize["engine"] = o.Engine
	}
	if !IsNil(o.FirstBloodTime) {
		toSerialize["first_blood_time"] = o.FirstBloodTime
	}
	if !IsNil(o.GameMode) {
		toSerialize["game_mode"] = o.GameMode
	}
	if !IsNil(o.HumanPlayers) {
		toSerialize["human_players"] = o.HumanPlayers
	}
	if !IsNil(o.Leagueid) {
		toSerialize["leagueid"] = o.Leagueid
	}
	if !IsNil(o.LobbyType) {
		toSerialize["lobby_type"] = o.LobbyType
	}
	if !IsNil(o.MatchSeqNum) {
		toSerialize["match_seq_num"] = o.MatchSeqNum
	}
	if !IsNil(o.NegativeVotes) {
		toSerialize["negative_votes"] = o.NegativeVotes
	}
	if !IsNil(o.Objectives) {
		toSerialize["objectives"] = o.Objectives
	}
	if !IsNil(o.PicksBans) {
		toSerialize["picks_bans"] = o.PicksBans
	}
	if !IsNil(o.PositiveVotes) {
		toSerialize["positive_votes"] = o.PositiveVotes
	}
	if !IsNil(o.RadiantGoldAdv) {
		toSerialize["radiant_gold_adv"] = o.RadiantGoldAdv
	}
	if !IsNil(o.RadiantScore) {
		toSerialize["radiant_score"] = o.RadiantScore
	}
	if o.RadiantWin.IsSet() {
		toSerialize["radiant_win"] = o.RadiantWin.Get()
	}
	if !IsNil(o.RadiantXpAdv) {
		toSerialize["radiant_xp_adv"] = o.RadiantXpAdv
	}
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	if o.Teamfights != nil {
		toSerialize["teamfights"] = o.Teamfights
	}
	if !IsNil(o.TowerStatusDire) {
		toSerialize["tower_status_dire"] = o.TowerStatusDire
	}
	if !IsNil(o.TowerStatusRadiant) {
		toSerialize["tower_status_radiant"] = o.TowerStatusRadiant
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.ReplaySalt) {
		toSerialize["replay_salt"] = o.ReplaySalt
	}
	if !IsNil(o.SeriesId) {
		toSerialize["series_id"] = o.SeriesId
	}
	if !IsNil(o.SeriesType) {
		toSerialize["series_type"] = o.SeriesType
	}
	if !IsNil(o.RadiantTeam) {
		toSerialize["radiant_team"] = o.RadiantTeam
	}
	if !IsNil(o.DireTeam) {
		toSerialize["dire_team"] = o.DireTeam
	}
	if !IsNil(o.League) {
		toSerialize["league"] = o.League
	}
	if o.Skill.IsSet() {
		toSerialize["skill"] = o.Skill.Get()
	}
	if !IsNil(o.Players) {
		toSerialize["players"] = o.Players
	}
	if !IsNil(o.Patch) {
		toSerialize["patch"] = o.Patch
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.AllWordCounts) {
		toSerialize["all_word_counts"] = o.AllWordCounts
	}
	if !IsNil(o.MyWordCounts) {
		toSerialize["my_word_counts"] = o.MyWordCounts
	}
	if !IsNil(o.Throw) {
		toSerialize["throw"] = o.Throw
	}
	if !IsNil(o.Comeback) {
		toSerialize["comeback"] = o.Comeback
	}
	if !IsNil(o.Loss) {
		toSerialize["loss"] = o.Loss
	}
	if !IsNil(o.Win) {
		toSerialize["win"] = o.Win
	}
	if !IsNil(o.ReplayUrl) {
		toSerialize["replay_url"] = o.ReplayUrl
	}
	return toSerialize, nil
}

type NullableMatchResponse struct {
	value *MatchResponse
	isSet bool
}

func (v NullableMatchResponse) Get() *MatchResponse {
	return v.value
}

func (v *NullableMatchResponse) Set(val *MatchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchResponse(val *MatchResponse) *NullableMatchResponse {
	return &NullableMatchResponse{value: val, isSet: true}
}

func (v NullableMatchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


