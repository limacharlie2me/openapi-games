/*
OpenDota API

# Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  Without a key, you can make 2,000 free calls per day at a rate limit of 60 requests/minute. We also offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.     

API version: 25.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DistributionsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DistributionsResponse{}

// DistributionsResponse struct for DistributionsResponse
type DistributionsResponse struct {
	Ranks *DistributionsResponseRanks `json:"ranks,omitempty"`
}

// NewDistributionsResponse instantiates a new DistributionsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDistributionsResponse() *DistributionsResponse {
	this := DistributionsResponse{}
	return &this
}

// NewDistributionsResponseWithDefaults instantiates a new DistributionsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDistributionsResponseWithDefaults() *DistributionsResponse {
	this := DistributionsResponse{}
	return &this
}

// GetRanks returns the Ranks field value if set, zero value otherwise.
func (o *DistributionsResponse) GetRanks() DistributionsResponseRanks {
	if o == nil || IsNil(o.Ranks) {
		var ret DistributionsResponseRanks
		return ret
	}
	return *o.Ranks
}

// GetRanksOk returns a tuple with the Ranks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DistributionsResponse) GetRanksOk() (*DistributionsResponseRanks, bool) {
	if o == nil || IsNil(o.Ranks) {
		return nil, false
	}
	return o.Ranks, true
}

// HasRanks returns a boolean if a field has been set.
func (o *DistributionsResponse) HasRanks() bool {
	if o != nil && !IsNil(o.Ranks) {
		return true
	}

	return false
}

// SetRanks gets a reference to the given DistributionsResponseRanks and assigns it to the Ranks field.
func (o *DistributionsResponse) SetRanks(v DistributionsResponseRanks) {
	o.Ranks = &v
}

func (o DistributionsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DistributionsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ranks) {
		toSerialize["ranks"] = o.Ranks
	}
	return toSerialize, nil
}

type NullableDistributionsResponse struct {
	value *DistributionsResponse
	isSet bool
}

func (v NullableDistributionsResponse) Get() *DistributionsResponse {
	return v.value
}

func (v *NullableDistributionsResponse) Set(val *DistributionsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDistributionsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDistributionsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDistributionsResponse(val *DistributionsResponse) *NullableDistributionsResponse {
	return &NullableDistributionsResponse{value: val, isSet: true}
}

func (v NullableDistributionsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDistributionsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


