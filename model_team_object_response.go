/*
OpenDota API

# Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  Without a key, you can make 2,000 free calls per day at a rate limit of 60 requests/minute. We also offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.     

API version: 25.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TeamObjectResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamObjectResponse{}

// TeamObjectResponse struct for TeamObjectResponse
type TeamObjectResponse struct {
	// Team's identifier
	TeamId *int32 `json:"team_id,omitempty"`
	// The Elo rating of the team
	Rating *float32 `json:"rating,omitempty"`
	// The number of games won by this team
	Wins *int32 `json:"wins,omitempty"`
	// The number of losses by this team
	Losses *int32 `json:"losses,omitempty"`
	// The Unix timestamp of the last match played by this team
	LastMatchTime *int32 `json:"last_match_time,omitempty"`
	// Team name
	Name NullableString `json:"name,omitempty"`
	// The team tag/abbreviation
	Tag *string `json:"tag,omitempty"`
}

// NewTeamObjectResponse instantiates a new TeamObjectResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamObjectResponse() *TeamObjectResponse {
	this := TeamObjectResponse{}
	return &this
}

// NewTeamObjectResponseWithDefaults instantiates a new TeamObjectResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamObjectResponseWithDefaults() *TeamObjectResponse {
	this := TeamObjectResponse{}
	return &this
}

// GetTeamId returns the TeamId field value if set, zero value otherwise.
func (o *TeamObjectResponse) GetTeamId() int32 {
	if o == nil || IsNil(o.TeamId) {
		var ret int32
		return ret
	}
	return *o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamObjectResponse) GetTeamIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TeamId) {
		return nil, false
	}
	return o.TeamId, true
}

// HasTeamId returns a boolean if a field has been set.
func (o *TeamObjectResponse) HasTeamId() bool {
	if o != nil && !IsNil(o.TeamId) {
		return true
	}

	return false
}

// SetTeamId gets a reference to the given int32 and assigns it to the TeamId field.
func (o *TeamObjectResponse) SetTeamId(v int32) {
	o.TeamId = &v
}

// GetRating returns the Rating field value if set, zero value otherwise.
func (o *TeamObjectResponse) GetRating() float32 {
	if o == nil || IsNil(o.Rating) {
		var ret float32
		return ret
	}
	return *o.Rating
}

// GetRatingOk returns a tuple with the Rating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamObjectResponse) GetRatingOk() (*float32, bool) {
	if o == nil || IsNil(o.Rating) {
		return nil, false
	}
	return o.Rating, true
}

// HasRating returns a boolean if a field has been set.
func (o *TeamObjectResponse) HasRating() bool {
	if o != nil && !IsNil(o.Rating) {
		return true
	}

	return false
}

// SetRating gets a reference to the given float32 and assigns it to the Rating field.
func (o *TeamObjectResponse) SetRating(v float32) {
	o.Rating = &v
}

// GetWins returns the Wins field value if set, zero value otherwise.
func (o *TeamObjectResponse) GetWins() int32 {
	if o == nil || IsNil(o.Wins) {
		var ret int32
		return ret
	}
	return *o.Wins
}

// GetWinsOk returns a tuple with the Wins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamObjectResponse) GetWinsOk() (*int32, bool) {
	if o == nil || IsNil(o.Wins) {
		return nil, false
	}
	return o.Wins, true
}

// HasWins returns a boolean if a field has been set.
func (o *TeamObjectResponse) HasWins() bool {
	if o != nil && !IsNil(o.Wins) {
		return true
	}

	return false
}

// SetWins gets a reference to the given int32 and assigns it to the Wins field.
func (o *TeamObjectResponse) SetWins(v int32) {
	o.Wins = &v
}

// GetLosses returns the Losses field value if set, zero value otherwise.
func (o *TeamObjectResponse) GetLosses() int32 {
	if o == nil || IsNil(o.Losses) {
		var ret int32
		return ret
	}
	return *o.Losses
}

// GetLossesOk returns a tuple with the Losses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamObjectResponse) GetLossesOk() (*int32, bool) {
	if o == nil || IsNil(o.Losses) {
		return nil, false
	}
	return o.Losses, true
}

// HasLosses returns a boolean if a field has been set.
func (o *TeamObjectResponse) HasLosses() bool {
	if o != nil && !IsNil(o.Losses) {
		return true
	}

	return false
}

// SetLosses gets a reference to the given int32 and assigns it to the Losses field.
func (o *TeamObjectResponse) SetLosses(v int32) {
	o.Losses = &v
}

// GetLastMatchTime returns the LastMatchTime field value if set, zero value otherwise.
func (o *TeamObjectResponse) GetLastMatchTime() int32 {
	if o == nil || IsNil(o.LastMatchTime) {
		var ret int32
		return ret
	}
	return *o.LastMatchTime
}

// GetLastMatchTimeOk returns a tuple with the LastMatchTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamObjectResponse) GetLastMatchTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.LastMatchTime) {
		return nil, false
	}
	return o.LastMatchTime, true
}

// HasLastMatchTime returns a boolean if a field has been set.
func (o *TeamObjectResponse) HasLastMatchTime() bool {
	if o != nil && !IsNil(o.LastMatchTime) {
		return true
	}

	return false
}

// SetLastMatchTime gets a reference to the given int32 and assigns it to the LastMatchTime field.
func (o *TeamObjectResponse) SetLastMatchTime(v int32) {
	o.LastMatchTime = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TeamObjectResponse) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TeamObjectResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *TeamObjectResponse) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *TeamObjectResponse) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *TeamObjectResponse) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *TeamObjectResponse) UnsetName() {
	o.Name.Unset()
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *TeamObjectResponse) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamObjectResponse) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *TeamObjectResponse) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *TeamObjectResponse) SetTag(v string) {
	o.Tag = &v
}

func (o TeamObjectResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamObjectResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TeamId) {
		toSerialize["team_id"] = o.TeamId
	}
	if !IsNil(o.Rating) {
		toSerialize["rating"] = o.Rating
	}
	if !IsNil(o.Wins) {
		toSerialize["wins"] = o.Wins
	}
	if !IsNil(o.Losses) {
		toSerialize["losses"] = o.Losses
	}
	if !IsNil(o.LastMatchTime) {
		toSerialize["last_match_time"] = o.LastMatchTime
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	return toSerialize, nil
}

type NullableTeamObjectResponse struct {
	value *TeamObjectResponse
	isSet bool
}

func (v NullableTeamObjectResponse) Get() *TeamObjectResponse {
	return v.value
}

func (v *NullableTeamObjectResponse) Set(val *TeamObjectResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamObjectResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamObjectResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamObjectResponse(val *TeamObjectResponse) *NullableTeamObjectResponse {
	return &NullableTeamObjectResponse{value: val, isSet: true}
}

func (v NullableTeamObjectResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamObjectResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


