/*
OpenDota API

# Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  Without a key, you can make 2,000 free calls per day at a rate limit of 60 requests/minute. We also offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.     

API version: 25.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TeamHeroesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamHeroesResponse{}

// TeamHeroesResponse struct for TeamHeroesResponse
type TeamHeroesResponse struct {
	// The ID value of the hero played
	HeroId *int32 `json:"hero_id,omitempty"`
	// Hero name
	Name *string `json:"name,omitempty"`
	// Number of games played
	GamesPlayed *int32 `json:"games_played,omitempty"`
	// Number of wins
	Wins *int32 `json:"wins,omitempty"`
}

// NewTeamHeroesResponse instantiates a new TeamHeroesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamHeroesResponse() *TeamHeroesResponse {
	this := TeamHeroesResponse{}
	return &this
}

// NewTeamHeroesResponseWithDefaults instantiates a new TeamHeroesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamHeroesResponseWithDefaults() *TeamHeroesResponse {
	this := TeamHeroesResponse{}
	return &this
}

// GetHeroId returns the HeroId field value if set, zero value otherwise.
func (o *TeamHeroesResponse) GetHeroId() int32 {
	if o == nil || IsNil(o.HeroId) {
		var ret int32
		return ret
	}
	return *o.HeroId
}

// GetHeroIdOk returns a tuple with the HeroId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamHeroesResponse) GetHeroIdOk() (*int32, bool) {
	if o == nil || IsNil(o.HeroId) {
		return nil, false
	}
	return o.HeroId, true
}

// HasHeroId returns a boolean if a field has been set.
func (o *TeamHeroesResponse) HasHeroId() bool {
	if o != nil && !IsNil(o.HeroId) {
		return true
	}

	return false
}

// SetHeroId gets a reference to the given int32 and assigns it to the HeroId field.
func (o *TeamHeroesResponse) SetHeroId(v int32) {
	o.HeroId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TeamHeroesResponse) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamHeroesResponse) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TeamHeroesResponse) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TeamHeroesResponse) SetName(v string) {
	o.Name = &v
}

// GetGamesPlayed returns the GamesPlayed field value if set, zero value otherwise.
func (o *TeamHeroesResponse) GetGamesPlayed() int32 {
	if o == nil || IsNil(o.GamesPlayed) {
		var ret int32
		return ret
	}
	return *o.GamesPlayed
}

// GetGamesPlayedOk returns a tuple with the GamesPlayed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamHeroesResponse) GetGamesPlayedOk() (*int32, bool) {
	if o == nil || IsNil(o.GamesPlayed) {
		return nil, false
	}
	return o.GamesPlayed, true
}

// HasGamesPlayed returns a boolean if a field has been set.
func (o *TeamHeroesResponse) HasGamesPlayed() bool {
	if o != nil && !IsNil(o.GamesPlayed) {
		return true
	}

	return false
}

// SetGamesPlayed gets a reference to the given int32 and assigns it to the GamesPlayed field.
func (o *TeamHeroesResponse) SetGamesPlayed(v int32) {
	o.GamesPlayed = &v
}

// GetWins returns the Wins field value if set, zero value otherwise.
func (o *TeamHeroesResponse) GetWins() int32 {
	if o == nil || IsNil(o.Wins) {
		var ret int32
		return ret
	}
	return *o.Wins
}

// GetWinsOk returns a tuple with the Wins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamHeroesResponse) GetWinsOk() (*int32, bool) {
	if o == nil || IsNil(o.Wins) {
		return nil, false
	}
	return o.Wins, true
}

// HasWins returns a boolean if a field has been set.
func (o *TeamHeroesResponse) HasWins() bool {
	if o != nil && !IsNil(o.Wins) {
		return true
	}

	return false
}

// SetWins gets a reference to the given int32 and assigns it to the Wins field.
func (o *TeamHeroesResponse) SetWins(v int32) {
	o.Wins = &v
}

func (o TeamHeroesResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamHeroesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HeroId) {
		toSerialize["hero_id"] = o.HeroId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.GamesPlayed) {
		toSerialize["games_played"] = o.GamesPlayed
	}
	if !IsNil(o.Wins) {
		toSerialize["wins"] = o.Wins
	}
	return toSerialize, nil
}

type NullableTeamHeroesResponse struct {
	value *TeamHeroesResponse
	isSet bool
}

func (v NullableTeamHeroesResponse) Get() *TeamHeroesResponse {
	return v.value
}

func (v *NullableTeamHeroesResponse) Set(val *TeamHeroesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamHeroesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamHeroesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamHeroesResponse(val *TeamHeroesResponse) *NullableTeamHeroesResponse {
	return &NullableTeamHeroesResponse{value: val, isSet: true}
}

func (v NullableTeamHeroesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamHeroesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


