/*
OpenDota API

# Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  Without a key, you can make 2,000 free calls per day at a rate limit of 60 requests/minute. We also offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.     

API version: 25.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SchemaResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaResponse{}

// SchemaResponse struct for SchemaResponse
type SchemaResponse struct {
	// table_name
	TableName *string `json:"table_name,omitempty"`
	// column_name
	ColumnName *string `json:"column_name,omitempty"`
	// data_type
	DataType *string `json:"data_type,omitempty"`
}

// NewSchemaResponse instantiates a new SchemaResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaResponse() *SchemaResponse {
	this := SchemaResponse{}
	return &this
}

// NewSchemaResponseWithDefaults instantiates a new SchemaResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaResponseWithDefaults() *SchemaResponse {
	this := SchemaResponse{}
	return &this
}

// GetTableName returns the TableName field value if set, zero value otherwise.
func (o *SchemaResponse) GetTableName() string {
	if o == nil || IsNil(o.TableName) {
		var ret string
		return ret
	}
	return *o.TableName
}

// GetTableNameOk returns a tuple with the TableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaResponse) GetTableNameOk() (*string, bool) {
	if o == nil || IsNil(o.TableName) {
		return nil, false
	}
	return o.TableName, true
}

// HasTableName returns a boolean if a field has been set.
func (o *SchemaResponse) HasTableName() bool {
	if o != nil && !IsNil(o.TableName) {
		return true
	}

	return false
}

// SetTableName gets a reference to the given string and assigns it to the TableName field.
func (o *SchemaResponse) SetTableName(v string) {
	o.TableName = &v
}

// GetColumnName returns the ColumnName field value if set, zero value otherwise.
func (o *SchemaResponse) GetColumnName() string {
	if o == nil || IsNil(o.ColumnName) {
		var ret string
		return ret
	}
	return *o.ColumnName
}

// GetColumnNameOk returns a tuple with the ColumnName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaResponse) GetColumnNameOk() (*string, bool) {
	if o == nil || IsNil(o.ColumnName) {
		return nil, false
	}
	return o.ColumnName, true
}

// HasColumnName returns a boolean if a field has been set.
func (o *SchemaResponse) HasColumnName() bool {
	if o != nil && !IsNil(o.ColumnName) {
		return true
	}

	return false
}

// SetColumnName gets a reference to the given string and assigns it to the ColumnName field.
func (o *SchemaResponse) SetColumnName(v string) {
	o.ColumnName = &v
}

// GetDataType returns the DataType field value if set, zero value otherwise.
func (o *SchemaResponse) GetDataType() string {
	if o == nil || IsNil(o.DataType) {
		var ret string
		return ret
	}
	return *o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaResponse) GetDataTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DataType) {
		return nil, false
	}
	return o.DataType, true
}

// HasDataType returns a boolean if a field has been set.
func (o *SchemaResponse) HasDataType() bool {
	if o != nil && !IsNil(o.DataType) {
		return true
	}

	return false
}

// SetDataType gets a reference to the given string and assigns it to the DataType field.
func (o *SchemaResponse) SetDataType(v string) {
	o.DataType = &v
}

func (o SchemaResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TableName) {
		toSerialize["table_name"] = o.TableName
	}
	if !IsNil(o.ColumnName) {
		toSerialize["column_name"] = o.ColumnName
	}
	if !IsNil(o.DataType) {
		toSerialize["data_type"] = o.DataType
	}
	return toSerialize, nil
}

type NullableSchemaResponse struct {
	value *SchemaResponse
	isSet bool
}

func (v NullableSchemaResponse) Get() *SchemaResponse {
	return v.value
}

func (v *NullableSchemaResponse) Set(val *SchemaResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaResponse(val *SchemaResponse) *NullableSchemaResponse {
	return &NullableSchemaResponse{value: val, isSet: true}
}

func (v NullableSchemaResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


