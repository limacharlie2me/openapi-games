/*
OpenDota API

# Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  Without a key, you can make 2,000 free calls per day at a rate limit of 60 requests/minute. We also offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.     

API version: 25.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MatchResponsePicksBansInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MatchResponsePicksBansInner{}

// MatchResponsePicksBansInner struct for MatchResponsePicksBansInner
type MatchResponsePicksBansInner struct {
	// Boolean indicating whether the choice is a pick or a ban
	IsPick *bool `json:"is_pick,omitempty"`
	// The ID value of the hero played
	HeroId *int32 `json:"hero_id,omitempty"`
	// The team that picked or banned the hero
	Team *int32 `json:"team,omitempty"`
	// The order of the pick or ban
	Order *int32 `json:"order,omitempty"`
}

// NewMatchResponsePicksBansInner instantiates a new MatchResponsePicksBansInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMatchResponsePicksBansInner() *MatchResponsePicksBansInner {
	this := MatchResponsePicksBansInner{}
	return &this
}

// NewMatchResponsePicksBansInnerWithDefaults instantiates a new MatchResponsePicksBansInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMatchResponsePicksBansInnerWithDefaults() *MatchResponsePicksBansInner {
	this := MatchResponsePicksBansInner{}
	return &this
}

// GetIsPick returns the IsPick field value if set, zero value otherwise.
func (o *MatchResponsePicksBansInner) GetIsPick() bool {
	if o == nil || IsNil(o.IsPick) {
		var ret bool
		return ret
	}
	return *o.IsPick
}

// GetIsPickOk returns a tuple with the IsPick field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePicksBansInner) GetIsPickOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPick) {
		return nil, false
	}
	return o.IsPick, true
}

// HasIsPick returns a boolean if a field has been set.
func (o *MatchResponsePicksBansInner) HasIsPick() bool {
	if o != nil && !IsNil(o.IsPick) {
		return true
	}

	return false
}

// SetIsPick gets a reference to the given bool and assigns it to the IsPick field.
func (o *MatchResponsePicksBansInner) SetIsPick(v bool) {
	o.IsPick = &v
}

// GetHeroId returns the HeroId field value if set, zero value otherwise.
func (o *MatchResponsePicksBansInner) GetHeroId() int32 {
	if o == nil || IsNil(o.HeroId) {
		var ret int32
		return ret
	}
	return *o.HeroId
}

// GetHeroIdOk returns a tuple with the HeroId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePicksBansInner) GetHeroIdOk() (*int32, bool) {
	if o == nil || IsNil(o.HeroId) {
		return nil, false
	}
	return o.HeroId, true
}

// HasHeroId returns a boolean if a field has been set.
func (o *MatchResponsePicksBansInner) HasHeroId() bool {
	if o != nil && !IsNil(o.HeroId) {
		return true
	}

	return false
}

// SetHeroId gets a reference to the given int32 and assigns it to the HeroId field.
func (o *MatchResponsePicksBansInner) SetHeroId(v int32) {
	o.HeroId = &v
}

// GetTeam returns the Team field value if set, zero value otherwise.
func (o *MatchResponsePicksBansInner) GetTeam() int32 {
	if o == nil || IsNil(o.Team) {
		var ret int32
		return ret
	}
	return *o.Team
}

// GetTeamOk returns a tuple with the Team field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePicksBansInner) GetTeamOk() (*int32, bool) {
	if o == nil || IsNil(o.Team) {
		return nil, false
	}
	return o.Team, true
}

// HasTeam returns a boolean if a field has been set.
func (o *MatchResponsePicksBansInner) HasTeam() bool {
	if o != nil && !IsNil(o.Team) {
		return true
	}

	return false
}

// SetTeam gets a reference to the given int32 and assigns it to the Team field.
func (o *MatchResponsePicksBansInner) SetTeam(v int32) {
	o.Team = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *MatchResponsePicksBansInner) GetOrder() int32 {
	if o == nil || IsNil(o.Order) {
		var ret int32
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MatchResponsePicksBansInner) GetOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.Order) {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *MatchResponsePicksBansInner) HasOrder() bool {
	if o != nil && !IsNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given int32 and assigns it to the Order field.
func (o *MatchResponsePicksBansInner) SetOrder(v int32) {
	o.Order = &v
}

func (o MatchResponsePicksBansInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MatchResponsePicksBansInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsPick) {
		toSerialize["is_pick"] = o.IsPick
	}
	if !IsNil(o.HeroId) {
		toSerialize["hero_id"] = o.HeroId
	}
	if !IsNil(o.Team) {
		toSerialize["team"] = o.Team
	}
	if !IsNil(o.Order) {
		toSerialize["order"] = o.Order
	}
	return toSerialize, nil
}

type NullableMatchResponsePicksBansInner struct {
	value *MatchResponsePicksBansInner
	isSet bool
}

func (v NullableMatchResponsePicksBansInner) Get() *MatchResponsePicksBansInner {
	return v.value
}

func (v *NullableMatchResponsePicksBansInner) Set(val *MatchResponsePicksBansInner) {
	v.value = val
	v.isSet = true
}

func (v NullableMatchResponsePicksBansInner) IsSet() bool {
	return v.isSet
}

func (v *NullableMatchResponsePicksBansInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMatchResponsePicksBansInner(val *MatchResponsePicksBansInner) *NullableMatchResponsePicksBansInner {
	return &NullableMatchResponsePicksBansInner{value: val, isSet: true}
}

func (v NullableMatchResponsePicksBansInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMatchResponsePicksBansInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


