/*
OpenDota API

# Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  Without a key, you can make 2,000 free calls per day at a rate limit of 60 requests/minute. We also offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.     

API version: 25.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PlayerRankingsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlayerRankingsResponse{}

// PlayerRankingsResponse struct for PlayerRankingsResponse
type PlayerRankingsResponse struct {
	// The ID value of the hero played
	HeroId *int32 `json:"hero_id,omitempty"`
	// Hero score
	Score *float32 `json:"score,omitempty"`
	// percent_rank
	PercentRank *float32 `json:"percent_rank,omitempty"`
	// numeric_rank
	Card *int32 `json:"card,omitempty"`
}

// NewPlayerRankingsResponse instantiates a new PlayerRankingsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlayerRankingsResponse() *PlayerRankingsResponse {
	this := PlayerRankingsResponse{}
	return &this
}

// NewPlayerRankingsResponseWithDefaults instantiates a new PlayerRankingsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayerRankingsResponseWithDefaults() *PlayerRankingsResponse {
	this := PlayerRankingsResponse{}
	return &this
}

// GetHeroId returns the HeroId field value if set, zero value otherwise.
func (o *PlayerRankingsResponse) GetHeroId() int32 {
	if o == nil || IsNil(o.HeroId) {
		var ret int32
		return ret
	}
	return *o.HeroId
}

// GetHeroIdOk returns a tuple with the HeroId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerRankingsResponse) GetHeroIdOk() (*int32, bool) {
	if o == nil || IsNil(o.HeroId) {
		return nil, false
	}
	return o.HeroId, true
}

// HasHeroId returns a boolean if a field has been set.
func (o *PlayerRankingsResponse) HasHeroId() bool {
	if o != nil && !IsNil(o.HeroId) {
		return true
	}

	return false
}

// SetHeroId gets a reference to the given int32 and assigns it to the HeroId field.
func (o *PlayerRankingsResponse) SetHeroId(v int32) {
	o.HeroId = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *PlayerRankingsResponse) GetScore() float32 {
	if o == nil || IsNil(o.Score) {
		var ret float32
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerRankingsResponse) GetScoreOk() (*float32, bool) {
	if o == nil || IsNil(o.Score) {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *PlayerRankingsResponse) HasScore() bool {
	if o != nil && !IsNil(o.Score) {
		return true
	}

	return false
}

// SetScore gets a reference to the given float32 and assigns it to the Score field.
func (o *PlayerRankingsResponse) SetScore(v float32) {
	o.Score = &v
}

// GetPercentRank returns the PercentRank field value if set, zero value otherwise.
func (o *PlayerRankingsResponse) GetPercentRank() float32 {
	if o == nil || IsNil(o.PercentRank) {
		var ret float32
		return ret
	}
	return *o.PercentRank
}

// GetPercentRankOk returns a tuple with the PercentRank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerRankingsResponse) GetPercentRankOk() (*float32, bool) {
	if o == nil || IsNil(o.PercentRank) {
		return nil, false
	}
	return o.PercentRank, true
}

// HasPercentRank returns a boolean if a field has been set.
func (o *PlayerRankingsResponse) HasPercentRank() bool {
	if o != nil && !IsNil(o.PercentRank) {
		return true
	}

	return false
}

// SetPercentRank gets a reference to the given float32 and assigns it to the PercentRank field.
func (o *PlayerRankingsResponse) SetPercentRank(v float32) {
	o.PercentRank = &v
}

// GetCard returns the Card field value if set, zero value otherwise.
func (o *PlayerRankingsResponse) GetCard() int32 {
	if o == nil || IsNil(o.Card) {
		var ret int32
		return ret
	}
	return *o.Card
}

// GetCardOk returns a tuple with the Card field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerRankingsResponse) GetCardOk() (*int32, bool) {
	if o == nil || IsNil(o.Card) {
		return nil, false
	}
	return o.Card, true
}

// HasCard returns a boolean if a field has been set.
func (o *PlayerRankingsResponse) HasCard() bool {
	if o != nil && !IsNil(o.Card) {
		return true
	}

	return false
}

// SetCard gets a reference to the given int32 and assigns it to the Card field.
func (o *PlayerRankingsResponse) SetCard(v int32) {
	o.Card = &v
}

func (o PlayerRankingsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlayerRankingsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HeroId) {
		toSerialize["hero_id"] = o.HeroId
	}
	if !IsNil(o.Score) {
		toSerialize["score"] = o.Score
	}
	if !IsNil(o.PercentRank) {
		toSerialize["percent_rank"] = o.PercentRank
	}
	if !IsNil(o.Card) {
		toSerialize["card"] = o.Card
	}
	return toSerialize, nil
}

type NullablePlayerRankingsResponse struct {
	value *PlayerRankingsResponse
	isSet bool
}

func (v NullablePlayerRankingsResponse) Get() *PlayerRankingsResponse {
	return v.value
}

func (v *NullablePlayerRankingsResponse) Set(val *PlayerRankingsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayerRankingsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayerRankingsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayerRankingsResponse(val *PlayerRankingsResponse) *NullablePlayerRankingsResponse {
	return &NullablePlayerRankingsResponse{value: val, isSet: true}
}

func (v NullablePlayerRankingsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayerRankingsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


