/*
OpenDota API

# Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  Without a key, you can make 2,000 free calls per day at a rate limit of 60 requests/minute. We also offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.     

API version: 25.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PlayerWordCloudResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlayerWordCloudResponse{}

// PlayerWordCloudResponse struct for PlayerWordCloudResponse
type PlayerWordCloudResponse struct {
	// my_word_counts
	MyWordCounts map[string]interface{} `json:"my_word_counts,omitempty"`
	// all_word_counts
	AllWordCounts map[string]interface{} `json:"all_word_counts,omitempty"`
}

// NewPlayerWordCloudResponse instantiates a new PlayerWordCloudResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlayerWordCloudResponse() *PlayerWordCloudResponse {
	this := PlayerWordCloudResponse{}
	return &this
}

// NewPlayerWordCloudResponseWithDefaults instantiates a new PlayerWordCloudResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayerWordCloudResponseWithDefaults() *PlayerWordCloudResponse {
	this := PlayerWordCloudResponse{}
	return &this
}

// GetMyWordCounts returns the MyWordCounts field value if set, zero value otherwise.
func (o *PlayerWordCloudResponse) GetMyWordCounts() map[string]interface{} {
	if o == nil || IsNil(o.MyWordCounts) {
		var ret map[string]interface{}
		return ret
	}
	return o.MyWordCounts
}

// GetMyWordCountsOk returns a tuple with the MyWordCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerWordCloudResponse) GetMyWordCountsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.MyWordCounts) {
		return map[string]interface{}{}, false
	}
	return o.MyWordCounts, true
}

// HasMyWordCounts returns a boolean if a field has been set.
func (o *PlayerWordCloudResponse) HasMyWordCounts() bool {
	if o != nil && !IsNil(o.MyWordCounts) {
		return true
	}

	return false
}

// SetMyWordCounts gets a reference to the given map[string]interface{} and assigns it to the MyWordCounts field.
func (o *PlayerWordCloudResponse) SetMyWordCounts(v map[string]interface{}) {
	o.MyWordCounts = v
}

// GetAllWordCounts returns the AllWordCounts field value if set, zero value otherwise.
func (o *PlayerWordCloudResponse) GetAllWordCounts() map[string]interface{} {
	if o == nil || IsNil(o.AllWordCounts) {
		var ret map[string]interface{}
		return ret
	}
	return o.AllWordCounts
}

// GetAllWordCountsOk returns a tuple with the AllWordCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerWordCloudResponse) GetAllWordCountsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AllWordCounts) {
		return map[string]interface{}{}, false
	}
	return o.AllWordCounts, true
}

// HasAllWordCounts returns a boolean if a field has been set.
func (o *PlayerWordCloudResponse) HasAllWordCounts() bool {
	if o != nil && !IsNil(o.AllWordCounts) {
		return true
	}

	return false
}

// SetAllWordCounts gets a reference to the given map[string]interface{} and assigns it to the AllWordCounts field.
func (o *PlayerWordCloudResponse) SetAllWordCounts(v map[string]interface{}) {
	o.AllWordCounts = v
}

func (o PlayerWordCloudResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlayerWordCloudResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MyWordCounts) {
		toSerialize["my_word_counts"] = o.MyWordCounts
	}
	if !IsNil(o.AllWordCounts) {
		toSerialize["all_word_counts"] = o.AllWordCounts
	}
	return toSerialize, nil
}

type NullablePlayerWordCloudResponse struct {
	value *PlayerWordCloudResponse
	isSet bool
}

func (v NullablePlayerWordCloudResponse) Get() *PlayerWordCloudResponse {
	return v.value
}

func (v *NullablePlayerWordCloudResponse) Set(val *PlayerWordCloudResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayerWordCloudResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayerWordCloudResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayerWordCloudResponse(val *PlayerWordCloudResponse) *NullablePlayerWordCloudResponse {
	return &NullablePlayerWordCloudResponse{value: val, isSet: true}
}

func (v NullablePlayerWordCloudResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayerWordCloudResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


