/*
OpenDota API

# Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  Without a key, you can make 2,000 free calls per day at a rate limit of 60 requests/minute. We also offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.     

API version: 25.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BenchmarksResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BenchmarksResponse{}

// BenchmarksResponse struct for BenchmarksResponse
type BenchmarksResponse struct {
	// The ID value of the hero played
	HeroId *int32 `json:"hero_id,omitempty"`
	Result *BenchmarksResponseResult `json:"result,omitempty"`
}

// NewBenchmarksResponse instantiates a new BenchmarksResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBenchmarksResponse() *BenchmarksResponse {
	this := BenchmarksResponse{}
	return &this
}

// NewBenchmarksResponseWithDefaults instantiates a new BenchmarksResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBenchmarksResponseWithDefaults() *BenchmarksResponse {
	this := BenchmarksResponse{}
	return &this
}

// GetHeroId returns the HeroId field value if set, zero value otherwise.
func (o *BenchmarksResponse) GetHeroId() int32 {
	if o == nil || IsNil(o.HeroId) {
		var ret int32
		return ret
	}
	return *o.HeroId
}

// GetHeroIdOk returns a tuple with the HeroId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BenchmarksResponse) GetHeroIdOk() (*int32, bool) {
	if o == nil || IsNil(o.HeroId) {
		return nil, false
	}
	return o.HeroId, true
}

// HasHeroId returns a boolean if a field has been set.
func (o *BenchmarksResponse) HasHeroId() bool {
	if o != nil && !IsNil(o.HeroId) {
		return true
	}

	return false
}

// SetHeroId gets a reference to the given int32 and assigns it to the HeroId field.
func (o *BenchmarksResponse) SetHeroId(v int32) {
	o.HeroId = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *BenchmarksResponse) GetResult() BenchmarksResponseResult {
	if o == nil || IsNil(o.Result) {
		var ret BenchmarksResponseResult
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BenchmarksResponse) GetResultOk() (*BenchmarksResponseResult, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *BenchmarksResponse) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given BenchmarksResponseResult and assigns it to the Result field.
func (o *BenchmarksResponse) SetResult(v BenchmarksResponseResult) {
	o.Result = &v
}

func (o BenchmarksResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BenchmarksResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HeroId) {
		toSerialize["hero_id"] = o.HeroId
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	return toSerialize, nil
}

type NullableBenchmarksResponse struct {
	value *BenchmarksResponse
	isSet bool
}

func (v NullableBenchmarksResponse) Get() *BenchmarksResponse {
	return v.value
}

func (v *NullableBenchmarksResponse) Set(val *BenchmarksResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBenchmarksResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBenchmarksResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBenchmarksResponse(val *BenchmarksResponse) *NullableBenchmarksResponse {
	return &NullableBenchmarksResponse{value: val, isSet: true}
}

func (v NullableBenchmarksResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBenchmarksResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


