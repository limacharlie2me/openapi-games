/*
OpenDota API

# Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  Without a key, you can make 2,000 free calls per day at a rate limit of 60 requests/minute. We also offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.     

API version: 25.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ScenarioMiscResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScenarioMiscResponse{}

// ScenarioMiscResponse struct for ScenarioMiscResponse
type ScenarioMiscResponse struct {
	// The scenario's name or description
	Scenario *string `json:"scenario,omitempty"`
	// Boolean indicating whether Radiant executed this scenario
	IsRadiant *bool `json:"is_radiant,omitempty"`
	// Region the game was played in
	Region *int32 `json:"region,omitempty"`
	// The number of games where this scenario occurred
	Games *string `json:"games,omitempty"`
	// The number of games won where this scenario occured
	Wins *string `json:"wins,omitempty"`
}

// NewScenarioMiscResponse instantiates a new ScenarioMiscResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScenarioMiscResponse() *ScenarioMiscResponse {
	this := ScenarioMiscResponse{}
	return &this
}

// NewScenarioMiscResponseWithDefaults instantiates a new ScenarioMiscResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScenarioMiscResponseWithDefaults() *ScenarioMiscResponse {
	this := ScenarioMiscResponse{}
	return &this
}

// GetScenario returns the Scenario field value if set, zero value otherwise.
func (o *ScenarioMiscResponse) GetScenario() string {
	if o == nil || IsNil(o.Scenario) {
		var ret string
		return ret
	}
	return *o.Scenario
}

// GetScenarioOk returns a tuple with the Scenario field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScenarioMiscResponse) GetScenarioOk() (*string, bool) {
	if o == nil || IsNil(o.Scenario) {
		return nil, false
	}
	return o.Scenario, true
}

// HasScenario returns a boolean if a field has been set.
func (o *ScenarioMiscResponse) HasScenario() bool {
	if o != nil && !IsNil(o.Scenario) {
		return true
	}

	return false
}

// SetScenario gets a reference to the given string and assigns it to the Scenario field.
func (o *ScenarioMiscResponse) SetScenario(v string) {
	o.Scenario = &v
}

// GetIsRadiant returns the IsRadiant field value if set, zero value otherwise.
func (o *ScenarioMiscResponse) GetIsRadiant() bool {
	if o == nil || IsNil(o.IsRadiant) {
		var ret bool
		return ret
	}
	return *o.IsRadiant
}

// GetIsRadiantOk returns a tuple with the IsRadiant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScenarioMiscResponse) GetIsRadiantOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRadiant) {
		return nil, false
	}
	return o.IsRadiant, true
}

// HasIsRadiant returns a boolean if a field has been set.
func (o *ScenarioMiscResponse) HasIsRadiant() bool {
	if o != nil && !IsNil(o.IsRadiant) {
		return true
	}

	return false
}

// SetIsRadiant gets a reference to the given bool and assigns it to the IsRadiant field.
func (o *ScenarioMiscResponse) SetIsRadiant(v bool) {
	o.IsRadiant = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *ScenarioMiscResponse) GetRegion() int32 {
	if o == nil || IsNil(o.Region) {
		var ret int32
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScenarioMiscResponse) GetRegionOk() (*int32, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *ScenarioMiscResponse) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given int32 and assigns it to the Region field.
func (o *ScenarioMiscResponse) SetRegion(v int32) {
	o.Region = &v
}

// GetGames returns the Games field value if set, zero value otherwise.
func (o *ScenarioMiscResponse) GetGames() string {
	if o == nil || IsNil(o.Games) {
		var ret string
		return ret
	}
	return *o.Games
}

// GetGamesOk returns a tuple with the Games field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScenarioMiscResponse) GetGamesOk() (*string, bool) {
	if o == nil || IsNil(o.Games) {
		return nil, false
	}
	return o.Games, true
}

// HasGames returns a boolean if a field has been set.
func (o *ScenarioMiscResponse) HasGames() bool {
	if o != nil && !IsNil(o.Games) {
		return true
	}

	return false
}

// SetGames gets a reference to the given string and assigns it to the Games field.
func (o *ScenarioMiscResponse) SetGames(v string) {
	o.Games = &v
}

// GetWins returns the Wins field value if set, zero value otherwise.
func (o *ScenarioMiscResponse) GetWins() string {
	if o == nil || IsNil(o.Wins) {
		var ret string
		return ret
	}
	return *o.Wins
}

// GetWinsOk returns a tuple with the Wins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScenarioMiscResponse) GetWinsOk() (*string, bool) {
	if o == nil || IsNil(o.Wins) {
		return nil, false
	}
	return o.Wins, true
}

// HasWins returns a boolean if a field has been set.
func (o *ScenarioMiscResponse) HasWins() bool {
	if o != nil && !IsNil(o.Wins) {
		return true
	}

	return false
}

// SetWins gets a reference to the given string and assigns it to the Wins field.
func (o *ScenarioMiscResponse) SetWins(v string) {
	o.Wins = &v
}

func (o ScenarioMiscResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScenarioMiscResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Scenario) {
		toSerialize["scenario"] = o.Scenario
	}
	if !IsNil(o.IsRadiant) {
		toSerialize["is_radiant"] = o.IsRadiant
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.Games) {
		toSerialize["games"] = o.Games
	}
	if !IsNil(o.Wins) {
		toSerialize["wins"] = o.Wins
	}
	return toSerialize, nil
}

type NullableScenarioMiscResponse struct {
	value *ScenarioMiscResponse
	isSet bool
}

func (v NullableScenarioMiscResponse) Get() *ScenarioMiscResponse {
	return v.value
}

func (v *NullableScenarioMiscResponse) Set(val *ScenarioMiscResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableScenarioMiscResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableScenarioMiscResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScenarioMiscResponse(val *ScenarioMiscResponse) *NullableScenarioMiscResponse {
	return &NullableScenarioMiscResponse{value: val, isSet: true}
}

func (v NullableScenarioMiscResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScenarioMiscResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


