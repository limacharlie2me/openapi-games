/*
OpenDota API

# Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  Without a key, you can make 2,000 free calls per day at a rate limit of 60 requests/minute. We also offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.     

API version: 25.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// GetConstantsByResource200Response - struct for GetConstantsByResource200Response
type GetConstantsByResource200Response struct {
	ArrayOfGetConstantsByResource200ResponseOneOfInner *[]GetConstantsByResource200ResponseOneOfInner
	MapmapOfStringAny *map[string]interface{}
}

// []GetConstantsByResource200ResponseOneOfInnerAsGetConstantsByResource200Response is a convenience function that returns []GetConstantsByResource200ResponseOneOfInner wrapped in GetConstantsByResource200Response
func ArrayOfGetConstantsByResource200ResponseOneOfInnerAsGetConstantsByResource200Response(v *[]GetConstantsByResource200ResponseOneOfInner) GetConstantsByResource200Response {
	return GetConstantsByResource200Response{
		ArrayOfGetConstantsByResource200ResponseOneOfInner: v,
	}
}

// map[string]interface{}AsGetConstantsByResource200Response is a convenience function that returns map[string]interface{} wrapped in GetConstantsByResource200Response
func MapmapOfStringAnyAsGetConstantsByResource200Response(v *map[string]interface{}) GetConstantsByResource200Response {
	return GetConstantsByResource200Response{
		MapmapOfStringAny: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetConstantsByResource200Response) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into ArrayOfGetConstantsByResource200ResponseOneOfInner
	err = newStrictDecoder(data).Decode(&dst.ArrayOfGetConstantsByResource200ResponseOneOfInner)
	if err == nil {
		jsonArrayOfGetConstantsByResource200ResponseOneOfInner, _ := json.Marshal(dst.ArrayOfGetConstantsByResource200ResponseOneOfInner)
		if string(jsonArrayOfGetConstantsByResource200ResponseOneOfInner) == "{}" { // empty struct
			dst.ArrayOfGetConstantsByResource200ResponseOneOfInner = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfGetConstantsByResource200ResponseOneOfInner = nil
	}

	// try to unmarshal data into MapmapOfStringAny
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringAny)
	if err == nil {
		jsonMapmapOfStringAny, _ := json.Marshal(dst.MapmapOfStringAny)
		if string(jsonMapmapOfStringAny) == "{}" { // empty struct
			dst.MapmapOfStringAny = nil
		} else {
			match++
		}
	} else {
		dst.MapmapOfStringAny = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfGetConstantsByResource200ResponseOneOfInner = nil
		dst.MapmapOfStringAny = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetConstantsByResource200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetConstantsByResource200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetConstantsByResource200Response) MarshalJSON() ([]byte, error) {
	if src.ArrayOfGetConstantsByResource200ResponseOneOfInner != nil {
		return json.Marshal(&src.ArrayOfGetConstantsByResource200ResponseOneOfInner)
	}

	if src.MapmapOfStringAny != nil {
		return json.Marshal(&src.MapmapOfStringAny)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetConstantsByResource200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfGetConstantsByResource200ResponseOneOfInner != nil {
		return obj.ArrayOfGetConstantsByResource200ResponseOneOfInner
	}

	if obj.MapmapOfStringAny != nil {
		return obj.MapmapOfStringAny
	}

	// all schemas are nil
	return nil
}

type NullableGetConstantsByResource200Response struct {
	value *GetConstantsByResource200Response
	isSet bool
}

func (v NullableGetConstantsByResource200Response) Get() *GetConstantsByResource200Response {
	return v.value
}

func (v *NullableGetConstantsByResource200Response) Set(val *GetConstantsByResource200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetConstantsByResource200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetConstantsByResource200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetConstantsByResource200Response(val *GetConstantsByResource200Response) *NullableGetConstantsByResource200Response {
	return &NullableGetConstantsByResource200Response{value: val, isSet: true}
}

func (v NullableGetConstantsByResource200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetConstantsByResource200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


