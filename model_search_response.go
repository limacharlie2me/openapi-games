/*
OpenDota API

# Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  Without a key, you can make 2,000 free calls per day at a rate limit of 60 requests/minute. We also offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.     

API version: 25.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SearchResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchResponse{}

// SearchResponse struct for SearchResponse
type SearchResponse struct {
	// The player account ID
	AccountId *int32 `json:"account_id,omitempty"`
	// avatarfull
	Avatarfull NullableString `json:"avatarfull,omitempty"`
	// Player's Steam name
	Personaname NullableString `json:"personaname,omitempty"`
	// last_match_time. May not be present or null.
	LastMatchTime *string `json:"last_match_time,omitempty"`
	// similarity
	Similarity *float32 `json:"similarity,omitempty"`
}

// NewSearchResponse instantiates a new SearchResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchResponse() *SearchResponse {
	this := SearchResponse{}
	return &this
}

// NewSearchResponseWithDefaults instantiates a new SearchResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchResponseWithDefaults() *SearchResponse {
	this := SearchResponse{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *SearchResponse) GetAccountId() int32 {
	if o == nil || IsNil(o.AccountId) {
		var ret int32
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetAccountIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *SearchResponse) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given int32 and assigns it to the AccountId field.
func (o *SearchResponse) SetAccountId(v int32) {
	o.AccountId = &v
}

// GetAvatarfull returns the Avatarfull field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchResponse) GetAvatarfull() string {
	if o == nil || IsNil(o.Avatarfull.Get()) {
		var ret string
		return ret
	}
	return *o.Avatarfull.Get()
}

// GetAvatarfullOk returns a tuple with the Avatarfull field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchResponse) GetAvatarfullOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Avatarfull.Get(), o.Avatarfull.IsSet()
}

// HasAvatarfull returns a boolean if a field has been set.
func (o *SearchResponse) HasAvatarfull() bool {
	if o != nil && o.Avatarfull.IsSet() {
		return true
	}

	return false
}

// SetAvatarfull gets a reference to the given NullableString and assigns it to the Avatarfull field.
func (o *SearchResponse) SetAvatarfull(v string) {
	o.Avatarfull.Set(&v)
}
// SetAvatarfullNil sets the value for Avatarfull to be an explicit nil
func (o *SearchResponse) SetAvatarfullNil() {
	o.Avatarfull.Set(nil)
}

// UnsetAvatarfull ensures that no value is present for Avatarfull, not even an explicit nil
func (o *SearchResponse) UnsetAvatarfull() {
	o.Avatarfull.Unset()
}

// GetPersonaname returns the Personaname field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchResponse) GetPersonaname() string {
	if o == nil || IsNil(o.Personaname.Get()) {
		var ret string
		return ret
	}
	return *o.Personaname.Get()
}

// GetPersonanameOk returns a tuple with the Personaname field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchResponse) GetPersonanameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Personaname.Get(), o.Personaname.IsSet()
}

// HasPersonaname returns a boolean if a field has been set.
func (o *SearchResponse) HasPersonaname() bool {
	if o != nil && o.Personaname.IsSet() {
		return true
	}

	return false
}

// SetPersonaname gets a reference to the given NullableString and assigns it to the Personaname field.
func (o *SearchResponse) SetPersonaname(v string) {
	o.Personaname.Set(&v)
}
// SetPersonanameNil sets the value for Personaname to be an explicit nil
func (o *SearchResponse) SetPersonanameNil() {
	o.Personaname.Set(nil)
}

// UnsetPersonaname ensures that no value is present for Personaname, not even an explicit nil
func (o *SearchResponse) UnsetPersonaname() {
	o.Personaname.Unset()
}

// GetLastMatchTime returns the LastMatchTime field value if set, zero value otherwise.
func (o *SearchResponse) GetLastMatchTime() string {
	if o == nil || IsNil(o.LastMatchTime) {
		var ret string
		return ret
	}
	return *o.LastMatchTime
}

// GetLastMatchTimeOk returns a tuple with the LastMatchTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetLastMatchTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LastMatchTime) {
		return nil, false
	}
	return o.LastMatchTime, true
}

// HasLastMatchTime returns a boolean if a field has been set.
func (o *SearchResponse) HasLastMatchTime() bool {
	if o != nil && !IsNil(o.LastMatchTime) {
		return true
	}

	return false
}

// SetLastMatchTime gets a reference to the given string and assigns it to the LastMatchTime field.
func (o *SearchResponse) SetLastMatchTime(v string) {
	o.LastMatchTime = &v
}

// GetSimilarity returns the Similarity field value if set, zero value otherwise.
func (o *SearchResponse) GetSimilarity() float32 {
	if o == nil || IsNil(o.Similarity) {
		var ret float32
		return ret
	}
	return *o.Similarity
}

// GetSimilarityOk returns a tuple with the Similarity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponse) GetSimilarityOk() (*float32, bool) {
	if o == nil || IsNil(o.Similarity) {
		return nil, false
	}
	return o.Similarity, true
}

// HasSimilarity returns a boolean if a field has been set.
func (o *SearchResponse) HasSimilarity() bool {
	if o != nil && !IsNil(o.Similarity) {
		return true
	}

	return false
}

// SetSimilarity gets a reference to the given float32 and assigns it to the Similarity field.
func (o *SearchResponse) SetSimilarity(v float32) {
	o.Similarity = &v
}

func (o SearchResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	if o.Avatarfull.IsSet() {
		toSerialize["avatarfull"] = o.Avatarfull.Get()
	}
	if o.Personaname.IsSet() {
		toSerialize["personaname"] = o.Personaname.Get()
	}
	if !IsNil(o.LastMatchTime) {
		toSerialize["last_match_time"] = o.LastMatchTime
	}
	if !IsNil(o.Similarity) {
		toSerialize["similarity"] = o.Similarity
	}
	return toSerialize, nil
}

type NullableSearchResponse struct {
	value *SearchResponse
	isSet bool
}

func (v NullableSearchResponse) Get() *SearchResponse {
	return v.value
}

func (v *NullableSearchResponse) Set(val *SearchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchResponse(val *SearchResponse) *NullableSearchResponse {
	return &NullableSearchResponse{value: val, isSet: true}
}

func (v NullableSearchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


