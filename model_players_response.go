/*
OpenDota API

# Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  Without a key, you can make 2,000 free calls per day at a rate limit of 60 requests/minute. We also offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.     

API version: 25.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PlayersResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlayersResponse{}

// PlayersResponse struct for PlayersResponse
type PlayersResponse struct {
	// solo_competitive_rank
	SoloCompetitiveRank NullableInt32 `json:"solo_competitive_rank,omitempty"`
	// competitive_rank
	CompetitiveRank NullableInt32 `json:"competitive_rank,omitempty"`
	// rank_tier
	RankTier NullableFloat32 `json:"rank_tier,omitempty"`
	// leaderboard_rank
	LeaderboardRank NullableFloat32 `json:"leaderboard_rank,omitempty"`
	Profile *PlayersResponseProfile `json:"profile,omitempty"`
}

// NewPlayersResponse instantiates a new PlayersResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlayersResponse() *PlayersResponse {
	this := PlayersResponse{}
	return &this
}

// NewPlayersResponseWithDefaults instantiates a new PlayersResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayersResponseWithDefaults() *PlayersResponse {
	this := PlayersResponse{}
	return &this
}

// GetSoloCompetitiveRank returns the SoloCompetitiveRank field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayersResponse) GetSoloCompetitiveRank() int32 {
	if o == nil || IsNil(o.SoloCompetitiveRank.Get()) {
		var ret int32
		return ret
	}
	return *o.SoloCompetitiveRank.Get()
}

// GetSoloCompetitiveRankOk returns a tuple with the SoloCompetitiveRank field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayersResponse) GetSoloCompetitiveRankOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SoloCompetitiveRank.Get(), o.SoloCompetitiveRank.IsSet()
}

// HasSoloCompetitiveRank returns a boolean if a field has been set.
func (o *PlayersResponse) HasSoloCompetitiveRank() bool {
	if o != nil && o.SoloCompetitiveRank.IsSet() {
		return true
	}

	return false
}

// SetSoloCompetitiveRank gets a reference to the given NullableInt32 and assigns it to the SoloCompetitiveRank field.
func (o *PlayersResponse) SetSoloCompetitiveRank(v int32) {
	o.SoloCompetitiveRank.Set(&v)
}
// SetSoloCompetitiveRankNil sets the value for SoloCompetitiveRank to be an explicit nil
func (o *PlayersResponse) SetSoloCompetitiveRankNil() {
	o.SoloCompetitiveRank.Set(nil)
}

// UnsetSoloCompetitiveRank ensures that no value is present for SoloCompetitiveRank, not even an explicit nil
func (o *PlayersResponse) UnsetSoloCompetitiveRank() {
	o.SoloCompetitiveRank.Unset()
}

// GetCompetitiveRank returns the CompetitiveRank field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayersResponse) GetCompetitiveRank() int32 {
	if o == nil || IsNil(o.CompetitiveRank.Get()) {
		var ret int32
		return ret
	}
	return *o.CompetitiveRank.Get()
}

// GetCompetitiveRankOk returns a tuple with the CompetitiveRank field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayersResponse) GetCompetitiveRankOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompetitiveRank.Get(), o.CompetitiveRank.IsSet()
}

// HasCompetitiveRank returns a boolean if a field has been set.
func (o *PlayersResponse) HasCompetitiveRank() bool {
	if o != nil && o.CompetitiveRank.IsSet() {
		return true
	}

	return false
}

// SetCompetitiveRank gets a reference to the given NullableInt32 and assigns it to the CompetitiveRank field.
func (o *PlayersResponse) SetCompetitiveRank(v int32) {
	o.CompetitiveRank.Set(&v)
}
// SetCompetitiveRankNil sets the value for CompetitiveRank to be an explicit nil
func (o *PlayersResponse) SetCompetitiveRankNil() {
	o.CompetitiveRank.Set(nil)
}

// UnsetCompetitiveRank ensures that no value is present for CompetitiveRank, not even an explicit nil
func (o *PlayersResponse) UnsetCompetitiveRank() {
	o.CompetitiveRank.Unset()
}

// GetRankTier returns the RankTier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayersResponse) GetRankTier() float32 {
	if o == nil || IsNil(o.RankTier.Get()) {
		var ret float32
		return ret
	}
	return *o.RankTier.Get()
}

// GetRankTierOk returns a tuple with the RankTier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayersResponse) GetRankTierOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RankTier.Get(), o.RankTier.IsSet()
}

// HasRankTier returns a boolean if a field has been set.
func (o *PlayersResponse) HasRankTier() bool {
	if o != nil && o.RankTier.IsSet() {
		return true
	}

	return false
}

// SetRankTier gets a reference to the given NullableFloat32 and assigns it to the RankTier field.
func (o *PlayersResponse) SetRankTier(v float32) {
	o.RankTier.Set(&v)
}
// SetRankTierNil sets the value for RankTier to be an explicit nil
func (o *PlayersResponse) SetRankTierNil() {
	o.RankTier.Set(nil)
}

// UnsetRankTier ensures that no value is present for RankTier, not even an explicit nil
func (o *PlayersResponse) UnsetRankTier() {
	o.RankTier.Unset()
}

// GetLeaderboardRank returns the LeaderboardRank field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlayersResponse) GetLeaderboardRank() float32 {
	if o == nil || IsNil(o.LeaderboardRank.Get()) {
		var ret float32
		return ret
	}
	return *o.LeaderboardRank.Get()
}

// GetLeaderboardRankOk returns a tuple with the LeaderboardRank field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlayersResponse) GetLeaderboardRankOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LeaderboardRank.Get(), o.LeaderboardRank.IsSet()
}

// HasLeaderboardRank returns a boolean if a field has been set.
func (o *PlayersResponse) HasLeaderboardRank() bool {
	if o != nil && o.LeaderboardRank.IsSet() {
		return true
	}

	return false
}

// SetLeaderboardRank gets a reference to the given NullableFloat32 and assigns it to the LeaderboardRank field.
func (o *PlayersResponse) SetLeaderboardRank(v float32) {
	o.LeaderboardRank.Set(&v)
}
// SetLeaderboardRankNil sets the value for LeaderboardRank to be an explicit nil
func (o *PlayersResponse) SetLeaderboardRankNil() {
	o.LeaderboardRank.Set(nil)
}

// UnsetLeaderboardRank ensures that no value is present for LeaderboardRank, not even an explicit nil
func (o *PlayersResponse) UnsetLeaderboardRank() {
	o.LeaderboardRank.Unset()
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *PlayersResponse) GetProfile() PlayersResponseProfile {
	if o == nil || IsNil(o.Profile) {
		var ret PlayersResponseProfile
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayersResponse) GetProfileOk() (*PlayersResponseProfile, bool) {
	if o == nil || IsNil(o.Profile) {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *PlayersResponse) HasProfile() bool {
	if o != nil && !IsNil(o.Profile) {
		return true
	}

	return false
}

// SetProfile gets a reference to the given PlayersResponseProfile and assigns it to the Profile field.
func (o *PlayersResponse) SetProfile(v PlayersResponseProfile) {
	o.Profile = &v
}

func (o PlayersResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlayersResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.SoloCompetitiveRank.IsSet() {
		toSerialize["solo_competitive_rank"] = o.SoloCompetitiveRank.Get()
	}
	if o.CompetitiveRank.IsSet() {
		toSerialize["competitive_rank"] = o.CompetitiveRank.Get()
	}
	if o.RankTier.IsSet() {
		toSerialize["rank_tier"] = o.RankTier.Get()
	}
	if o.LeaderboardRank.IsSet() {
		toSerialize["leaderboard_rank"] = o.LeaderboardRank.Get()
	}
	if !IsNil(o.Profile) {
		toSerialize["profile"] = o.Profile
	}
	return toSerialize, nil
}

type NullablePlayersResponse struct {
	value *PlayersResponse
	isSet bool
}

func (v NullablePlayersResponse) Get() *PlayersResponse {
	return v.value
}

func (v *NullablePlayersResponse) Set(val *PlayersResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayersResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayersResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayersResponse(val *PlayersResponse) *NullablePlayersResponse {
	return &NullablePlayersResponse{value: val, isSet: true}
}

func (v NullablePlayersResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayersResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


