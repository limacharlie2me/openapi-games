/*
OpenDota API

# Introduction The OpenDota API provides Dota 2 related data including advanced match data extracted from match replays.  You can find data that can be used to convert hero and ability IDs and other information provided by the API from the [dotaconstants](https://github.com/odota/dotaconstants) repository.  Without a key, you can make 2,000 free calls per day at a rate limit of 60 requests/minute. We also offer a Premium Tier with unlimited API calls and higher rate limits. Check out the [API page](https://www.opendota.com/api-keys) to learn more.     

API version: 25.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TeamMatchObjectResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamMatchObjectResponse{}

// TeamMatchObjectResponse struct for TeamMatchObjectResponse
type TeamMatchObjectResponse struct {
	// The ID number of the match assigned by Valve
	MatchId *int32 `json:"match_id,omitempty"`
	// Whether the team/player/hero was on Radiant
	Radiant *bool `json:"radiant,omitempty"`
	// Boolean indicating whether Radiant won the match
	RadiantWin NullableBool `json:"radiant_win,omitempty"`
	// Number of kills the Radiant team had when the match ended
	RadiantScore *int32 `json:"radiant_score,omitempty"`
	// Number of kills the Dire team had when the match ended
	DireScore *int32 `json:"dire_score,omitempty"`
	// Duration of the game in seconds
	Duration *int32 `json:"duration,omitempty"`
	// The Unix timestamp at which the game started
	StartTime *int32 `json:"start_time,omitempty"`
	// Identifier for the league the match took place in
	Leagueid *int32 `json:"leagueid,omitempty"`
	// Name of league the match took place in
	LeagueName *string `json:"league_name,omitempty"`
	// cluster
	Cluster *int32 `json:"cluster,omitempty"`
	// Opposing team identifier
	OpposingTeamId *int32 `json:"opposing_team_id,omitempty"`
	// Opposing team name, e.g. 'Evil Geniuses'
	OpposingTeamName NullableString `json:"opposing_team_name,omitempty"`
	// Opposing team logo url
	OpposingTeamLogo *string `json:"opposing_team_logo,omitempty"`
}

// NewTeamMatchObjectResponse instantiates a new TeamMatchObjectResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamMatchObjectResponse() *TeamMatchObjectResponse {
	this := TeamMatchObjectResponse{}
	return &this
}

// NewTeamMatchObjectResponseWithDefaults instantiates a new TeamMatchObjectResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamMatchObjectResponseWithDefaults() *TeamMatchObjectResponse {
	this := TeamMatchObjectResponse{}
	return &this
}

// GetMatchId returns the MatchId field value if set, zero value otherwise.
func (o *TeamMatchObjectResponse) GetMatchId() int32 {
	if o == nil || IsNil(o.MatchId) {
		var ret int32
		return ret
	}
	return *o.MatchId
}

// GetMatchIdOk returns a tuple with the MatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamMatchObjectResponse) GetMatchIdOk() (*int32, bool) {
	if o == nil || IsNil(o.MatchId) {
		return nil, false
	}
	return o.MatchId, true
}

// HasMatchId returns a boolean if a field has been set.
func (o *TeamMatchObjectResponse) HasMatchId() bool {
	if o != nil && !IsNil(o.MatchId) {
		return true
	}

	return false
}

// SetMatchId gets a reference to the given int32 and assigns it to the MatchId field.
func (o *TeamMatchObjectResponse) SetMatchId(v int32) {
	o.MatchId = &v
}

// GetRadiant returns the Radiant field value if set, zero value otherwise.
func (o *TeamMatchObjectResponse) GetRadiant() bool {
	if o == nil || IsNil(o.Radiant) {
		var ret bool
		return ret
	}
	return *o.Radiant
}

// GetRadiantOk returns a tuple with the Radiant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamMatchObjectResponse) GetRadiantOk() (*bool, bool) {
	if o == nil || IsNil(o.Radiant) {
		return nil, false
	}
	return o.Radiant, true
}

// HasRadiant returns a boolean if a field has been set.
func (o *TeamMatchObjectResponse) HasRadiant() bool {
	if o != nil && !IsNil(o.Radiant) {
		return true
	}

	return false
}

// SetRadiant gets a reference to the given bool and assigns it to the Radiant field.
func (o *TeamMatchObjectResponse) SetRadiant(v bool) {
	o.Radiant = &v
}

// GetRadiantWin returns the RadiantWin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TeamMatchObjectResponse) GetRadiantWin() bool {
	if o == nil || IsNil(o.RadiantWin.Get()) {
		var ret bool
		return ret
	}
	return *o.RadiantWin.Get()
}

// GetRadiantWinOk returns a tuple with the RadiantWin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TeamMatchObjectResponse) GetRadiantWinOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RadiantWin.Get(), o.RadiantWin.IsSet()
}

// HasRadiantWin returns a boolean if a field has been set.
func (o *TeamMatchObjectResponse) HasRadiantWin() bool {
	if o != nil && o.RadiantWin.IsSet() {
		return true
	}

	return false
}

// SetRadiantWin gets a reference to the given NullableBool and assigns it to the RadiantWin field.
func (o *TeamMatchObjectResponse) SetRadiantWin(v bool) {
	o.RadiantWin.Set(&v)
}
// SetRadiantWinNil sets the value for RadiantWin to be an explicit nil
func (o *TeamMatchObjectResponse) SetRadiantWinNil() {
	o.RadiantWin.Set(nil)
}

// UnsetRadiantWin ensures that no value is present for RadiantWin, not even an explicit nil
func (o *TeamMatchObjectResponse) UnsetRadiantWin() {
	o.RadiantWin.Unset()
}

// GetRadiantScore returns the RadiantScore field value if set, zero value otherwise.
func (o *TeamMatchObjectResponse) GetRadiantScore() int32 {
	if o == nil || IsNil(o.RadiantScore) {
		var ret int32
		return ret
	}
	return *o.RadiantScore
}

// GetRadiantScoreOk returns a tuple with the RadiantScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamMatchObjectResponse) GetRadiantScoreOk() (*int32, bool) {
	if o == nil || IsNil(o.RadiantScore) {
		return nil, false
	}
	return o.RadiantScore, true
}

// HasRadiantScore returns a boolean if a field has been set.
func (o *TeamMatchObjectResponse) HasRadiantScore() bool {
	if o != nil && !IsNil(o.RadiantScore) {
		return true
	}

	return false
}

// SetRadiantScore gets a reference to the given int32 and assigns it to the RadiantScore field.
func (o *TeamMatchObjectResponse) SetRadiantScore(v int32) {
	o.RadiantScore = &v
}

// GetDireScore returns the DireScore field value if set, zero value otherwise.
func (o *TeamMatchObjectResponse) GetDireScore() int32 {
	if o == nil || IsNil(o.DireScore) {
		var ret int32
		return ret
	}
	return *o.DireScore
}

// GetDireScoreOk returns a tuple with the DireScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamMatchObjectResponse) GetDireScoreOk() (*int32, bool) {
	if o == nil || IsNil(o.DireScore) {
		return nil, false
	}
	return o.DireScore, true
}

// HasDireScore returns a boolean if a field has been set.
func (o *TeamMatchObjectResponse) HasDireScore() bool {
	if o != nil && !IsNil(o.DireScore) {
		return true
	}

	return false
}

// SetDireScore gets a reference to the given int32 and assigns it to the DireScore field.
func (o *TeamMatchObjectResponse) SetDireScore(v int32) {
	o.DireScore = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *TeamMatchObjectResponse) GetDuration() int32 {
	if o == nil || IsNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamMatchObjectResponse) GetDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *TeamMatchObjectResponse) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *TeamMatchObjectResponse) SetDuration(v int32) {
	o.Duration = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *TeamMatchObjectResponse) GetStartTime() int32 {
	if o == nil || IsNil(o.StartTime) {
		var ret int32
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamMatchObjectResponse) GetStartTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *TeamMatchObjectResponse) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given int32 and assigns it to the StartTime field.
func (o *TeamMatchObjectResponse) SetStartTime(v int32) {
	o.StartTime = &v
}

// GetLeagueid returns the Leagueid field value if set, zero value otherwise.
func (o *TeamMatchObjectResponse) GetLeagueid() int32 {
	if o == nil || IsNil(o.Leagueid) {
		var ret int32
		return ret
	}
	return *o.Leagueid
}

// GetLeagueidOk returns a tuple with the Leagueid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamMatchObjectResponse) GetLeagueidOk() (*int32, bool) {
	if o == nil || IsNil(o.Leagueid) {
		return nil, false
	}
	return o.Leagueid, true
}

// HasLeagueid returns a boolean if a field has been set.
func (o *TeamMatchObjectResponse) HasLeagueid() bool {
	if o != nil && !IsNil(o.Leagueid) {
		return true
	}

	return false
}

// SetLeagueid gets a reference to the given int32 and assigns it to the Leagueid field.
func (o *TeamMatchObjectResponse) SetLeagueid(v int32) {
	o.Leagueid = &v
}

// GetLeagueName returns the LeagueName field value if set, zero value otherwise.
func (o *TeamMatchObjectResponse) GetLeagueName() string {
	if o == nil || IsNil(o.LeagueName) {
		var ret string
		return ret
	}
	return *o.LeagueName
}

// GetLeagueNameOk returns a tuple with the LeagueName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamMatchObjectResponse) GetLeagueNameOk() (*string, bool) {
	if o == nil || IsNil(o.LeagueName) {
		return nil, false
	}
	return o.LeagueName, true
}

// HasLeagueName returns a boolean if a field has been set.
func (o *TeamMatchObjectResponse) HasLeagueName() bool {
	if o != nil && !IsNil(o.LeagueName) {
		return true
	}

	return false
}

// SetLeagueName gets a reference to the given string and assigns it to the LeagueName field.
func (o *TeamMatchObjectResponse) SetLeagueName(v string) {
	o.LeagueName = &v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *TeamMatchObjectResponse) GetCluster() int32 {
	if o == nil || IsNil(o.Cluster) {
		var ret int32
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamMatchObjectResponse) GetClusterOk() (*int32, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *TeamMatchObjectResponse) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given int32 and assigns it to the Cluster field.
func (o *TeamMatchObjectResponse) SetCluster(v int32) {
	o.Cluster = &v
}

// GetOpposingTeamId returns the OpposingTeamId field value if set, zero value otherwise.
func (o *TeamMatchObjectResponse) GetOpposingTeamId() int32 {
	if o == nil || IsNil(o.OpposingTeamId) {
		var ret int32
		return ret
	}
	return *o.OpposingTeamId
}

// GetOpposingTeamIdOk returns a tuple with the OpposingTeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamMatchObjectResponse) GetOpposingTeamIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OpposingTeamId) {
		return nil, false
	}
	return o.OpposingTeamId, true
}

// HasOpposingTeamId returns a boolean if a field has been set.
func (o *TeamMatchObjectResponse) HasOpposingTeamId() bool {
	if o != nil && !IsNil(o.OpposingTeamId) {
		return true
	}

	return false
}

// SetOpposingTeamId gets a reference to the given int32 and assigns it to the OpposingTeamId field.
func (o *TeamMatchObjectResponse) SetOpposingTeamId(v int32) {
	o.OpposingTeamId = &v
}

// GetOpposingTeamName returns the OpposingTeamName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TeamMatchObjectResponse) GetOpposingTeamName() string {
	if o == nil || IsNil(o.OpposingTeamName.Get()) {
		var ret string
		return ret
	}
	return *o.OpposingTeamName.Get()
}

// GetOpposingTeamNameOk returns a tuple with the OpposingTeamName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TeamMatchObjectResponse) GetOpposingTeamNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OpposingTeamName.Get(), o.OpposingTeamName.IsSet()
}

// HasOpposingTeamName returns a boolean if a field has been set.
func (o *TeamMatchObjectResponse) HasOpposingTeamName() bool {
	if o != nil && o.OpposingTeamName.IsSet() {
		return true
	}

	return false
}

// SetOpposingTeamName gets a reference to the given NullableString and assigns it to the OpposingTeamName field.
func (o *TeamMatchObjectResponse) SetOpposingTeamName(v string) {
	o.OpposingTeamName.Set(&v)
}
// SetOpposingTeamNameNil sets the value for OpposingTeamName to be an explicit nil
func (o *TeamMatchObjectResponse) SetOpposingTeamNameNil() {
	o.OpposingTeamName.Set(nil)
}

// UnsetOpposingTeamName ensures that no value is present for OpposingTeamName, not even an explicit nil
func (o *TeamMatchObjectResponse) UnsetOpposingTeamName() {
	o.OpposingTeamName.Unset()
}

// GetOpposingTeamLogo returns the OpposingTeamLogo field value if set, zero value otherwise.
func (o *TeamMatchObjectResponse) GetOpposingTeamLogo() string {
	if o == nil || IsNil(o.OpposingTeamLogo) {
		var ret string
		return ret
	}
	return *o.OpposingTeamLogo
}

// GetOpposingTeamLogoOk returns a tuple with the OpposingTeamLogo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamMatchObjectResponse) GetOpposingTeamLogoOk() (*string, bool) {
	if o == nil || IsNil(o.OpposingTeamLogo) {
		return nil, false
	}
	return o.OpposingTeamLogo, true
}

// HasOpposingTeamLogo returns a boolean if a field has been set.
func (o *TeamMatchObjectResponse) HasOpposingTeamLogo() bool {
	if o != nil && !IsNil(o.OpposingTeamLogo) {
		return true
	}

	return false
}

// SetOpposingTeamLogo gets a reference to the given string and assigns it to the OpposingTeamLogo field.
func (o *TeamMatchObjectResponse) SetOpposingTeamLogo(v string) {
	o.OpposingTeamLogo = &v
}

func (o TeamMatchObjectResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamMatchObjectResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MatchId) {
		toSerialize["match_id"] = o.MatchId
	}
	if !IsNil(o.Radiant) {
		toSerialize["radiant"] = o.Radiant
	}
	if o.RadiantWin.IsSet() {
		toSerialize["radiant_win"] = o.RadiantWin.Get()
	}
	if !IsNil(o.RadiantScore) {
		toSerialize["radiant_score"] = o.RadiantScore
	}
	if !IsNil(o.DireScore) {
		toSerialize["dire_score"] = o.DireScore
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	if !IsNil(o.Leagueid) {
		toSerialize["leagueid"] = o.Leagueid
	}
	if !IsNil(o.LeagueName) {
		toSerialize["league_name"] = o.LeagueName
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.OpposingTeamId) {
		toSerialize["opposing_team_id"] = o.OpposingTeamId
	}
	if o.OpposingTeamName.IsSet() {
		toSerialize["opposing_team_name"] = o.OpposingTeamName.Get()
	}
	if !IsNil(o.OpposingTeamLogo) {
		toSerialize["opposing_team_logo"] = o.OpposingTeamLogo
	}
	return toSerialize, nil
}

type NullableTeamMatchObjectResponse struct {
	value *TeamMatchObjectResponse
	isSet bool
}

func (v NullableTeamMatchObjectResponse) Get() *TeamMatchObjectResponse {
	return v.value
}

func (v *NullableTeamMatchObjectResponse) Set(val *TeamMatchObjectResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamMatchObjectResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamMatchObjectResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamMatchObjectResponse(val *TeamMatchObjectResponse) *NullableTeamMatchObjectResponse {
	return &NullableTeamMatchObjectResponse{value: val, isSet: true}
}

func (v NullableTeamMatchObjectResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamMatchObjectResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


